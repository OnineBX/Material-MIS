#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MMSPro.WebApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MMSpro")]
	public partial class MMSProDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAwaitScrap(AwaitScrap instance);
    partial void UpdateAwaitScrap(AwaitScrap instance);
    partial void DeleteAwaitScrap(AwaitScrap instance);
    partial void InsertWarningList(WarningList instance);
    partial void UpdateWarningList(WarningList instance);
    partial void DeleteWarningList(WarningList instance);
    partial void InsertBatchOfIndex(BatchOfIndex instance);
    partial void UpdateBatchOfIndex(BatchOfIndex instance);
    partial void DeleteBatchOfIndex(BatchOfIndex instance);
    partial void InsertBusinessUnitInfo(BusinessUnitInfo instance);
    partial void UpdateBusinessUnitInfo(BusinessUnitInfo instance);
    partial void DeleteBusinessUnitInfo(BusinessUnitInfo instance);
    partial void InsertBusinessUnitType(BusinessUnitType instance);
    partial void UpdateBusinessUnitType(BusinessUnitType instance);
    partial void DeleteBusinessUnitType(BusinessUnitType instance);
    partial void InsertCommitDirector(CommitDirector instance);
    partial void UpdateCommitDirector(CommitDirector instance);
    partial void DeleteCommitDirector(CommitDirector instance);
    partial void InsertCommitIn(CommitIn instance);
    partial void UpdateCommitIn(CommitIn instance);
    partial void DeleteCommitIn(CommitIn instance);
    partial void InsertCommitInAssets(CommitInAssets instance);
    partial void UpdateCommitInAssets(CommitInAssets instance);
    partial void DeleteCommitInAssets(CommitInAssets instance);
    partial void InsertCommitInAudited(CommitInAudited instance);
    partial void UpdateCommitInAudited(CommitInAudited instance);
    partial void DeleteCommitInAudited(CommitInAudited instance);
    partial void InsertCommitInDetailed(CommitInDetailed instance);
    partial void UpdateCommitInDetailed(CommitInDetailed instance);
    partial void DeleteCommitInDetailed(CommitInDetailed instance);
    partial void InsertCommitInHead(CommitInHead instance);
    partial void UpdateCommitInHead(CommitInHead instance);
    partial void DeleteCommitInHead(CommitInHead instance);
    partial void InsertCommitInMain(CommitInMain instance);
    partial void UpdateCommitInMain(CommitInMain instance);
    partial void DeleteCommitInMain(CommitInMain instance);
    partial void InsertCommitInMaterials(CommitInMaterials instance);
    partial void UpdateCommitInMaterials(CommitInMaterials instance);
    partial void DeleteCommitInMaterials(CommitInMaterials instance);
    partial void InsertCommitInMaterialsLeader(CommitInMaterialsLeader instance);
    partial void UpdateCommitInMaterialsLeader(CommitInMaterialsLeader instance);
    partial void DeleteCommitInMaterialsLeader(CommitInMaterialsLeader instance);
    partial void InsertCommitInQualified(CommitInQualified instance);
    partial void UpdateCommitInQualified(CommitInQualified instance);
    partial void DeleteCommitInQualified(CommitInQualified instance);
    partial void InsertCommitInTest(CommitInTest instance);
    partial void UpdateCommitInTest(CommitInTest instance);
    partial void DeleteCommitInTest(CommitInTest instance);
    partial void InsertCommitProduce(CommitProduce instance);
    partial void UpdateCommitProduce(CommitProduce instance);
    partial void DeleteCommitProduce(CommitProduce instance);
    partial void InsertDeliveredTypeInfo(DeliveredTypeInfo instance);
    partial void UpdateDeliveredTypeInfo(DeliveredTypeInfo instance);
    partial void DeleteDeliveredTypeInfo(DeliveredTypeInfo instance);
    partial void InsertDepInfo(DepInfo instance);
    partial void UpdateDepInfo(DepInfo instance);
    partial void DeleteDepInfo(DepInfo instance);
    partial void InsertEmpInfo(EmpInfo instance);
    partial void UpdateEmpInfo(EmpInfo instance);
    partial void DeleteEmpInfo(EmpInfo instance);
    partial void InsertFileOfQC(FileOfQC instance);
    partial void UpdateFileOfQC(FileOfQC instance);
    partial void DeleteFileOfQC(FileOfQC instance);
    partial void InsertFlowDetailsOffline(FlowDetailsOffline instance);
    partial void UpdateFlowDetailsOffline(FlowDetailsOffline instance);
    partial void DeleteFlowDetailsOffline(FlowDetailsOffline instance);
    partial void InsertLogInfo(LogInfo instance);
    partial void UpdateLogInfo(LogInfo instance);
    partial void DeleteLogInfo(LogInfo instance);
    partial void InsertManufacturer(Manufacturer instance);
    partial void UpdateManufacturer(Manufacturer instance);
    partial void DeleteManufacturer(Manufacturer instance);
    partial void InsertManufacturerType(ManufacturerType instance);
    partial void UpdateManufacturerType(ManufacturerType instance);
    partial void DeleteManufacturerType(ManufacturerType instance);
    partial void InsertMaterialChildType(MaterialChildType instance);
    partial void UpdateMaterialChildType(MaterialChildType instance);
    partial void DeleteMaterialChildType(MaterialChildType instance);
    partial void InsertMaterialInfo(MaterialInfo instance);
    partial void UpdateMaterialInfo(MaterialInfo instance);
    partial void DeleteMaterialInfo(MaterialInfo instance);
    partial void InsertMaterialMainType(MaterialMainType instance);
    partial void UpdateMaterialMainType(MaterialMainType instance);
    partial void DeleteMaterialMainType(MaterialMainType instance);
    partial void InsertMaterialType(MaterialType instance);
    partial void UpdateMaterialType(MaterialType instance);
    partial void DeleteMaterialType(MaterialType instance);
    partial void InsertMessageInfo(MessageInfo instance);
    partial void UpdateMessageInfo(MessageInfo instance);
    partial void DeleteMessageInfo(MessageInfo instance);
    partial void InsertMessageReceiver(MessageReceiver instance);
    partial void UpdateMessageReceiver(MessageReceiver instance);
    partial void DeleteMessageReceiver(MessageReceiver instance);
    partial void InsertPileInfo(PileInfo instance);
    partial void UpdatePileInfo(PileInfo instance);
    partial void DeletePileInfo(PileInfo instance);
    partial void InsertProjectInfo(ProjectInfo instance);
    partial void UpdateProjectInfo(ProjectInfo instance);
    partial void DeleteProjectInfo(ProjectInfo instance);
    partial void InsertProxyDirector(ProxyDirector instance);
    partial void UpdateProxyDirector(ProxyDirector instance);
    partial void DeleteProxyDirector(ProxyDirector instance);
    partial void InsertQualifiedStocks(QualifiedStocks instance);
    partial void UpdateQualifiedStocks(QualifiedStocks instance);
    partial void DeleteQualifiedStocks(QualifiedStocks instance);
    partial void InsertReceivingTypeInfo(ReceivingTypeInfo instance);
    partial void UpdateReceivingTypeInfo(ReceivingTypeInfo instance);
    partial void DeleteReceivingTypeInfo(ReceivingTypeInfo instance);
    partial void InsertRelationCommitIn(RelationCommitIn instance);
    partial void UpdateRelationCommitIn(RelationCommitIn instance);
    partial void DeleteRelationCommitIn(RelationCommitIn instance);
    partial void InsertRelationProjectBusiness(RelationProjectBusiness instance);
    partial void UpdateRelationProjectBusiness(RelationProjectBusiness instance);
    partial void DeleteRelationProjectBusiness(RelationProjectBusiness instance);
    partial void InsertScrapped(Scrapped instance);
    partial void UpdateScrapped(Scrapped instance);
    partial void DeleteScrapped(Scrapped instance);
    partial void InsertSrinAccountReceiptConfirm(SrinAccountReceiptConfirm instance);
    partial void UpdateSrinAccountReceiptConfirm(SrinAccountReceiptConfirm instance);
    partial void DeleteSrinAccountReceiptConfirm(SrinAccountReceiptConfirm instance);
    partial void InsertSrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm instance);
    partial void UpdateSrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm instance);
    partial void DeleteSrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm instance);
    partial void InsertSrinAssetQualifiedDetails(SrinAssetQualifiedDetails instance);
    partial void UpdateSrinAssetQualifiedDetails(SrinAssetQualifiedDetails instance);
    partial void DeleteSrinAssetQualifiedDetails(SrinAssetQualifiedDetails instance);
    partial void InsertSrinAssetReceiptConfirm(SrinAssetReceiptConfirm instance);
    partial void UpdateSrinAssetReceiptConfirm(SrinAssetReceiptConfirm instance);
    partial void DeleteSrinAssetReceiptConfirm(SrinAssetReceiptConfirm instance);
    partial void InsertSrinDetails(SrinDetails instance);
    partial void UpdateSrinDetails(SrinDetails instance);
    partial void DeleteSrinDetails(SrinDetails instance);
    partial void InsertSrinInspectorVerifyDetails(SrinInspectorVerifyDetails instance);
    partial void UpdateSrinInspectorVerifyDetails(SrinInspectorVerifyDetails instance);
    partial void DeleteSrinInspectorVerifyDetails(SrinInspectorVerifyDetails instance);
    partial void InsertSrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails instance);
    partial void UpdateSrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails instance);
    partial void DeleteSrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails instance);
    partial void InsertSrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer instance);
    partial void UpdateSrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer instance);
    partial void DeleteSrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer instance);
    partial void InsertSrinMaterialRepairAudit(SrinMaterialRepairAudit instance);
    partial void UpdateSrinMaterialRepairAudit(SrinMaterialRepairAudit instance);
    partial void DeleteSrinMaterialRepairAudit(SrinMaterialRepairAudit instance);
    partial void InsertSrinMaterialRepairDetails(SrinMaterialRepairDetails instance);
    partial void UpdateSrinMaterialRepairDetails(SrinMaterialRepairDetails instance);
    partial void DeleteSrinMaterialRepairDetails(SrinMaterialRepairDetails instance);
    partial void InsertSrinMaterialVerifyDetails(SrinMaterialVerifyDetails instance);
    partial void UpdateSrinMaterialVerifyDetails(SrinMaterialVerifyDetails instance);
    partial void DeleteSrinMaterialVerifyDetails(SrinMaterialVerifyDetails instance);
    partial void InsertSrinProduceVerifyTransfer(SrinProduceVerifyTransfer instance);
    partial void UpdateSrinProduceVerifyTransfer(SrinProduceVerifyTransfer instance);
    partial void DeleteSrinProduceVerifyTransfer(SrinProduceVerifyTransfer instance);
    partial void InsertSrinQualifiedReceipt(SrinQualifiedReceipt instance);
    partial void UpdateSrinQualifiedReceipt(SrinQualifiedReceipt instance);
    partial void DeleteSrinQualifiedReceipt(SrinQualifiedReceipt instance);
    partial void InsertSrinReceipt(SrinReceipt instance);
    partial void UpdateSrinReceipt(SrinReceipt instance);
    partial void DeleteSrinReceipt(SrinReceipt instance);
    partial void InsertSrinRepairPlan(SrinRepairPlan instance);
    partial void UpdateSrinRepairPlan(SrinRepairPlan instance);
    partial void DeleteSrinRepairPlan(SrinRepairPlan instance);
    partial void InsertSrinRepairReport(SrinRepairReport instance);
    partial void UpdateSrinRepairReport(SrinRepairReport instance);
    partial void DeleteSrinRepairReport(SrinRepairReport instance);
    partial void InsertSrinStocktaking(SrinStocktaking instance);
    partial void UpdateSrinStocktaking(SrinStocktaking instance);
    partial void DeleteSrinStocktaking(SrinStocktaking instance);
    partial void InsertSrinStocktakingConfirm(SrinStocktakingConfirm instance);
    partial void UpdateSrinStocktakingConfirm(SrinStocktakingConfirm instance);
    partial void DeleteSrinStocktakingConfirm(SrinStocktakingConfirm instance);
    partial void InsertSrinStocktakingDetails(SrinStocktakingDetails instance);
    partial void UpdateSrinStocktakingDetails(SrinStocktakingDetails instance);
    partial void DeleteSrinStocktakingDetails(SrinStocktakingDetails instance);
    partial void InsertSrinSubDetails(SrinSubDetails instance);
    partial void UpdateSrinSubDetails(SrinSubDetails instance);
    partial void DeleteSrinSubDetails(SrinSubDetails instance);
    partial void InsertSrinSubDoc(SrinSubDoc instance);
    partial void UpdateSrinSubDoc(SrinSubDoc instance);
    partial void DeleteSrinSubDoc(SrinSubDoc instance);
    partial void InsertSrinVerifyTransfer(SrinVerifyTransfer instance);
    partial void UpdateSrinVerifyTransfer(SrinVerifyTransfer instance);
    partial void DeleteSrinVerifyTransfer(SrinVerifyTransfer instance);
    partial void InsertSrinWriteOffDetails(SrinWriteOffDetails instance);
    partial void UpdateSrinWriteOffDetails(SrinWriteOffDetails instance);
    partial void DeleteSrinWriteOffDetails(SrinWriteOffDetails instance);
    partial void InsertStockOnline(StockOnline instance);
    partial void UpdateStockOnline(StockOnline instance);
    partial void DeleteStockOnline(StockOnline instance);
    partial void InsertStockTransfer(StockTransfer instance);
    partial void UpdateStockTransfer(StockTransfer instance);
    partial void DeleteStockTransfer(StockTransfer instance);
    partial void InsertStockTransferDetail(StockTransferDetail instance);
    partial void UpdateStockTransferDetail(StockTransferDetail instance);
    partial void DeleteStockTransferDetail(StockTransferDetail instance);
    partial void InsertStockTransferTask(StockTransferTask instance);
    partial void UpdateStockTransferTask(StockTransferTask instance);
    partial void DeleteStockTransferTask(StockTransferTask instance);
    partial void InsertStorageCommitOutAssetAudit(StorageCommitOutAssetAudit instance);
    partial void UpdateStorageCommitOutAssetAudit(StorageCommitOutAssetAudit instance);
    partial void DeleteStorageCommitOutAssetAudit(StorageCommitOutAssetAudit instance);
    partial void InsertStorageCommitOutDetails(StorageCommitOutDetails instance);
    partial void UpdateStorageCommitOutDetails(StorageCommitOutDetails instance);
    partial void DeleteStorageCommitOutDetails(StorageCommitOutDetails instance);
    partial void InsertStorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm instance);
    partial void UpdateStorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm instance);
    partial void DeleteStorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm instance);
    partial void InsertStorageCommitOutNotice(StorageCommitOutNotice instance);
    partial void UpdateStorageCommitOutNotice(StorageCommitOutNotice instance);
    partial void DeleteStorageCommitOutNotice(StorageCommitOutNotice instance);
    partial void InsertStorageCommitOutProduceAudit(StorageCommitOutProduceAudit instance);
    partial void UpdateStorageCommitOutProduceAudit(StorageCommitOutProduceAudit instance);
    partial void DeleteStorageCommitOutProduceAudit(StorageCommitOutProduceAudit instance);
    partial void InsertStorageCommitOutRealDetails(StorageCommitOutRealDetails instance);
    partial void UpdateStorageCommitOutRealDetails(StorageCommitOutRealDetails instance);
    partial void DeleteStorageCommitOutRealDetails(StorageCommitOutRealDetails instance);
    partial void InsertStorageDirector(StorageDirector instance);
    partial void UpdateStorageDirector(StorageDirector instance);
    partial void DeleteStorageDirector(StorageDirector instance);
    partial void InsertStorageInAssets(StorageInAssets instance);
    partial void UpdateStorageInAssets(StorageInAssets instance);
    partial void DeleteStorageInAssets(StorageInAssets instance);
    partial void InsertStorageInfo(StorageInfo instance);
    partial void UpdateStorageInfo(StorageInfo instance);
    partial void DeleteStorageInfo(StorageInfo instance);
    partial void InsertStorageInHead(StorageInHead instance);
    partial void UpdateStorageInHead(StorageInHead instance);
    partial void DeleteStorageInHead(StorageInHead instance);
    partial void InsertStorageInMain(StorageInMain instance);
    partial void UpdateStorageInMain(StorageInMain instance);
    partial void DeleteStorageInMain(StorageInMain instance);
    partial void InsertStorageInMaterials(StorageInMaterials instance);
    partial void UpdateStorageInMaterials(StorageInMaterials instance);
    partial void DeleteStorageInMaterials(StorageInMaterials instance);
    partial void InsertStorageInMaterialsLeader(StorageInMaterialsLeader instance);
    partial void UpdateStorageInMaterialsLeader(StorageInMaterialsLeader instance);
    partial void DeleteStorageInMaterialsLeader(StorageInMaterialsLeader instance);
    partial void InsertStorageInTest(StorageInTest instance);
    partial void UpdateStorageInTest(StorageInTest instance);
    partial void DeleteStorageInTest(StorageInTest instance);
    partial void InsertStorageOutAssetAudit(StorageOutAssetAudit instance);
    partial void UpdateStorageOutAssetAudit(StorageOutAssetAudit instance);
    partial void DeleteStorageOutAssetAudit(StorageOutAssetAudit instance);
    partial void InsertStorageOutDetails(StorageOutDetails instance);
    partial void UpdateStorageOutDetails(StorageOutDetails instance);
    partial void DeleteStorageOutDetails(StorageOutDetails instance);
    partial void InsertStorageOutDirectorConfirm(StorageOutDirectorConfirm instance);
    partial void UpdateStorageOutDirectorConfirm(StorageOutDirectorConfirm instance);
    partial void DeleteStorageOutDirectorConfirm(StorageOutDirectorConfirm instance);
    partial void InsertStorageOutNotice(StorageOutNotice instance);
    partial void UpdateStorageOutNotice(StorageOutNotice instance);
    partial void DeleteStorageOutNotice(StorageOutNotice instance);
    partial void InsertStorageOutProduceAudit(StorageOutProduceAudit instance);
    partial void UpdateStorageOutProduceAudit(StorageOutProduceAudit instance);
    partial void DeleteStorageOutProduceAudit(StorageOutProduceAudit instance);
    partial void InsertStorageOutRealDetails(StorageOutRealDetails instance);
    partial void UpdateStorageOutRealDetails(StorageOutRealDetails instance);
    partial void DeleteStorageOutRealDetails(StorageOutRealDetails instance);
    partial void InsertStorageOutTask(StorageOutTask instance);
    partial void UpdateStorageOutTask(StorageOutTask instance);
    partial void DeleteStorageOutTask(StorageOutTask instance);
    partial void InsertStorageProduce(StorageProduce instance);
    partial void UpdateStorageProduce(StorageProduce instance);
    partial void DeleteStorageProduce(StorageProduce instance);
    partial void InsertSupplierInfo(SupplierInfo instance);
    partial void UpdateSupplierInfo(SupplierInfo instance);
    partial void DeleteSupplierInfo(SupplierInfo instance);
    partial void InsertSupplierType(SupplierType instance);
    partial void UpdateSupplierType(SupplierType instance);
    partial void DeleteSupplierType(SupplierType instance);
    partial void InsertTableOfStocks(TableOfStocks instance);
    partial void UpdateTableOfStocks(TableOfStocks instance);
    partial void DeleteTableOfStocks(TableOfStocks instance);
    partial void InsertTaskProxy(TaskProxy instance);
    partial void UpdateTaskProxy(TaskProxy instance);
    partial void DeleteTaskProxy(TaskProxy instance);
    partial void InsertTaskProxyType(TaskProxyType instance);
    partial void UpdateTaskProxyType(TaskProxyType instance);
    partial void DeleteTaskProxyType(TaskProxyType instance);
    partial void InsertTaskStorageIn(TaskStorageIn instance);
    partial void UpdateTaskStorageIn(TaskStorageIn instance);
    partial void DeleteTaskStorageIn(TaskStorageIn instance);
    #endregion
		
		public MMSProDBDataContext() : 
				base(global::MMSPro.WebApp.Properties.Settings.Default.MMSproConnectionString10, mappingSource)
		{
			OnCreated();
		}
		
		public MMSProDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MMSProDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MMSProDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MMSProDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AwaitScrap> AwaitScrap
		{
			get
			{
				return this.GetTable<AwaitScrap>();
			}
		}
		
		public System.Data.Linq.Table<WarningList> WarningList
		{
			get
			{
				return this.GetTable<WarningList>();
			}
		}
		
		public System.Data.Linq.Table<BatchOfIndex> BatchOfIndex
		{
			get
			{
				return this.GetTable<BatchOfIndex>();
			}
		}
		
		public System.Data.Linq.Table<BusinessUnitInfo> BusinessUnitInfo
		{
			get
			{
				return this.GetTable<BusinessUnitInfo>();
			}
		}
		
		public System.Data.Linq.Table<BusinessUnitType> BusinessUnitType
		{
			get
			{
				return this.GetTable<BusinessUnitType>();
			}
		}
		
		public System.Data.Linq.Table<CommitDirector> CommitDirector
		{
			get
			{
				return this.GetTable<CommitDirector>();
			}
		}
		
		public System.Data.Linq.Table<CommitIn> CommitIn
		{
			get
			{
				return this.GetTable<CommitIn>();
			}
		}
		
		public System.Data.Linq.Table<CommitInAssets> CommitInAssets
		{
			get
			{
				return this.GetTable<CommitInAssets>();
			}
		}
		
		public System.Data.Linq.Table<CommitInAudited> CommitInAudited
		{
			get
			{
				return this.GetTable<CommitInAudited>();
			}
		}
		
		public System.Data.Linq.Table<CommitInDetailed> CommitInDetailed
		{
			get
			{
				return this.GetTable<CommitInDetailed>();
			}
		}
		
		public System.Data.Linq.Table<CommitInHead> CommitInHead
		{
			get
			{
				return this.GetTable<CommitInHead>();
			}
		}
		
		public System.Data.Linq.Table<CommitInMain> CommitInMain
		{
			get
			{
				return this.GetTable<CommitInMain>();
			}
		}
		
		public System.Data.Linq.Table<CommitInMaterials> CommitInMaterials
		{
			get
			{
				return this.GetTable<CommitInMaterials>();
			}
		}
		
		public System.Data.Linq.Table<CommitInMaterialsLeader> CommitInMaterialsLeader
		{
			get
			{
				return this.GetTable<CommitInMaterialsLeader>();
			}
		}
		
		public System.Data.Linq.Table<CommitInQualified> CommitInQualified
		{
			get
			{
				return this.GetTable<CommitInQualified>();
			}
		}
		
		public System.Data.Linq.Table<CommitInTest> CommitInTest
		{
			get
			{
				return this.GetTable<CommitInTest>();
			}
		}
		
		public System.Data.Linq.Table<CommitProduce> CommitProduce
		{
			get
			{
				return this.GetTable<CommitProduce>();
			}
		}
		
		public System.Data.Linq.Table<DeliveredTypeInfo> DeliveredTypeInfo
		{
			get
			{
				return this.GetTable<DeliveredTypeInfo>();
			}
		}
		
		public System.Data.Linq.Table<DepInfo> DepInfo
		{
			get
			{
				return this.GetTable<DepInfo>();
			}
		}
		
		public System.Data.Linq.Table<EmpInfo> EmpInfo
		{
			get
			{
				return this.GetTable<EmpInfo>();
			}
		}
		
		public System.Data.Linq.Table<FileOfQC> FileOfQC
		{
			get
			{
				return this.GetTable<FileOfQC>();
			}
		}
		
		public System.Data.Linq.Table<FlowDetailsOffline> FlowDetailsOffline
		{
			get
			{
				return this.GetTable<FlowDetailsOffline>();
			}
		}
		
		public System.Data.Linq.Table<LogInfo> LogInfo
		{
			get
			{
				return this.GetTable<LogInfo>();
			}
		}
		
		public System.Data.Linq.Table<Manufacturer> Manufacturer
		{
			get
			{
				return this.GetTable<Manufacturer>();
			}
		}
		
		public System.Data.Linq.Table<ManufacturerType> ManufacturerType
		{
			get
			{
				return this.GetTable<ManufacturerType>();
			}
		}
		
		public System.Data.Linq.Table<MaterialChildType> MaterialChildType
		{
			get
			{
				return this.GetTable<MaterialChildType>();
			}
		}
		
		public System.Data.Linq.Table<MaterialInfo> MaterialInfo
		{
			get
			{
				return this.GetTable<MaterialInfo>();
			}
		}
		
		public System.Data.Linq.Table<MaterialMainType> MaterialMainType
		{
			get
			{
				return this.GetTable<MaterialMainType>();
			}
		}
		
		public System.Data.Linq.Table<MaterialType> MaterialType
		{
			get
			{
				return this.GetTable<MaterialType>();
			}
		}
		
		public System.Data.Linq.Table<MessageInfo> MessageInfo
		{
			get
			{
				return this.GetTable<MessageInfo>();
			}
		}
		
		public System.Data.Linq.Table<MessageReceiver> MessageReceiver
		{
			get
			{
				return this.GetTable<MessageReceiver>();
			}
		}
		
		public System.Data.Linq.Table<PileInfo> PileInfo
		{
			get
			{
				return this.GetTable<PileInfo>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInfo> ProjectInfo
		{
			get
			{
				return this.GetTable<ProjectInfo>();
			}
		}
		
		public System.Data.Linq.Table<ProxyDirector> ProxyDirector
		{
			get
			{
				return this.GetTable<ProxyDirector>();
			}
		}
		
		public System.Data.Linq.Table<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this.GetTable<QualifiedStocks>();
			}
		}
		
		public System.Data.Linq.Table<ReceivingTypeInfo> ReceivingTypeInfo
		{
			get
			{
				return this.GetTable<ReceivingTypeInfo>();
			}
		}
		
		public System.Data.Linq.Table<RelationCommitIn> RelationCommitIn
		{
			get
			{
				return this.GetTable<RelationCommitIn>();
			}
		}
		
		public System.Data.Linq.Table<RelationProjectBusiness> RelationProjectBusiness
		{
			get
			{
				return this.GetTable<RelationProjectBusiness>();
			}
		}
		
		public System.Data.Linq.Table<Scrapped> Scrapped
		{
			get
			{
				return this.GetTable<Scrapped>();
			}
		}
		
		public System.Data.Linq.Table<SrinAccountReceiptConfirm> SrinAccountReceiptConfirm
		{
			get
			{
				return this.GetTable<SrinAccountReceiptConfirm>();
			}
		}
		
		public System.Data.Linq.Table<SrinAChiefQReceiptConfirm> SrinAChiefQReceiptConfirm
		{
			get
			{
				return this.GetTable<SrinAChiefQReceiptConfirm>();
			}
		}
		
		public System.Data.Linq.Table<SrinAssetQualifiedDetails> SrinAssetQualifiedDetails
		{
			get
			{
				return this.GetTable<SrinAssetQualifiedDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinAssetReceiptConfirm> SrinAssetReceiptConfirm
		{
			get
			{
				return this.GetTable<SrinAssetReceiptConfirm>();
			}
		}
		
		public System.Data.Linq.Table<SrinDetails> SrinDetails
		{
			get
			{
				return this.GetTable<SrinDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinInspectorVerifyDetails> SrinInspectorVerifyDetails
		{
			get
			{
				return this.GetTable<SrinInspectorVerifyDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinInspectorVerifyRDetails> SrinInspectorVerifyRDetails
		{
			get
			{
				return this.GetTable<SrinInspectorVerifyRDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinInspectorVerifyTransfer> SrinInspectorVerifyTransfer
		{
			get
			{
				return this.GetTable<SrinInspectorVerifyTransfer>();
			}
		}
		
		public System.Data.Linq.Table<SrinMaterialRepairAudit> SrinMaterialRepairAudit
		{
			get
			{
				return this.GetTable<SrinMaterialRepairAudit>();
			}
		}
		
		public System.Data.Linq.Table<SrinMaterialRepairDetails> SrinMaterialRepairDetails
		{
			get
			{
				return this.GetTable<SrinMaterialRepairDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinMaterialVerifyDetails> SrinMaterialVerifyDetails
		{
			get
			{
				return this.GetTable<SrinMaterialVerifyDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinProduceVerifyTransfer> SrinProduceVerifyTransfer
		{
			get
			{
				return this.GetTable<SrinProduceVerifyTransfer>();
			}
		}
		
		public System.Data.Linq.Table<SrinQualifiedReceipt> SrinQualifiedReceipt
		{
			get
			{
				return this.GetTable<SrinQualifiedReceipt>();
			}
		}
		
		public System.Data.Linq.Table<SrinReceipt> SrinReceipt
		{
			get
			{
				return this.GetTable<SrinReceipt>();
			}
		}
		
		public System.Data.Linq.Table<SrinRepairPlan> SrinRepairPlan
		{
			get
			{
				return this.GetTable<SrinRepairPlan>();
			}
		}
		
		public System.Data.Linq.Table<SrinRepairReport> SrinRepairReport
		{
			get
			{
				return this.GetTable<SrinRepairReport>();
			}
		}
		
		public System.Data.Linq.Table<SrinStocktaking> SrinStocktaking
		{
			get
			{
				return this.GetTable<SrinStocktaking>();
			}
		}
		
		public System.Data.Linq.Table<SrinStocktakingConfirm> SrinStocktakingConfirm
		{
			get
			{
				return this.GetTable<SrinStocktakingConfirm>();
			}
		}
		
		public System.Data.Linq.Table<SrinStocktakingDetails> SrinStocktakingDetails
		{
			get
			{
				return this.GetTable<SrinStocktakingDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinSubDetails> SrinSubDetails
		{
			get
			{
				return this.GetTable<SrinSubDetails>();
			}
		}
		
		public System.Data.Linq.Table<SrinSubDoc> SrinSubDoc
		{
			get
			{
				return this.GetTable<SrinSubDoc>();
			}
		}
		
		public System.Data.Linq.Table<SrinVerifyTransfer> SrinVerifyTransfer
		{
			get
			{
				return this.GetTable<SrinVerifyTransfer>();
			}
		}
		
		public System.Data.Linq.Table<SrinWriteOffDetails> SrinWriteOffDetails
		{
			get
			{
				return this.GetTable<SrinWriteOffDetails>();
			}
		}
		
		public System.Data.Linq.Table<StockOnline> StockOnline
		{
			get
			{
				return this.GetTable<StockOnline>();
			}
		}
		
		public System.Data.Linq.Table<StockTransfer> StockTransfer
		{
			get
			{
				return this.GetTable<StockTransfer>();
			}
		}
		
		public System.Data.Linq.Table<StockTransferDetail> StockTransferDetail
		{
			get
			{
				return this.GetTable<StockTransferDetail>();
			}
		}
		
		public System.Data.Linq.Table<StockTransferTask> StockTransferTask
		{
			get
			{
				return this.GetTable<StockTransferTask>();
			}
		}
		
		public System.Data.Linq.Table<StorageCommitOutAssetAudit> StorageCommitOutAssetAudit
		{
			get
			{
				return this.GetTable<StorageCommitOutAssetAudit>();
			}
		}
		
		public System.Data.Linq.Table<StorageCommitOutDetails> StorageCommitOutDetails
		{
			get
			{
				return this.GetTable<StorageCommitOutDetails>();
			}
		}
		
		public System.Data.Linq.Table<StorageCommitOutDirectorConfirm> StorageCommitOutDirectorConfirm
		{
			get
			{
				return this.GetTable<StorageCommitOutDirectorConfirm>();
			}
		}
		
		public System.Data.Linq.Table<StorageCommitOutNotice> StorageCommitOutNotice
		{
			get
			{
				return this.GetTable<StorageCommitOutNotice>();
			}
		}
		
		public System.Data.Linq.Table<StorageCommitOutProduceAudit> StorageCommitOutProduceAudit
		{
			get
			{
				return this.GetTable<StorageCommitOutProduceAudit>();
			}
		}
		
		public System.Data.Linq.Table<StorageCommitOutRealDetails> StorageCommitOutRealDetails
		{
			get
			{
				return this.GetTable<StorageCommitOutRealDetails>();
			}
		}
		
		public System.Data.Linq.Table<StorageDirector> StorageDirector
		{
			get
			{
				return this.GetTable<StorageDirector>();
			}
		}
		
		public System.Data.Linq.Table<StorageInAssets> StorageInAssets
		{
			get
			{
				return this.GetTable<StorageInAssets>();
			}
		}
		
		public System.Data.Linq.Table<StorageInfo> StorageInfo
		{
			get
			{
				return this.GetTable<StorageInfo>();
			}
		}
		
		public System.Data.Linq.Table<StorageInHead> StorageInHead
		{
			get
			{
				return this.GetTable<StorageInHead>();
			}
		}
		
		public System.Data.Linq.Table<StorageInMain> StorageInMain
		{
			get
			{
				return this.GetTable<StorageInMain>();
			}
		}
		
		public System.Data.Linq.Table<StorageInMaterials> StorageInMaterials
		{
			get
			{
				return this.GetTable<StorageInMaterials>();
			}
		}
		
		public System.Data.Linq.Table<StorageInMaterialsLeader> StorageInMaterialsLeader
		{
			get
			{
				return this.GetTable<StorageInMaterialsLeader>();
			}
		}
		
		public System.Data.Linq.Table<StorageInTest> StorageInTest
		{
			get
			{
				return this.GetTable<StorageInTest>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutAssetAudit> StorageOutAssetAudit
		{
			get
			{
				return this.GetTable<StorageOutAssetAudit>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutDetails> StorageOutDetails
		{
			get
			{
				return this.GetTable<StorageOutDetails>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutDirectorConfirm> StorageOutDirectorConfirm
		{
			get
			{
				return this.GetTable<StorageOutDirectorConfirm>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutNotice> StorageOutNotice
		{
			get
			{
				return this.GetTable<StorageOutNotice>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutProduceAudit> StorageOutProduceAudit
		{
			get
			{
				return this.GetTable<StorageOutProduceAudit>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutRealDetails> StorageOutRealDetails
		{
			get
			{
				return this.GetTable<StorageOutRealDetails>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutTask> StorageOutTask
		{
			get
			{
				return this.GetTable<StorageOutTask>();
			}
		}
		
		public System.Data.Linq.Table<StorageProduce> StorageProduce
		{
			get
			{
				return this.GetTable<StorageProduce>();
			}
		}
		
		public System.Data.Linq.Table<SupplierInfo> SupplierInfo
		{
			get
			{
				return this.GetTable<SupplierInfo>();
			}
		}
		
		public System.Data.Linq.Table<SupplierType> SupplierType
		{
			get
			{
				return this.GetTable<SupplierType>();
			}
		}
		
		public System.Data.Linq.Table<TableOfStocks> TableOfStocks
		{
			get
			{
				return this.GetTable<TableOfStocks>();
			}
		}
		
		public System.Data.Linq.Table<TaskProxy> TaskProxy
		{
			get
			{
				return this.GetTable<TaskProxy>();
			}
		}
		
		public System.Data.Linq.Table<TaskProxyType> TaskProxyType
		{
			get
			{
				return this.GetTable<TaskProxyType>();
			}
		}
		
		public System.Data.Linq.Table<TaskStorageIn> TaskStorageIn
		{
			get
			{
				return this.GetTable<TaskStorageIn>();
			}
		}
		
		public System.Data.Linq.Table<WriteOffStocks> WriteOffStocks
		{
			get
			{
				return this.GetTable<WriteOffStocks>();
			}
		}
		
		public System.Data.Linq.Table<NormalIn> NormalIn
		{
			get
			{
				return this.GetTable<NormalIn>();
			}
		}
		
		public System.Data.Linq.Table<NormalOut> NormalOut
		{
			get
			{
				return this.GetTable<NormalOut>();
			}
		}
		
		public System.Data.Linq.Table<ReportStocks> ReportStocks
		{
			get
			{
				return this.GetTable<ReportStocks>();
			}
		}
		
		public System.Data.Linq.Table<SrinView> SrinView
		{
			get
			{
				return this.GetTable<SrinView>();
			}
		}
		
		public System.Data.Linq.Table<StocksOnline_> StocksOnline_
		{
			get
			{
				return this.GetTable<StocksOnline_>();
			}
		}
		
		public System.Data.Linq.Table<StorageStocks> StorageStocks
		{
			get
			{
				return this.GetTable<StorageStocks>();
			}
		}
		
		public System.Data.Linq.Table<tmp> tmp
		{
			get
			{
				return this.GetTable<tmp>();
			}
		}
		
		public System.Data.Linq.Table<ViewCommitIn> ViewCommitIn
		{
			get
			{
				return this.GetTable<ViewCommitIn>();
			}
		}
		
		public System.Data.Linq.Table<ViewCommitOut> ViewCommitOut
		{
			get
			{
				return this.GetTable<ViewCommitOut>();
			}
		}
		
		public System.Data.Linq.Table<WaitForTest> WaitForTest
		{
			get
			{
				return this.GetTable<WaitForTest>();
			}
		}
		
		public System.Data.Linq.Table<WriteOffDetails> WriteOffDetails
		{
			get
			{
				return this.GetTable<WriteOffDetails>();
			}
		}
		
		public System.Data.Linq.Table<FlowDetails> FlowDetails
		{
			get
			{
				return this.GetTable<FlowDetails>();
			}
		}
	}
	
	[Table(Name="dbo.AwaitScrap")]
	public partial class AwaitScrap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AwaitScrapID;
		
		private string _ScrapReportNum;
		
		private string _State;
		
		private int _MaterialID;
		
		private int _ManufactureID;
		
		private decimal _Gentaojian;
		
		private int _StorageID;
		
		private int _PileID;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _TransferID;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private string _TransferType;
		
		private EntitySet<Scrapped> _Scrapped;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<StorageInfo> _StorageInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAwaitScrapIDChanging(int value);
    partial void OnAwaitScrapIDChanged();
    partial void OnScrapReportNumChanging(string value);
    partial void OnScrapReportNumChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnGentaojianChanging(decimal value);
    partial void OnGentaojianChanged();
    partial void OnStorageIDChanging(int value);
    partial void OnStorageIDChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnTransferIDChanging(System.Nullable<int> value);
    partial void OnTransferIDChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTransferTypeChanging(string value);
    partial void OnTransferTypeChanged();
    #endregion
		
		public AwaitScrap()
		{
			this._Scrapped = new EntitySet<Scrapped>(new Action<Scrapped>(this.attach_Scrapped), new Action<Scrapped>(this.detach_Scrapped));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._StorageInfo = default(EntityRef<StorageInfo>);
			OnCreated();
		}
		
		[Column(Storage="_AwaitScrapID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AwaitScrapID
		{
			get
			{
				return this._AwaitScrapID;
			}
			set
			{
				if ((this._AwaitScrapID != value))
				{
					this.OnAwaitScrapIDChanging(value);
					this.SendPropertyChanging();
					this._AwaitScrapID = value;
					this.SendPropertyChanged("AwaitScrapID");
					this.OnAwaitScrapIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScrapReportNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ScrapReportNum
		{
			get
			{
				return this._ScrapReportNum;
			}
			set
			{
				if ((this._ScrapReportNum != value))
				{
					this.OnScrapReportNumChanging(value);
					this.SendPropertyChanging();
					this._ScrapReportNum = value;
					this.SendPropertyChanged("ScrapReportNum");
					this.OnScrapReportNumChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					if (this._StorageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransferID", DbType="Int")]
		public System.Nullable<int> TransferID
		{
			get
			{
				return this._TransferID;
			}
			set
			{
				if ((this._TransferID != value))
				{
					this.OnTransferIDChanging(value);
					this.SendPropertyChanging();
					this._TransferID = value;
					this.SendPropertyChanged("TransferID");
					this.OnTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TransferType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TransferType
		{
			get
			{
				return this._TransferType;
			}
			set
			{
				if ((this._TransferType != value))
				{
					this.OnTransferTypeChanging(value);
					this.SendPropertyChanging();
					this._TransferType = value;
					this.SendPropertyChanged("TransferType");
					this.OnTransferTypeChanged();
				}
			}
		}
		
		[Association(Name="AwaitScrap_Scrapped", Storage="_Scrapped", ThisKey="AwaitScrapID", OtherKey="AwaitScrapID")]
		public EntitySet<Scrapped> Scrapped
		{
			get
			{
				return this._Scrapped;
			}
			set
			{
				this._Scrapped.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_AwaitScrap", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.AwaitScrap.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.AwaitScrap.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_AwaitScrap", Storage="_Manufacturer", ThisKey="ManufactureID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.AwaitScrap.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.AwaitScrap.Add(this);
						this._ManufactureID = value.ManufacturerID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="MaterialInfo_AwaitScrap", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.AwaitScrap.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.AwaitScrap.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_AwaitScrap", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.AwaitScrap.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.AwaitScrap.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_AwaitScrap", Storage="_ProjectInfo", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.AwaitScrap.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.AwaitScrap.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="StorageInfo_AwaitScrap", Storage="_StorageInfo", ThisKey="StorageID", OtherKey="StorageID", IsForeignKey=true)]
		public StorageInfo StorageInfo
		{
			get
			{
				return this._StorageInfo.Entity;
			}
			set
			{
				StorageInfo previousValue = this._StorageInfo.Entity;
				if (((previousValue != value) 
							|| (this._StorageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInfo.Entity = null;
						previousValue.AwaitScrap.Remove(this);
					}
					this._StorageInfo.Entity = value;
					if ((value != null))
					{
						value.AwaitScrap.Add(this);
						this._StorageID = value.StorageID;
					}
					else
					{
						this._StorageID = default(int);
					}
					this.SendPropertyChanged("StorageInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scrapped(Scrapped entity)
		{
			this.SendPropertyChanging();
			entity.AwaitScrap = this;
		}
		
		private void detach_Scrapped(Scrapped entity)
		{
			this.SendPropertyChanging();
			entity.AwaitScrap = null;
		}
	}
	
	[Table(Name="dbo.WarningList")]
	public partial class WarningList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WarningID;
		
		private int _MaterialID;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWarningIDChanging(int value);
    partial void OnWarningIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    #endregion
		
		public WarningList()
		{
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			OnCreated();
		}
		
		[Column(Storage="_WarningID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WarningID
		{
			get
			{
				return this._WarningID;
			}
			set
			{
				if ((this._WarningID != value))
				{
					this.OnWarningIDChanging(value);
					this.SendPropertyChanging();
					this._WarningID = value;
					this.SendPropertyChanged("WarningID");
					this.OnWarningIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Association(Name="MaterialInfo_WarningList", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.WarningList.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.WarningList.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BatchOfIndex")]
	public partial class BatchOfIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BatchOfIndexID;
		
		private string _BatchOfIndexName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBatchOfIndexIDChanging(int value);
    partial void OnBatchOfIndexIDChanged();
    partial void OnBatchOfIndexNameChanging(string value);
    partial void OnBatchOfIndexNameChanged();
    #endregion
		
		public BatchOfIndex()
		{
			OnCreated();
		}
		
		[Column(Storage="_BatchOfIndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BatchOfIndexID
		{
			get
			{
				return this._BatchOfIndexID;
			}
			set
			{
				if ((this._BatchOfIndexID != value))
				{
					this.OnBatchOfIndexIDChanging(value);
					this.SendPropertyChanging();
					this._BatchOfIndexID = value;
					this.SendPropertyChanged("BatchOfIndexID");
					this.OnBatchOfIndexIDChanged();
				}
			}
		}
		
		[Column(Storage="_BatchOfIndexName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BatchOfIndexName
		{
			get
			{
				return this._BatchOfIndexName;
			}
			set
			{
				if ((this._BatchOfIndexName != value))
				{
					this.OnBatchOfIndexNameChanging(value);
					this.SendPropertyChanging();
					this._BatchOfIndexName = value;
					this.SendPropertyChanged("BatchOfIndexName");
					this.OnBatchOfIndexNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BusinessUnitInfo")]
	public partial class BusinessUnitInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private string _BusinessUnitCode;
		
		private int _BusinessUnitTypeID;
		
		private string _BusinessUnitAddress1;
		
		private string _BusinessUnitAddress2;
		
		private string _BusinessUnitPhone;
		
		private string _InCharger;
		
		private string _Remark;
		
		private EntitySet<ProjectInfo> _ProjectInfo;
		
		private EntitySet<RelationProjectBusiness> _RelationProjectBusiness;
		
		private EntitySet<StorageCommitOutNotice> _StorageCommitOutNotice;
		
		private EntitySet<StorageOutNotice> _StorageOutNotice;
		
		private EntitySet<StorageOutNotice> _StorageOutNotice1;
		
		private EntityRef<BusinessUnitType> _BusinessUnitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessUnitIDChanging(int value);
    partial void OnBusinessUnitIDChanged();
    partial void OnBusinessUnitNameChanging(string value);
    partial void OnBusinessUnitNameChanged();
    partial void OnBusinessUnitCodeChanging(string value);
    partial void OnBusinessUnitCodeChanged();
    partial void OnBusinessUnitTypeIDChanging(int value);
    partial void OnBusinessUnitTypeIDChanged();
    partial void OnBusinessUnitAddress1Changing(string value);
    partial void OnBusinessUnitAddress1Changed();
    partial void OnBusinessUnitAddress2Changing(string value);
    partial void OnBusinessUnitAddress2Changed();
    partial void OnBusinessUnitPhoneChanging(string value);
    partial void OnBusinessUnitPhoneChanged();
    partial void OnInChargerChanging(string value);
    partial void OnInChargerChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public BusinessUnitInfo()
		{
			this._ProjectInfo = new EntitySet<ProjectInfo>(new Action<ProjectInfo>(this.attach_ProjectInfo), new Action<ProjectInfo>(this.detach_ProjectInfo));
			this._RelationProjectBusiness = new EntitySet<RelationProjectBusiness>(new Action<RelationProjectBusiness>(this.attach_RelationProjectBusiness), new Action<RelationProjectBusiness>(this.detach_RelationProjectBusiness));
			this._StorageCommitOutNotice = new EntitySet<StorageCommitOutNotice>(new Action<StorageCommitOutNotice>(this.attach_StorageCommitOutNotice), new Action<StorageCommitOutNotice>(this.detach_StorageCommitOutNotice));
			this._StorageOutNotice = new EntitySet<StorageOutNotice>(new Action<StorageOutNotice>(this.attach_StorageOutNotice), new Action<StorageOutNotice>(this.detach_StorageOutNotice));
			this._StorageOutNotice1 = new EntitySet<StorageOutNotice>(new Action<StorageOutNotice>(this.attach_StorageOutNotice1), new Action<StorageOutNotice>(this.detach_StorageOutNotice1));
			this._BusinessUnitType = default(EntityRef<BusinessUnitType>);
			OnCreated();
		}
		
		[Column(Storage="_BusinessUnitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this.OnBusinessUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitID = value;
					this.SendPropertyChanged("BusinessUnitID");
					this.OnBusinessUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this.OnBusinessUnitNameChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitName = value;
					this.SendPropertyChanged("BusinessUnitName");
					this.OnBusinessUnitNameChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitCode
		{
			get
			{
				return this._BusinessUnitCode;
			}
			set
			{
				if ((this._BusinessUnitCode != value))
				{
					this.OnBusinessUnitCodeChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitCode = value;
					this.SendPropertyChanged("BusinessUnitCode");
					this.OnBusinessUnitCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitTypeID", DbType="Int NOT NULL")]
		public int BusinessUnitTypeID
		{
			get
			{
				return this._BusinessUnitTypeID;
			}
			set
			{
				if ((this._BusinessUnitTypeID != value))
				{
					if (this._BusinessUnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitTypeID = value;
					this.SendPropertyChanged("BusinessUnitTypeID");
					this.OnBusinessUnitTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitAddress1", DbType="NVarChar(200)")]
		public string BusinessUnitAddress1
		{
			get
			{
				return this._BusinessUnitAddress1;
			}
			set
			{
				if ((this._BusinessUnitAddress1 != value))
				{
					this.OnBusinessUnitAddress1Changing(value);
					this.SendPropertyChanging();
					this._BusinessUnitAddress1 = value;
					this.SendPropertyChanged("BusinessUnitAddress1");
					this.OnBusinessUnitAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitAddress2", DbType="NVarChar(200)")]
		public string BusinessUnitAddress2
		{
			get
			{
				return this._BusinessUnitAddress2;
			}
			set
			{
				if ((this._BusinessUnitAddress2 != value))
				{
					this.OnBusinessUnitAddress2Changing(value);
					this.SendPropertyChanging();
					this._BusinessUnitAddress2 = value;
					this.SendPropertyChanged("BusinessUnitAddress2");
					this.OnBusinessUnitAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitPhone", DbType="NVarChar(50)")]
		public string BusinessUnitPhone
		{
			get
			{
				return this._BusinessUnitPhone;
			}
			set
			{
				if ((this._BusinessUnitPhone != value))
				{
					this.OnBusinessUnitPhoneChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitPhone = value;
					this.SendPropertyChanged("BusinessUnitPhone");
					this.OnBusinessUnitPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_InCharger", DbType="NVarChar(50)")]
		public string InCharger
		{
			get
			{
				return this._InCharger;
			}
			set
			{
				if ((this._InCharger != value))
				{
					this.OnInChargerChanging(value);
					this.SendPropertyChanging();
					this._InCharger = value;
					this.SendPropertyChanged("InCharger");
					this.OnInChargerChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="BusinessUnitInfo_ProjectInfo", Storage="_ProjectInfo", ThisKey="BusinessUnitID", OtherKey="Owner")]
		public EntitySet<ProjectInfo> ProjectInfo
		{
			get
			{
				return this._ProjectInfo;
			}
			set
			{
				this._ProjectInfo.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitInfo_RelationProjectBusiness", Storage="_RelationProjectBusiness", ThisKey="BusinessUnitID", OtherKey="BusinessUnitID")]
		public EntitySet<RelationProjectBusiness> RelationProjectBusiness
		{
			get
			{
				return this._RelationProjectBusiness;
			}
			set
			{
				this._RelationProjectBusiness.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitInfo_StorageCommitOutNotice", Storage="_StorageCommitOutNotice", ThisKey="BusinessUnitID", OtherKey="Receiver")]
		public EntitySet<StorageCommitOutNotice> StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice;
			}
			set
			{
				this._StorageCommitOutNotice.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitInfo_StorageOutNotice", Storage="_StorageOutNotice", ThisKey="BusinessUnitID", OtherKey="Constructor")]
		public EntitySet<StorageOutNotice> StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice;
			}
			set
			{
				this._StorageOutNotice.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitInfo_StorageOutNotice1", Storage="_StorageOutNotice1", ThisKey="BusinessUnitID", OtherKey="Proprietor")]
		public EntitySet<StorageOutNotice> StorageOutNotice1
		{
			get
			{
				return this._StorageOutNotice1;
			}
			set
			{
				this._StorageOutNotice1.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitType_BusinessUnitInfo", Storage="_BusinessUnitType", ThisKey="BusinessUnitTypeID", OtherKey="BusinessUnitTypeID", IsForeignKey=true)]
		public BusinessUnitType BusinessUnitType
		{
			get
			{
				return this._BusinessUnitType.Entity;
			}
			set
			{
				BusinessUnitType previousValue = this._BusinessUnitType.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnitType.Entity = null;
						previousValue.BusinessUnitInfo.Remove(this);
					}
					this._BusinessUnitType.Entity = value;
					if ((value != null))
					{
						value.BusinessUnitInfo.Add(this);
						this._BusinessUnitTypeID = value.BusinessUnitTypeID;
					}
					else
					{
						this._BusinessUnitTypeID = default(int);
					}
					this.SendPropertyChanged("BusinessUnitType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectInfo(ProjectInfo entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = this;
		}
		
		private void detach_ProjectInfo(ProjectInfo entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = null;
		}
		
		private void attach_RelationProjectBusiness(RelationProjectBusiness entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = this;
		}
		
		private void detach_RelationProjectBusiness(RelationProjectBusiness entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = null;
		}
		
		private void attach_StorageCommitOutNotice(StorageCommitOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = this;
		}
		
		private void detach_StorageCommitOutNotice(StorageCommitOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = null;
		}
		
		private void attach_StorageOutNotice(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = this;
		}
		
		private void detach_StorageOutNotice(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo = null;
		}
		
		private void attach_StorageOutNotice1(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo1 = this;
		}
		
		private void detach_StorageOutNotice1(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitInfo1 = null;
		}
	}
	
	[Table(Name="dbo.BusinessUnitType")]
	public partial class BusinessUnitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessUnitTypeID;
		
		private string _BusinessUnitTypeName;
		
		private string _BusinessUnitTypeCode;
		
		private string _Remark;
		
		private EntitySet<BusinessUnitInfo> _BusinessUnitInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessUnitTypeIDChanging(int value);
    partial void OnBusinessUnitTypeIDChanged();
    partial void OnBusinessUnitTypeNameChanging(string value);
    partial void OnBusinessUnitTypeNameChanged();
    partial void OnBusinessUnitTypeCodeChanging(string value);
    partial void OnBusinessUnitTypeCodeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public BusinessUnitType()
		{
			this._BusinessUnitInfo = new EntitySet<BusinessUnitInfo>(new Action<BusinessUnitInfo>(this.attach_BusinessUnitInfo), new Action<BusinessUnitInfo>(this.detach_BusinessUnitInfo));
			OnCreated();
		}
		
		[Column(Storage="_BusinessUnitTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessUnitTypeID
		{
			get
			{
				return this._BusinessUnitTypeID;
			}
			set
			{
				if ((this._BusinessUnitTypeID != value))
				{
					this.OnBusinessUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitTypeID = value;
					this.SendPropertyChanged("BusinessUnitTypeID");
					this.OnBusinessUnitTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitTypeName
		{
			get
			{
				return this._BusinessUnitTypeName;
			}
			set
			{
				if ((this._BusinessUnitTypeName != value))
				{
					this.OnBusinessUnitTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitTypeName = value;
					this.SendPropertyChanged("BusinessUnitTypeName");
					this.OnBusinessUnitTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitTypeCode
		{
			get
			{
				return this._BusinessUnitTypeCode;
			}
			set
			{
				if ((this._BusinessUnitTypeCode != value))
				{
					this.OnBusinessUnitTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitTypeCode = value;
					this.SendPropertyChanged("BusinessUnitTypeCode");
					this.OnBusinessUnitTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="BusinessUnitType_BusinessUnitInfo", Storage="_BusinessUnitInfo", ThisKey="BusinessUnitTypeID", OtherKey="BusinessUnitTypeID")]
		public EntitySet<BusinessUnitInfo> BusinessUnitInfo
		{
			get
			{
				return this._BusinessUnitInfo;
			}
			set
			{
				this._BusinessUnitInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessUnitInfo(BusinessUnitInfo entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitType = this;
		}
		
		private void detach_BusinessUnitInfo(BusinessUnitInfo entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnitType = null;
		}
	}
	
	[Table(Name="dbo.CommitDirector")]
	public partial class CommitDirector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInDirectorID;
		
		private int _HeadID;
		
		private string _Approve;
		
		private string _ApproveIdea;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntityRef<CommitInHead> _CommitInHead;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInDirectorIDChanging(int value);
    partial void OnStorageInDirectorIDChanged();
    partial void OnHeadIDChanging(int value);
    partial void OnHeadIDChanged();
    partial void OnApproveChanging(string value);
    partial void OnApproveChanged();
    partial void OnApproveIdeaChanging(string value);
    partial void OnApproveIdeaChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitDirector()
		{
			this._CommitInHead = default(EntityRef<CommitInHead>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInDirectorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInDirectorID
		{
			get
			{
				return this._StorageInDirectorID;
			}
			set
			{
				if ((this._StorageInDirectorID != value))
				{
					this.OnStorageInDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInDirectorID = value;
					this.SendPropertyChanged("StorageInDirectorID");
					this.OnStorageInDirectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeadID", DbType="Int NOT NULL")]
		public int HeadID
		{
			get
			{
				return this._HeadID;
			}
			set
			{
				if ((this._HeadID != value))
				{
					if (this._CommitInHead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadIDChanging(value);
					this.SendPropertyChanging();
					this._HeadID = value;
					this.SendPropertyChanged("HeadID");
					this.OnHeadIDChanged();
				}
			}
		}
		
		[Column(Storage="_Approve", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this.OnApproveChanging(value);
					this.SendPropertyChanging();
					this._Approve = value;
					this.SendPropertyChanged("Approve");
					this.OnApproveChanged();
				}
			}
		}
		
		[Column(Storage="_ApproveIdea", DbType="NVarChar(200)")]
		public string ApproveIdea
		{
			get
			{
				return this._ApproveIdea;
			}
			set
			{
				if ((this._ApproveIdea != value))
				{
					this.OnApproveIdeaChanging(value);
					this.SendPropertyChanging();
					this._ApproveIdea = value;
					this.SendPropertyChanged("ApproveIdea");
					this.OnApproveIdeaChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitInHead_CommitDirector", Storage="_CommitInHead", ThisKey="HeadID", OtherKey="StorageInHeadID", IsForeignKey=true)]
		public CommitInHead CommitInHead
		{
			get
			{
				return this._CommitInHead.Entity;
			}
			set
			{
				CommitInHead previousValue = this._CommitInHead.Entity;
				if (((previousValue != value) 
							|| (this._CommitInHead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitInHead.Entity = null;
						previousValue.CommitDirector.Remove(this);
					}
					this._CommitInHead.Entity = value;
					if ((value != null))
					{
						value.CommitDirector.Add(this);
						this._HeadID = value.StorageInHeadID;
					}
					else
					{
						this._HeadID = default(int);
					}
					this.SendPropertyChanged("CommitInHead");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitDirector", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitDirector.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitDirector.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CommitIn")]
	public partial class CommitIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitInID;
		
		private string _CommitInCode;
		
		private System.Nullable<int> _ReceivingType;
		
		private string _Remark;
		
		private string _CommitInQualifiedNum;
		
		private System.DateTime _CreateTime;
		
		private EntitySet<CommitInAudited> _CommitInAudited;
		
		private EntitySet<CommitInDetailed> _CommitInDetailed;
		
		private EntitySet<CommitInQualified> _CommitInQualified;
		
		private EntityRef<ReceivingTypeInfo> _ReceivingTypeInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitInIDChanging(int value);
    partial void OnCommitInIDChanged();
    partial void OnCommitInCodeChanging(string value);
    partial void OnCommitInCodeChanged();
    partial void OnReceivingTypeChanging(System.Nullable<int> value);
    partial void OnReceivingTypeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCommitInQualifiedNumChanging(string value);
    partial void OnCommitInQualifiedNumChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public CommitIn()
		{
			this._CommitInAudited = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited), new Action<CommitInAudited>(this.detach_CommitInAudited));
			this._CommitInDetailed = new EntitySet<CommitInDetailed>(new Action<CommitInDetailed>(this.attach_CommitInDetailed), new Action<CommitInDetailed>(this.detach_CommitInDetailed));
			this._CommitInQualified = new EntitySet<CommitInQualified>(new Action<CommitInQualified>(this.attach_CommitInQualified), new Action<CommitInQualified>(this.detach_CommitInQualified));
			this._ReceivingTypeInfo = default(EntityRef<ReceivingTypeInfo>);
			OnCreated();
		}
		
		[Column(Storage="_CommitInID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitInID
		{
			get
			{
				return this._CommitInID;
			}
			set
			{
				if ((this._CommitInID != value))
				{
					this.OnCommitInIDChanging(value);
					this.SendPropertyChanging();
					this._CommitInID = value;
					this.SendPropertyChanged("CommitInID");
					this.OnCommitInIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommitInCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CommitInCode
		{
			get
			{
				return this._CommitInCode;
			}
			set
			{
				if ((this._CommitInCode != value))
				{
					this.OnCommitInCodeChanging(value);
					this.SendPropertyChanging();
					this._CommitInCode = value;
					this.SendPropertyChanged("CommitInCode");
					this.OnCommitInCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingType", DbType="Int")]
		public System.Nullable<int> ReceivingType
		{
			get
			{
				return this._ReceivingType;
			}
			set
			{
				if ((this._ReceivingType != value))
				{
					if (this._ReceivingTypeInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceivingTypeChanging(value);
					this.SendPropertyChanging();
					this._ReceivingType = value;
					this.SendPropertyChanged("ReceivingType");
					this.OnReceivingTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CommitInQualifiedNum", DbType="NVarChar(50)")]
		public string CommitInQualifiedNum
		{
			get
			{
				return this._CommitInQualifiedNum;
			}
			set
			{
				if ((this._CommitInQualifiedNum != value))
				{
					this.OnCommitInQualifiedNumChanging(value);
					this.SendPropertyChanging();
					this._CommitInQualifiedNum = value;
					this.SendPropertyChanged("CommitInQualifiedNum");
					this.OnCommitInQualifiedNumChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="CommitIn_CommitInAudited", Storage="_CommitInAudited", ThisKey="CommitInID", OtherKey="CommitInID")]
		public EntitySet<CommitInAudited> CommitInAudited
		{
			get
			{
				return this._CommitInAudited;
			}
			set
			{
				this._CommitInAudited.Assign(value);
			}
		}
		
		[Association(Name="CommitIn_CommitInDetailed", Storage="_CommitInDetailed", ThisKey="CommitInID", OtherKey="CommitInID")]
		public EntitySet<CommitInDetailed> CommitInDetailed
		{
			get
			{
				return this._CommitInDetailed;
			}
			set
			{
				this._CommitInDetailed.Assign(value);
			}
		}
		
		[Association(Name="CommitIn_CommitInQualified", Storage="_CommitInQualified", ThisKey="CommitInID", OtherKey="CommitInID")]
		public EntitySet<CommitInQualified> CommitInQualified
		{
			get
			{
				return this._CommitInQualified;
			}
			set
			{
				this._CommitInQualified.Assign(value);
			}
		}
		
		[Association(Name="ReceivingTypeInfo_CommitIn", Storage="_ReceivingTypeInfo", ThisKey="ReceivingType", OtherKey="ReceivingTypeID", IsForeignKey=true)]
		public ReceivingTypeInfo ReceivingTypeInfo
		{
			get
			{
				return this._ReceivingTypeInfo.Entity;
			}
			set
			{
				ReceivingTypeInfo previousValue = this._ReceivingTypeInfo.Entity;
				if (((previousValue != value) 
							|| (this._ReceivingTypeInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReceivingTypeInfo.Entity = null;
						previousValue.CommitIn.Remove(this);
					}
					this._ReceivingTypeInfo.Entity = value;
					if ((value != null))
					{
						value.CommitIn.Add(this);
						this._ReceivingType = value.ReceivingTypeID;
					}
					else
					{
						this._ReceivingType = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReceivingTypeInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.CommitIn = this;
		}
		
		private void detach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.CommitIn = null;
		}
		
		private void attach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.CommitIn = this;
		}
		
		private void detach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.CommitIn = null;
		}
		
		private void attach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.CommitIn = this;
		}
		
		private void detach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.CommitIn = null;
		}
	}
	
	[Table(Name="dbo.CommitInAssets")]
	public partial class CommitInAssets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInAssetsID;
		
		private int _TestID;
		
		private string _BillCode;
		
		private string _financeCode;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private string _MaterialsAttribute;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<CommitInHead> _CommitInHead;
		
		private EntityRef<CommitInTest> _CommitInTest;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInAssetsIDChanging(int value);
    partial void OnStorageInAssetsIDChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnBillCodeChanging(string value);
    partial void OnBillCodeChanged();
    partial void OnfinanceCodeChanging(string value);
    partial void OnfinanceCodeChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnMaterialsAttributeChanging(string value);
    partial void OnMaterialsAttributeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInAssets()
		{
			this._CommitInHead = new EntitySet<CommitInHead>(new Action<CommitInHead>(this.attach_CommitInHead), new Action<CommitInHead>(this.detach_CommitInHead));
			this._CommitInTest = default(EntityRef<CommitInTest>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInAssetsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInAssetsID
		{
			get
			{
				return this._StorageInAssetsID;
			}
			set
			{
				if ((this._StorageInAssetsID != value))
				{
					this.OnStorageInAssetsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInAssetsID = value;
					this.SendPropertyChanged("StorageInAssetsID");
					this.OnStorageInAssetsIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._CommitInTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this.OnBillCodeChanging(value);
					this.SendPropertyChanging();
					this._BillCode = value;
					this.SendPropertyChanged("BillCode");
					this.OnBillCodeChanged();
				}
			}
		}
		
		[Column(Storage="_financeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string financeCode
		{
			get
			{
				return this._financeCode;
			}
			set
			{
				if ((this._financeCode != value))
				{
					this.OnfinanceCodeChanging(value);
					this.SendPropertyChanging();
					this._financeCode = value;
					this.SendPropertyChanged("financeCode");
					this.OnfinanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsAttribute", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialsAttribute
		{
			get
			{
				return this._MaterialsAttribute;
			}
			set
			{
				if ((this._MaterialsAttribute != value))
				{
					this.OnMaterialsAttributeChanging(value);
					this.SendPropertyChanging();
					this._MaterialsAttribute = value;
					this.SendPropertyChanged("MaterialsAttribute");
					this.OnMaterialsAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitInAssets_CommitInHead", Storage="_CommitInHead", ThisKey="StorageInAssetsID", OtherKey="AssetsID")]
		public EntitySet<CommitInHead> CommitInHead
		{
			get
			{
				return this._CommitInHead;
			}
			set
			{
				this._CommitInHead.Assign(value);
			}
		}
		
		[Association(Name="CommitInTest_CommitInAssets", Storage="_CommitInTest", ThisKey="TestID", OtherKey="StorageInTestID", IsForeignKey=true)]
		public CommitInTest CommitInTest
		{
			get
			{
				return this._CommitInTest.Entity;
			}
			set
			{
				CommitInTest previousValue = this._CommitInTest.Entity;
				if (((previousValue != value) 
							|| (this._CommitInTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitInTest.Entity = null;
						previousValue.CommitInAssets.Remove(this);
					}
					this._CommitInTest.Entity = value;
					if ((value != null))
					{
						value.CommitInAssets.Add(this);
						this._TestID = value.StorageInTestID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("CommitInTest");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInAssets", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInAssets.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInAssets.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInHead(CommitInHead entity)
		{
			this.SendPropertyChanging();
			entity.CommitInAssets = this;
		}
		
		private void detach_CommitInHead(CommitInHead entity)
		{
			this.SendPropertyChanging();
			entity.CommitInAssets = null;
		}
	}
	
	[Table(Name="dbo.CommitInAudited")]
	public partial class CommitInAudited : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitInAuditedID;
		
		private int _CommitInID;
		
		private int _MaterialID;
		
		private string _SpecificationModel;
		
		private decimal _Quantity;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _NumberQualified;
		
		private int _PileID;
		
		private string _InspectionReportNum;
		
		private System.DateTime _InspectionTime;
		
		private string _financeCode;
		
		private System.DateTime _StorageTime;
		
		private int _SupplierID;
		
		private int _MaterialsManager;
		
		private int _WarehouseWorker;
		
		private int _MaterialAccounting;
		
		private System.Nullable<int> _Director;
		
		private string _AuditStatus;
		
		private System.DateTime _AuditTime;
		
		private string _Remark;
		
		private EntityRef<CommitIn> _CommitIn;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
		private EntityRef<EmpInfo> _EmpInfo2;
		
		private EntityRef<EmpInfo> _EmpInfo3;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitInAuditedIDChanging(int value);
    partial void OnCommitInAuditedIDChanged();
    partial void OnCommitInIDChanging(int value);
    partial void OnCommitInIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnSpecificationModelChanging(string value);
    partial void OnSpecificationModelChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnNumberQualifiedChanging(System.Nullable<decimal> value);
    partial void OnNumberQualifiedChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnInspectionReportNumChanging(string value);
    partial void OnInspectionReportNumChanged();
    partial void OnInspectionTimeChanging(System.DateTime value);
    partial void OnInspectionTimeChanged();
    partial void OnfinanceCodeChanging(string value);
    partial void OnfinanceCodeChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnMaterialsManagerChanging(int value);
    partial void OnMaterialsManagerChanged();
    partial void OnWarehouseWorkerChanging(int value);
    partial void OnWarehouseWorkerChanged();
    partial void OnMaterialAccountingChanging(int value);
    partial void OnMaterialAccountingChanged();
    partial void OnDirectorChanging(System.Nullable<int> value);
    partial void OnDirectorChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnAuditTimeChanging(System.DateTime value);
    partial void OnAuditTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInAudited()
		{
			this._CommitIn = default(EntityRef<CommitIn>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			this._EmpInfo2 = default(EntityRef<EmpInfo>);
			this._EmpInfo3 = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_CommitInAuditedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitInAuditedID
		{
			get
			{
				return this._CommitInAuditedID;
			}
			set
			{
				if ((this._CommitInAuditedID != value))
				{
					this.OnCommitInAuditedIDChanging(value);
					this.SendPropertyChanging();
					this._CommitInAuditedID = value;
					this.SendPropertyChanged("CommitInAuditedID");
					this.OnCommitInAuditedIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommitInID", DbType="Int NOT NULL")]
		public int CommitInID
		{
			get
			{
				return this._CommitInID;
			}
			set
			{
				if ((this._CommitInID != value))
				{
					if (this._CommitIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitInIDChanging(value);
					this.SendPropertyChanging();
					this._CommitInID = value;
					this.SendPropertyChanged("CommitInID");
					this.OnCommitInIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this.OnSpecificationModelChanging(value);
					this.SendPropertyChanging();
					this._SpecificationModel = value;
					this.SendPropertyChanged("SpecificationModel");
					this.OnSpecificationModelChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_NumberQualified", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> NumberQualified
		{
			get
			{
				return this._NumberQualified;
			}
			set
			{
				if ((this._NumberQualified != value))
				{
					this.OnNumberQualifiedChanging(value);
					this.SendPropertyChanging();
					this._NumberQualified = value;
					this.SendPropertyChanged("NumberQualified");
					this.OnNumberQualifiedChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_InspectionReportNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InspectionReportNum
		{
			get
			{
				return this._InspectionReportNum;
			}
			set
			{
				if ((this._InspectionReportNum != value))
				{
					this.OnInspectionReportNumChanging(value);
					this.SendPropertyChanging();
					this._InspectionReportNum = value;
					this.SendPropertyChanged("InspectionReportNum");
					this.OnInspectionReportNumChanged();
				}
			}
		}
		
		[Column(Storage="_InspectionTime", DbType="DateTime NOT NULL")]
		public System.DateTime InspectionTime
		{
			get
			{
				return this._InspectionTime;
			}
			set
			{
				if ((this._InspectionTime != value))
				{
					this.OnInspectionTimeChanging(value);
					this.SendPropertyChanging();
					this._InspectionTime = value;
					this.SendPropertyChanged("InspectionTime");
					this.OnInspectionTimeChanged();
				}
			}
		}
		
		[Column(Storage="_financeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string financeCode
		{
			get
			{
				return this._financeCode;
			}
			set
			{
				if ((this._financeCode != value))
				{
					this.OnfinanceCodeChanging(value);
					this.SendPropertyChanging();
					this._financeCode = value;
					this.SendPropertyChanged("financeCode");
					this.OnfinanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsManager", DbType="Int NOT NULL")]
		public int MaterialsManager
		{
			get
			{
				return this._MaterialsManager;
			}
			set
			{
				if ((this._MaterialsManager != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsManagerChanging(value);
					this.SendPropertyChanging();
					this._MaterialsManager = value;
					this.SendPropertyChanged("MaterialsManager");
					this.OnMaterialsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseWorker", DbType="Int NOT NULL")]
		public int WarehouseWorker
		{
			get
			{
				return this._WarehouseWorker;
			}
			set
			{
				if ((this._WarehouseWorker != value))
				{
					if (this._EmpInfo3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseWorkerChanging(value);
					this.SendPropertyChanging();
					this._WarehouseWorker = value;
					this.SendPropertyChanged("WarehouseWorker");
					this.OnWarehouseWorkerChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialAccounting", DbType="Int NOT NULL")]
		public int MaterialAccounting
		{
			get
			{
				return this._MaterialAccounting;
			}
			set
			{
				if ((this._MaterialAccounting != value))
				{
					if (this._EmpInfo2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialAccountingChanging(value);
					this.SendPropertyChanging();
					this._MaterialAccounting = value;
					this.SendPropertyChanged("MaterialAccounting");
					this.OnMaterialAccountingChanged();
				}
			}
		}
		
		[Column(Storage="_Director", DbType="Int")]
		public System.Nullable<int> Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTime", DbType="DateTime NOT NULL")]
		public System.DateTime AuditTime
		{
			get
			{
				return this._AuditTime;
			}
			set
			{
				if ((this._AuditTime != value))
				{
					this.OnAuditTimeChanging(value);
					this.SendPropertyChanging();
					this._AuditTime = value;
					this.SendPropertyChanged("AuditTime");
					this.OnAuditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitIn_CommitInAudited", Storage="_CommitIn", ThisKey="CommitInID", OtherKey="CommitInID", IsForeignKey=true)]
		public CommitIn CommitIn
		{
			get
			{
				return this._CommitIn.Entity;
			}
			set
			{
				CommitIn previousValue = this._CommitIn.Entity;
				if (((previousValue != value) 
							|| (this._CommitIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitIn.Entity = null;
						previousValue.CommitInAudited.Remove(this);
					}
					this._CommitIn.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited.Add(this);
						this._CommitInID = value.CommitInID;
					}
					else
					{
						this._CommitInID = default(int);
					}
					this.SendPropertyChanged("CommitIn");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited", Storage="_EmpInfo", ThisKey="Director", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInAudited.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited.Add(this);
						this._Director = value.EmpID;
					}
					else
					{
						this._Director = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited1", Storage="_EmpInfo1", ThisKey="MaterialsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.CommitInAudited1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited1.Add(this);
						this._MaterialsManager = value.EmpID;
					}
					else
					{
						this._MaterialsManager = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited2", Storage="_EmpInfo2", ThisKey="MaterialAccounting", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo2
		{
			get
			{
				return this._EmpInfo2.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo2.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo2.Entity = null;
						previousValue.CommitInAudited2.Remove(this);
					}
					this._EmpInfo2.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited2.Add(this);
						this._MaterialAccounting = value.EmpID;
					}
					else
					{
						this._MaterialAccounting = default(int);
					}
					this.SendPropertyChanged("EmpInfo2");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited3", Storage="_EmpInfo3", ThisKey="WarehouseWorker", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo3
		{
			get
			{
				return this._EmpInfo3.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo3.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo3.Entity = null;
						previousValue.CommitInAudited3.Remove(this);
					}
					this._EmpInfo3.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited3.Add(this);
						this._WarehouseWorker = value.EmpID;
					}
					else
					{
						this._WarehouseWorker = default(int);
					}
					this.SendPropertyChanged("EmpInfo3");
				}
			}
		}
		
		[Association(Name="MaterialInfo_CommitInAudited", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.CommitInAudited.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_CommitInAudited", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.CommitInAudited.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="SupplierInfo_CommitInAudited", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.CommitInAudited.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInAudited.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CommitInDetailed")]
	public partial class CommitInDetailed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitDetailedID;
		
		private int _CommitInID;
		
		private int _MaterialID;
		
		private string _SpecificationModel;
		
		private decimal _Quantity;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _NumberQualified;
		
		private int _PileID;
		
		private string _financeCode;
		
		private System.DateTime _StorageTime;
		
		private int _SupplierID;
		
		private int _MaterialsManager;
		
		private int _WarehouseWorker;
		
		private string _Remark;
		
		private EntityRef<CommitIn> _CommitIn;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitDetailedIDChanging(int value);
    partial void OnCommitDetailedIDChanged();
    partial void OnCommitInIDChanging(int value);
    partial void OnCommitInIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnSpecificationModelChanging(string value);
    partial void OnSpecificationModelChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnNumberQualifiedChanging(System.Nullable<decimal> value);
    partial void OnNumberQualifiedChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnfinanceCodeChanging(string value);
    partial void OnfinanceCodeChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnMaterialsManagerChanging(int value);
    partial void OnMaterialsManagerChanged();
    partial void OnWarehouseWorkerChanging(int value);
    partial void OnWarehouseWorkerChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInDetailed()
		{
			this._CommitIn = default(EntityRef<CommitIn>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_CommitDetailedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitDetailedID
		{
			get
			{
				return this._CommitDetailedID;
			}
			set
			{
				if ((this._CommitDetailedID != value))
				{
					this.OnCommitDetailedIDChanging(value);
					this.SendPropertyChanging();
					this._CommitDetailedID = value;
					this.SendPropertyChanged("CommitDetailedID");
					this.OnCommitDetailedIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommitInID", DbType="Int NOT NULL")]
		public int CommitInID
		{
			get
			{
				return this._CommitInID;
			}
			set
			{
				if ((this._CommitInID != value))
				{
					if (this._CommitIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitInIDChanging(value);
					this.SendPropertyChanging();
					this._CommitInID = value;
					this.SendPropertyChanged("CommitInID");
					this.OnCommitInIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this.OnSpecificationModelChanging(value);
					this.SendPropertyChanging();
					this._SpecificationModel = value;
					this.SendPropertyChanged("SpecificationModel");
					this.OnSpecificationModelChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_NumberQualified", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> NumberQualified
		{
			get
			{
				return this._NumberQualified;
			}
			set
			{
				if ((this._NumberQualified != value))
				{
					this.OnNumberQualifiedChanging(value);
					this.SendPropertyChanging();
					this._NumberQualified = value;
					this.SendPropertyChanged("NumberQualified");
					this.OnNumberQualifiedChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_financeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string financeCode
		{
			get
			{
				return this._financeCode;
			}
			set
			{
				if ((this._financeCode != value))
				{
					this.OnfinanceCodeChanging(value);
					this.SendPropertyChanging();
					this._financeCode = value;
					this.SendPropertyChanged("financeCode");
					this.OnfinanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsManager", DbType="Int NOT NULL")]
		public int MaterialsManager
		{
			get
			{
				return this._MaterialsManager;
			}
			set
			{
				if ((this._MaterialsManager != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsManagerChanging(value);
					this.SendPropertyChanging();
					this._MaterialsManager = value;
					this.SendPropertyChanged("MaterialsManager");
					this.OnMaterialsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseWorker", DbType="Int NOT NULL")]
		public int WarehouseWorker
		{
			get
			{
				return this._WarehouseWorker;
			}
			set
			{
				if ((this._WarehouseWorker != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseWorkerChanging(value);
					this.SendPropertyChanging();
					this._WarehouseWorker = value;
					this.SendPropertyChanged("WarehouseWorker");
					this.OnWarehouseWorkerChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitIn_CommitInDetailed", Storage="_CommitIn", ThisKey="CommitInID", OtherKey="CommitInID", IsForeignKey=true)]
		public CommitIn CommitIn
		{
			get
			{
				return this._CommitIn.Entity;
			}
			set
			{
				CommitIn previousValue = this._CommitIn.Entity;
				if (((previousValue != value) 
							|| (this._CommitIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitIn.Entity = null;
						previousValue.CommitInDetailed.Remove(this);
					}
					this._CommitIn.Entity = value;
					if ((value != null))
					{
						value.CommitInDetailed.Add(this);
						this._CommitInID = value.CommitInID;
					}
					else
					{
						this._CommitInID = default(int);
					}
					this.SendPropertyChanged("CommitIn");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInDetailed", Storage="_EmpInfo", ThisKey="MaterialsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInDetailed.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInDetailed.Add(this);
						this._MaterialsManager = value.EmpID;
					}
					else
					{
						this._MaterialsManager = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInDetailed1", Storage="_EmpInfo1", ThisKey="WarehouseWorker", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.CommitInDetailed1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.CommitInDetailed1.Add(this);
						this._WarehouseWorker = value.EmpID;
					}
					else
					{
						this._WarehouseWorker = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		[Association(Name="MaterialInfo_CommitInDetailed", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.CommitInDetailed.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInDetailed.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_CommitInDetailed", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.CommitInDetailed.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInDetailed.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="SupplierInfo_CommitInDetailed", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.CommitInDetailed.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInDetailed.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CommitInHead")]
	public partial class CommitInHead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInHeadID;
		
		private int _AssetsID;
		
		private string _Auditing;
		
		private string _Auditingidea;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<CommitDirector> _CommitDirector;
		
		private EntityRef<CommitInAssets> _CommitInAssets;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInHeadIDChanging(int value);
    partial void OnStorageInHeadIDChanged();
    partial void OnAssetsIDChanging(int value);
    partial void OnAssetsIDChanged();
    partial void OnAuditingChanging(string value);
    partial void OnAuditingChanged();
    partial void OnAuditingideaChanging(string value);
    partial void OnAuditingideaChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInHead()
		{
			this._CommitDirector = new EntitySet<CommitDirector>(new Action<CommitDirector>(this.attach_CommitDirector), new Action<CommitDirector>(this.detach_CommitDirector));
			this._CommitInAssets = default(EntityRef<CommitInAssets>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInHeadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInHeadID
		{
			get
			{
				return this._StorageInHeadID;
			}
			set
			{
				if ((this._StorageInHeadID != value))
				{
					this.OnStorageInHeadIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInHeadID = value;
					this.SendPropertyChanged("StorageInHeadID");
					this.OnStorageInHeadIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetsID", DbType="Int NOT NULL")]
		public int AssetsID
		{
			get
			{
				return this._AssetsID;
			}
			set
			{
				if ((this._AssetsID != value))
				{
					if (this._CommitInAssets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetsIDChanging(value);
					this.SendPropertyChanging();
					this._AssetsID = value;
					this.SendPropertyChanged("AssetsID");
					this.OnAssetsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditing", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Auditing
		{
			get
			{
				return this._Auditing;
			}
			set
			{
				if ((this._Auditing != value))
				{
					this.OnAuditingChanging(value);
					this.SendPropertyChanging();
					this._Auditing = value;
					this.SendPropertyChanged("Auditing");
					this.OnAuditingChanged();
				}
			}
		}
		
		[Column(Storage="_Auditingidea", DbType="NVarChar(200)")]
		public string Auditingidea
		{
			get
			{
				return this._Auditingidea;
			}
			set
			{
				if ((this._Auditingidea != value))
				{
					this.OnAuditingideaChanging(value);
					this.SendPropertyChanging();
					this._Auditingidea = value;
					this.SendPropertyChanged("Auditingidea");
					this.OnAuditingideaChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitInHead_CommitDirector", Storage="_CommitDirector", ThisKey="StorageInHeadID", OtherKey="HeadID")]
		public EntitySet<CommitDirector> CommitDirector
		{
			get
			{
				return this._CommitDirector;
			}
			set
			{
				this._CommitDirector.Assign(value);
			}
		}
		
		[Association(Name="CommitInAssets_CommitInHead", Storage="_CommitInAssets", ThisKey="AssetsID", OtherKey="StorageInAssetsID", IsForeignKey=true)]
		public CommitInAssets CommitInAssets
		{
			get
			{
				return this._CommitInAssets.Entity;
			}
			set
			{
				CommitInAssets previousValue = this._CommitInAssets.Entity;
				if (((previousValue != value) 
							|| (this._CommitInAssets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitInAssets.Entity = null;
						previousValue.CommitInHead.Remove(this);
					}
					this._CommitInAssets.Entity = value;
					if ((value != null))
					{
						value.CommitInHead.Add(this);
						this._AssetsID = value.StorageInAssetsID;
					}
					else
					{
						this._AssetsID = default(int);
					}
					this.SendPropertyChanged("CommitInAssets");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInHead", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInHead.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInHead.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitDirector(CommitDirector entity)
		{
			this.SendPropertyChanging();
			entity.CommitInHead = this;
		}
		
		private void detach_CommitDirector(CommitDirector entity)
		{
			this.SendPropertyChanging();
			entity.CommitInHead = null;
		}
	}
	
	[Table(Name="dbo.CommitInMain")]
	public partial class CommitInMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInID;
		
		private string _StorageInCode;
		
		private string _ReceivingType;
		
		private string _Remark;
		
		private string _StorageInQualifiedNum;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private EntitySet<CommitProduce> _CommitProduce;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInIDChanging(int value);
    partial void OnStorageInIDChanged();
    partial void OnStorageInCodeChanging(string value);
    partial void OnStorageInCodeChanged();
    partial void OnReceivingTypeChanging(string value);
    partial void OnReceivingTypeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnStorageInQualifiedNumChanging(string value);
    partial void OnStorageInQualifiedNumChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public CommitInMain()
		{
			this._CommitProduce = new EntitySet<CommitProduce>(new Action<CommitProduce>(this.attach_CommitProduce), new Action<CommitProduce>(this.detach_CommitProduce));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this.OnStorageInCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageInCode = value;
					this.SendPropertyChanged("StorageInCode");
					this.OnStorageInCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReceivingType
		{
			get
			{
				return this._ReceivingType;
			}
			set
			{
				if ((this._ReceivingType != value))
				{
					this.OnReceivingTypeChanging(value);
					this.SendPropertyChanging();
					this._ReceivingType = value;
					this.SendPropertyChanged("ReceivingType");
					this.OnReceivingTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInQualifiedNum", DbType="NVarChar(50)")]
		public string StorageInQualifiedNum
		{
			get
			{
				return this._StorageInQualifiedNum;
			}
			set
			{
				if ((this._StorageInQualifiedNum != value))
				{
					this.OnStorageInQualifiedNumChanging(value);
					this.SendPropertyChanging();
					this._StorageInQualifiedNum = value;
					this.SendPropertyChanged("StorageInQualifiedNum");
					this.OnStorageInQualifiedNumChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="CommitInMain_CommitProduce", Storage="_CommitProduce", ThisKey="StorageInID", OtherKey="StorageInID")]
		public EntitySet<CommitProduce> CommitProduce
		{
			get
			{
				return this._CommitProduce;
			}
			set
			{
				this._CommitProduce.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInMain", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInMain.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInMain.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.CommitInMain = this;
		}
		
		private void detach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.CommitInMain = null;
		}
	}
	
	[Table(Name="dbo.CommitInMaterials")]
	public partial class CommitInMaterials : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInMaterialsID;
		
		private int _ProduceID;
		
		private System.Nullable<decimal> _RealGentaojian;
		
		private System.Nullable<decimal> _RealMetre;
		
		private System.Nullable<decimal> _RealTon;
		
		private int _ManufacturerID;
		
		private string _IsManufacturer;
		
		private int _SupplierID;
		
		private string _Supplier;
		
		private string _Data;
		
		private string _Standard;
		
		private string _Parts;
		
		private string _Appearance;
		
		private int _PileID;
		
		private int _Creator;
		
		private System.DateTime _StorageTime;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<CommitInMaterialsLeader> _CommitInMaterialsLeader;
		
		private EntityRef<CommitProduce> _CommitProduce;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInMaterialsIDChanging(int value);
    partial void OnStorageInMaterialsIDChanged();
    partial void OnProduceIDChanging(int value);
    partial void OnProduceIDChanged();
    partial void OnRealGentaojianChanging(System.Nullable<decimal> value);
    partial void OnRealGentaojianChanged();
    partial void OnRealMetreChanging(System.Nullable<decimal> value);
    partial void OnRealMetreChanged();
    partial void OnRealTonChanging(System.Nullable<decimal> value);
    partial void OnRealTonChanged();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnIsManufacturerChanging(string value);
    partial void OnIsManufacturerChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierChanging(string value);
    partial void OnSupplierChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnStandardChanging(string value);
    partial void OnStandardChanged();
    partial void OnPartsChanging(string value);
    partial void OnPartsChanged();
    partial void OnAppearanceChanging(string value);
    partial void OnAppearanceChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInMaterials()
		{
			this._CommitInMaterialsLeader = new EntitySet<CommitInMaterialsLeader>(new Action<CommitInMaterialsLeader>(this.attach_CommitInMaterialsLeader), new Action<CommitInMaterialsLeader>(this.detach_CommitInMaterialsLeader));
			this._CommitProduce = default(EntityRef<CommitProduce>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInMaterialsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInMaterialsID
		{
			get
			{
				return this._StorageInMaterialsID;
			}
			set
			{
				if ((this._StorageInMaterialsID != value))
				{
					this.OnStorageInMaterialsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInMaterialsID = value;
					this.SendPropertyChanged("StorageInMaterialsID");
					this.OnStorageInMaterialsIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProduceID", DbType="Int NOT NULL")]
		public int ProduceID
		{
			get
			{
				return this._ProduceID;
			}
			set
			{
				if ((this._ProduceID != value))
				{
					if (this._CommitProduce.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduceIDChanging(value);
					this.SendPropertyChanging();
					this._ProduceID = value;
					this.SendPropertyChanged("ProduceID");
					this.OnProduceIDChanged();
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this.OnRealGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RealGentaojian = value;
					this.SendPropertyChanged("RealGentaojian");
					this.OnRealGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this.OnRealMetreChanging(value);
					this.SendPropertyChanging();
					this._RealMetre = value;
					this.SendPropertyChanged("RealMetre");
					this.OnRealMetreChanged();
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this.OnRealTonChanging(value);
					this.SendPropertyChanging();
					this._RealTon = value;
					this.SendPropertyChanged("RealTon");
					this.OnRealTonChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsManufacturer", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string IsManufacturer
		{
			get
			{
				return this._IsManufacturer;
			}
			set
			{
				if ((this._IsManufacturer != value))
				{
					this.OnIsManufacturerChanging(value);
					this.SendPropertyChanging();
					this._IsManufacturer = value;
					this.SendPropertyChanged("IsManufacturer");
					this.OnIsManufacturerChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Supplier
		{
			get
			{
				return this._Supplier;
			}
			set
			{
				if ((this._Supplier != value))
				{
					this.OnSupplierChanging(value);
					this.SendPropertyChanging();
					this._Supplier = value;
					this.SendPropertyChanged("Supplier");
					this.OnSupplierChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Standard", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Standard
		{
			get
			{
				return this._Standard;
			}
			set
			{
				if ((this._Standard != value))
				{
					this.OnStandardChanging(value);
					this.SendPropertyChanging();
					this._Standard = value;
					this.SendPropertyChanged("Standard");
					this.OnStandardChanged();
				}
			}
		}
		
		[Column(Storage="_Parts", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Parts
		{
			get
			{
				return this._Parts;
			}
			set
			{
				if ((this._Parts != value))
				{
					this.OnPartsChanging(value);
					this.SendPropertyChanging();
					this._Parts = value;
					this.SendPropertyChanged("Parts");
					this.OnPartsChanged();
				}
			}
		}
		
		[Column(Storage="_Appearance", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Appearance
		{
			get
			{
				return this._Appearance;
			}
			set
			{
				if ((this._Appearance != value))
				{
					this.OnAppearanceChanging(value);
					this.SendPropertyChanging();
					this._Appearance = value;
					this.SendPropertyChanged("Appearance");
					this.OnAppearanceChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitInMaterials_CommitInMaterialsLeader", Storage="_CommitInMaterialsLeader", ThisKey="StorageInMaterialsID", OtherKey="MaterialsID")]
		public EntitySet<CommitInMaterialsLeader> CommitInMaterialsLeader
		{
			get
			{
				return this._CommitInMaterialsLeader;
			}
			set
			{
				this._CommitInMaterialsLeader.Assign(value);
			}
		}
		
		[Association(Name="CommitProduce_CommitInMaterials", Storage="_CommitProduce", ThisKey="ProduceID", OtherKey="StorageInProduceID", IsForeignKey=true)]
		public CommitProduce CommitProduce
		{
			get
			{
				return this._CommitProduce.Entity;
			}
			set
			{
				CommitProduce previousValue = this._CommitProduce.Entity;
				if (((previousValue != value) 
							|| (this._CommitProduce.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitProduce.Entity = null;
						previousValue.CommitInMaterials.Remove(this);
					}
					this._CommitProduce.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterials.Add(this);
						this._ProduceID = value.StorageInProduceID;
					}
					else
					{
						this._ProduceID = default(int);
					}
					this.SendPropertyChanged("CommitProduce");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInMaterials", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInMaterials.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterials.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_CommitInMaterials", Storage="_Manufacturer", ThisKey="ManufacturerID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.CommitInMaterials.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterials.Add(this);
						this._ManufacturerID = value.ManufacturerID;
					}
					else
					{
						this._ManufacturerID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="PileInfo_CommitInMaterials", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.CommitInMaterials.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterials.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="SupplierInfo_CommitInMaterials", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.CommitInMaterials.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterials.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInMaterialsLeader(CommitInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.CommitInMaterials = this;
		}
		
		private void detach_CommitInMaterialsLeader(CommitInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.CommitInMaterials = null;
		}
	}
	
	[Table(Name="dbo.CommitInMaterialsLeader")]
	public partial class CommitInMaterialsLeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialsLeaderID;
		
		private int _MaterialsID;
		
		private string _Auditing;
		
		private string _Auditingidea;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<CommitInTest> _CommitInTest;
		
		private EntityRef<CommitInMaterials> _CommitInMaterials;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialsLeaderIDChanging(int value);
    partial void OnMaterialsLeaderIDChanged();
    partial void OnMaterialsIDChanging(int value);
    partial void OnMaterialsIDChanged();
    partial void OnAuditingChanging(string value);
    partial void OnAuditingChanged();
    partial void OnAuditingideaChanging(string value);
    partial void OnAuditingideaChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInMaterialsLeader()
		{
			this._CommitInTest = new EntitySet<CommitInTest>(new Action<CommitInTest>(this.attach_CommitInTest), new Action<CommitInTest>(this.detach_CommitInTest));
			this._CommitInMaterials = default(EntityRef<CommitInMaterials>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_MaterialsLeaderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialsLeaderID
		{
			get
			{
				return this._MaterialsLeaderID;
			}
			set
			{
				if ((this._MaterialsLeaderID != value))
				{
					this.OnMaterialsLeaderIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialsLeaderID = value;
					this.SendPropertyChanged("MaterialsLeaderID");
					this.OnMaterialsLeaderIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsID", DbType="Int NOT NULL")]
		public int MaterialsID
		{
			get
			{
				return this._MaterialsID;
			}
			set
			{
				if ((this._MaterialsID != value))
				{
					if (this._CommitInMaterials.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialsID = value;
					this.SendPropertyChanged("MaterialsID");
					this.OnMaterialsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditing", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Auditing
		{
			get
			{
				return this._Auditing;
			}
			set
			{
				if ((this._Auditing != value))
				{
					this.OnAuditingChanging(value);
					this.SendPropertyChanging();
					this._Auditing = value;
					this.SendPropertyChanged("Auditing");
					this.OnAuditingChanged();
				}
			}
		}
		
		[Column(Storage="_Auditingidea", DbType="NVarChar(200)")]
		public string Auditingidea
		{
			get
			{
				return this._Auditingidea;
			}
			set
			{
				if ((this._Auditingidea != value))
				{
					this.OnAuditingideaChanging(value);
					this.SendPropertyChanging();
					this._Auditingidea = value;
					this.SendPropertyChanged("Auditingidea");
					this.OnAuditingideaChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitInMaterialsLeader_CommitInTest", Storage="_CommitInTest", ThisKey="MaterialsLeaderID", OtherKey="MaterialsLeaderID")]
		public EntitySet<CommitInTest> CommitInTest
		{
			get
			{
				return this._CommitInTest;
			}
			set
			{
				this._CommitInTest.Assign(value);
			}
		}
		
		[Association(Name="CommitInMaterials_CommitInMaterialsLeader", Storage="_CommitInMaterials", ThisKey="MaterialsID", OtherKey="StorageInMaterialsID", IsForeignKey=true)]
		public CommitInMaterials CommitInMaterials
		{
			get
			{
				return this._CommitInMaterials.Entity;
			}
			set
			{
				CommitInMaterials previousValue = this._CommitInMaterials.Entity;
				if (((previousValue != value) 
							|| (this._CommitInMaterials.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitInMaterials.Entity = null;
						previousValue.CommitInMaterialsLeader.Remove(this);
					}
					this._CommitInMaterials.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterialsLeader.Add(this);
						this._MaterialsID = value.StorageInMaterialsID;
					}
					else
					{
						this._MaterialsID = default(int);
					}
					this.SendPropertyChanged("CommitInMaterials");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInMaterialsLeader", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInMaterialsLeader.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInMaterialsLeader.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInTest(CommitInTest entity)
		{
			this.SendPropertyChanging();
			entity.CommitInMaterialsLeader = this;
		}
		
		private void detach_CommitInTest(CommitInTest entity)
		{
			this.SendPropertyChanging();
			entity.CommitInMaterialsLeader = null;
		}
	}
	
	[Table(Name="dbo.CommitInQualified")]
	public partial class CommitInQualified : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitInQualifiedID;
		
		private int _CommitInID;
		
		private int _MaterialID;
		
		private string _SpecificationModel;
		
		private decimal _Quantity;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _NumberQualified;
		
		private int _PileID;
		
		private string _InspectionReportNum;
		
		private System.DateTime _InspectionTime;
		
		private string _financeCode;
		
		private System.DateTime _StorageTime;
		
		private int _SupplierID;
		
		private int _MaterialsManager;
		
		private int _WarehouseWorker;
		
		private string _Remark;
		
		private EntityRef<CommitIn> _CommitIn;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitInQualifiedIDChanging(int value);
    partial void OnCommitInQualifiedIDChanged();
    partial void OnCommitInIDChanging(int value);
    partial void OnCommitInIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnSpecificationModelChanging(string value);
    partial void OnSpecificationModelChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnNumberQualifiedChanging(System.Nullable<decimal> value);
    partial void OnNumberQualifiedChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnInspectionReportNumChanging(string value);
    partial void OnInspectionReportNumChanged();
    partial void OnInspectionTimeChanging(System.DateTime value);
    partial void OnInspectionTimeChanged();
    partial void OnfinanceCodeChanging(string value);
    partial void OnfinanceCodeChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnMaterialsManagerChanging(int value);
    partial void OnMaterialsManagerChanged();
    partial void OnWarehouseWorkerChanging(int value);
    partial void OnWarehouseWorkerChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInQualified()
		{
			this._CommitIn = default(EntityRef<CommitIn>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_CommitInQualifiedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitInQualifiedID
		{
			get
			{
				return this._CommitInQualifiedID;
			}
			set
			{
				if ((this._CommitInQualifiedID != value))
				{
					this.OnCommitInQualifiedIDChanging(value);
					this.SendPropertyChanging();
					this._CommitInQualifiedID = value;
					this.SendPropertyChanged("CommitInQualifiedID");
					this.OnCommitInQualifiedIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommitInID", DbType="Int NOT NULL")]
		public int CommitInID
		{
			get
			{
				return this._CommitInID;
			}
			set
			{
				if ((this._CommitInID != value))
				{
					if (this._CommitIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitInIDChanging(value);
					this.SendPropertyChanging();
					this._CommitInID = value;
					this.SendPropertyChanged("CommitInID");
					this.OnCommitInIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this.OnSpecificationModelChanging(value);
					this.SendPropertyChanging();
					this._SpecificationModel = value;
					this.SendPropertyChanged("SpecificationModel");
					this.OnSpecificationModelChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Decimal(18,2) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_NumberQualified", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> NumberQualified
		{
			get
			{
				return this._NumberQualified;
			}
			set
			{
				if ((this._NumberQualified != value))
				{
					this.OnNumberQualifiedChanging(value);
					this.SendPropertyChanging();
					this._NumberQualified = value;
					this.SendPropertyChanged("NumberQualified");
					this.OnNumberQualifiedChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_InspectionReportNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InspectionReportNum
		{
			get
			{
				return this._InspectionReportNum;
			}
			set
			{
				if ((this._InspectionReportNum != value))
				{
					this.OnInspectionReportNumChanging(value);
					this.SendPropertyChanging();
					this._InspectionReportNum = value;
					this.SendPropertyChanged("InspectionReportNum");
					this.OnInspectionReportNumChanged();
				}
			}
		}
		
		[Column(Storage="_InspectionTime", DbType="DateTime NOT NULL")]
		public System.DateTime InspectionTime
		{
			get
			{
				return this._InspectionTime;
			}
			set
			{
				if ((this._InspectionTime != value))
				{
					this.OnInspectionTimeChanging(value);
					this.SendPropertyChanging();
					this._InspectionTime = value;
					this.SendPropertyChanged("InspectionTime");
					this.OnInspectionTimeChanged();
				}
			}
		}
		
		[Column(Storage="_financeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string financeCode
		{
			get
			{
				return this._financeCode;
			}
			set
			{
				if ((this._financeCode != value))
				{
					this.OnfinanceCodeChanging(value);
					this.SendPropertyChanging();
					this._financeCode = value;
					this.SendPropertyChanged("financeCode");
					this.OnfinanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsManager", DbType="Int NOT NULL")]
		public int MaterialsManager
		{
			get
			{
				return this._MaterialsManager;
			}
			set
			{
				if ((this._MaterialsManager != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsManagerChanging(value);
					this.SendPropertyChanging();
					this._MaterialsManager = value;
					this.SendPropertyChanged("MaterialsManager");
					this.OnMaterialsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseWorker", DbType="Int NOT NULL")]
		public int WarehouseWorker
		{
			get
			{
				return this._WarehouseWorker;
			}
			set
			{
				if ((this._WarehouseWorker != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseWorkerChanging(value);
					this.SendPropertyChanging();
					this._WarehouseWorker = value;
					this.SendPropertyChanged("WarehouseWorker");
					this.OnWarehouseWorkerChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitIn_CommitInQualified", Storage="_CommitIn", ThisKey="CommitInID", OtherKey="CommitInID", IsForeignKey=true)]
		public CommitIn CommitIn
		{
			get
			{
				return this._CommitIn.Entity;
			}
			set
			{
				CommitIn previousValue = this._CommitIn.Entity;
				if (((previousValue != value) 
							|| (this._CommitIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitIn.Entity = null;
						previousValue.CommitInQualified.Remove(this);
					}
					this._CommitIn.Entity = value;
					if ((value != null))
					{
						value.CommitInQualified.Add(this);
						this._CommitInID = value.CommitInID;
					}
					else
					{
						this._CommitInID = default(int);
					}
					this.SendPropertyChanged("CommitIn");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInQualified", Storage="_EmpInfo", ThisKey="MaterialsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInQualified.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInQualified.Add(this);
						this._MaterialsManager = value.EmpID;
					}
					else
					{
						this._MaterialsManager = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInQualified1", Storage="_EmpInfo1", ThisKey="WarehouseWorker", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.CommitInQualified1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.CommitInQualified1.Add(this);
						this._WarehouseWorker = value.EmpID;
					}
					else
					{
						this._WarehouseWorker = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		[Association(Name="MaterialInfo_CommitInQualified", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.CommitInQualified.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInQualified.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_CommitInQualified", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.CommitInQualified.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInQualified.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="SupplierInfo_CommitInQualified", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.CommitInQualified.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInQualified.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CommitInTest")]
	public partial class CommitInTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInTestID;
		
		private int _MaterialsLeaderID;
		
		private System.Nullable<decimal> _TestGentaojian;
		
		private System.Nullable<decimal> _TestMetre;
		
		private System.Nullable<decimal> _TestTon;
		
		private System.Nullable<decimal> _FailedGentaojian;
		
		private System.Nullable<decimal> _FailedMetre;
		
		private System.Nullable<decimal> _FailedTon;
		
		private string _InspectionReportNum;
		
		private string _FileNameStr;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<CommitInAssets> _CommitInAssets;
		
		private EntityRef<CommitInMaterialsLeader> _CommitInMaterialsLeader;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInTestIDChanging(int value);
    partial void OnStorageInTestIDChanged();
    partial void OnMaterialsLeaderIDChanging(int value);
    partial void OnMaterialsLeaderIDChanged();
    partial void OnTestGentaojianChanging(System.Nullable<decimal> value);
    partial void OnTestGentaojianChanged();
    partial void OnTestMetreChanging(System.Nullable<decimal> value);
    partial void OnTestMetreChanged();
    partial void OnTestTonChanging(System.Nullable<decimal> value);
    partial void OnTestTonChanged();
    partial void OnFailedGentaojianChanging(System.Nullable<decimal> value);
    partial void OnFailedGentaojianChanged();
    partial void OnFailedMetreChanging(System.Nullable<decimal> value);
    partial void OnFailedMetreChanged();
    partial void OnFailedTonChanging(System.Nullable<decimal> value);
    partial void OnFailedTonChanged();
    partial void OnInspectionReportNumChanging(string value);
    partial void OnInspectionReportNumChanged();
    partial void OnFileNameStrChanging(string value);
    partial void OnFileNameStrChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitInTest()
		{
			this._CommitInAssets = new EntitySet<CommitInAssets>(new Action<CommitInAssets>(this.attach_CommitInAssets), new Action<CommitInAssets>(this.detach_CommitInAssets));
			this._CommitInMaterialsLeader = default(EntityRef<CommitInMaterialsLeader>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInTestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInTestID
		{
			get
			{
				return this._StorageInTestID;
			}
			set
			{
				if ((this._StorageInTestID != value))
				{
					this.OnStorageInTestIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInTestID = value;
					this.SendPropertyChanged("StorageInTestID");
					this.OnStorageInTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsLeaderID", DbType="Int NOT NULL")]
		public int MaterialsLeaderID
		{
			get
			{
				return this._MaterialsLeaderID;
			}
			set
			{
				if ((this._MaterialsLeaderID != value))
				{
					if (this._CommitInMaterialsLeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsLeaderIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialsLeaderID = value;
					this.SendPropertyChanged("MaterialsLeaderID");
					this.OnMaterialsLeaderIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestGentaojian
		{
			get
			{
				return this._TestGentaojian;
			}
			set
			{
				if ((this._TestGentaojian != value))
				{
					this.OnTestGentaojianChanging(value);
					this.SendPropertyChanging();
					this._TestGentaojian = value;
					this.SendPropertyChanged("TestGentaojian");
					this.OnTestGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_TestMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestMetre
		{
			get
			{
				return this._TestMetre;
			}
			set
			{
				if ((this._TestMetre != value))
				{
					this.OnTestMetreChanging(value);
					this.SendPropertyChanging();
					this._TestMetre = value;
					this.SendPropertyChanged("TestMetre");
					this.OnTestMetreChanged();
				}
			}
		}
		
		[Column(Storage="_TestTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestTon
		{
			get
			{
				return this._TestTon;
			}
			set
			{
				if ((this._TestTon != value))
				{
					this.OnTestTonChanging(value);
					this.SendPropertyChanging();
					this._TestTon = value;
					this.SendPropertyChanged("TestTon");
					this.OnTestTonChanged();
				}
			}
		}
		
		[Column(Storage="_FailedGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailedGentaojian
		{
			get
			{
				return this._FailedGentaojian;
			}
			set
			{
				if ((this._FailedGentaojian != value))
				{
					this.OnFailedGentaojianChanging(value);
					this.SendPropertyChanging();
					this._FailedGentaojian = value;
					this.SendPropertyChanged("FailedGentaojian");
					this.OnFailedGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_FailedMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailedMetre
		{
			get
			{
				return this._FailedMetre;
			}
			set
			{
				if ((this._FailedMetre != value))
				{
					this.OnFailedMetreChanging(value);
					this.SendPropertyChanging();
					this._FailedMetre = value;
					this.SendPropertyChanged("FailedMetre");
					this.OnFailedMetreChanged();
				}
			}
		}
		
		[Column(Storage="_FailedTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailedTon
		{
			get
			{
				return this._FailedTon;
			}
			set
			{
				if ((this._FailedTon != value))
				{
					this.OnFailedTonChanging(value);
					this.SendPropertyChanging();
					this._FailedTon = value;
					this.SendPropertyChanged("FailedTon");
					this.OnFailedTonChanged();
				}
			}
		}
		
		[Column(Storage="_InspectionReportNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InspectionReportNum
		{
			get
			{
				return this._InspectionReportNum;
			}
			set
			{
				if ((this._InspectionReportNum != value))
				{
					this.OnInspectionReportNumChanging(value);
					this.SendPropertyChanging();
					this._InspectionReportNum = value;
					this.SendPropertyChanged("InspectionReportNum");
					this.OnInspectionReportNumChanged();
				}
			}
		}
		
		[Column(Storage="_FileNameStr", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileNameStr
		{
			get
			{
				return this._FileNameStr;
			}
			set
			{
				if ((this._FileNameStr != value))
				{
					this.OnFileNameStrChanging(value);
					this.SendPropertyChanging();
					this._FileNameStr = value;
					this.SendPropertyChanged("FileNameStr");
					this.OnFileNameStrChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitInTest_CommitInAssets", Storage="_CommitInAssets", ThisKey="StorageInTestID", OtherKey="TestID")]
		public EntitySet<CommitInAssets> CommitInAssets
		{
			get
			{
				return this._CommitInAssets;
			}
			set
			{
				this._CommitInAssets.Assign(value);
			}
		}
		
		[Association(Name="CommitInMaterialsLeader_CommitInTest", Storage="_CommitInMaterialsLeader", ThisKey="MaterialsLeaderID", OtherKey="MaterialsLeaderID", IsForeignKey=true)]
		public CommitInMaterialsLeader CommitInMaterialsLeader
		{
			get
			{
				return this._CommitInMaterialsLeader.Entity;
			}
			set
			{
				CommitInMaterialsLeader previousValue = this._CommitInMaterialsLeader.Entity;
				if (((previousValue != value) 
							|| (this._CommitInMaterialsLeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitInMaterialsLeader.Entity = null;
						previousValue.CommitInTest.Remove(this);
					}
					this._CommitInMaterialsLeader.Entity = value;
					if ((value != null))
					{
						value.CommitInTest.Add(this);
						this._MaterialsLeaderID = value.MaterialsLeaderID;
					}
					else
					{
						this._MaterialsLeaderID = default(int);
					}
					this.SendPropertyChanged("CommitInMaterialsLeader");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitInTest", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitInTest.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitInTest.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInAssets(CommitInAssets entity)
		{
			this.SendPropertyChanging();
			entity.CommitInTest = this;
		}
		
		private void detach_CommitInAssets(CommitInAssets entity)
		{
			this.SendPropertyChanging();
			entity.CommitInTest = null;
		}
	}
	
	[Table(Name="dbo.CommitProduce")]
	public partial class CommitProduce : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInProduceID;
		
		private int _StorageInID;
		
		private int _MaterialID;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private int _ExpectedProject;
		
		private System.DateTime _ExpectedTime;
		
		private string _BatchIndex;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private EntitySet<CommitInMaterials> _CommitInMaterials;
		
		private EntitySet<RelationCommitIn> _RelationCommitIn;
		
		private EntityRef<CommitInMain> _CommitInMain;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInProduceIDChanging(int value);
    partial void OnStorageInProduceIDChanged();
    partial void OnStorageInIDChanging(int value);
    partial void OnStorageInIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnExpectedProjectChanging(int value);
    partial void OnExpectedProjectChanged();
    partial void OnExpectedTimeChanging(System.DateTime value);
    partial void OnExpectedTimeChanged();
    partial void OnBatchIndexChanging(string value);
    partial void OnBatchIndexChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public CommitProduce()
		{
			this._CommitInMaterials = new EntitySet<CommitInMaterials>(new Action<CommitInMaterials>(this.attach_CommitInMaterials), new Action<CommitInMaterials>(this.detach_CommitInMaterials));
			this._RelationCommitIn = new EntitySet<RelationCommitIn>(new Action<RelationCommitIn>(this.attach_RelationCommitIn), new Action<RelationCommitIn>(this.detach_RelationCommitIn));
			this._CommitInMain = default(EntityRef<CommitInMain>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInProduceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInProduceID
		{
			get
			{
				return this._StorageInProduceID;
			}
			set
			{
				if ((this._StorageInProduceID != value))
				{
					this.OnStorageInProduceIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInProduceID = value;
					this.SendPropertyChanged("StorageInProduceID");
					this.OnStorageInProduceIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInID", DbType="Int NOT NULL")]
		public int StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					if (this._CommitInMain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedProject", DbType="Int NOT NULL")]
		public int ExpectedProject
		{
			get
			{
				return this._ExpectedProject;
			}
			set
			{
				if ((this._ExpectedProject != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpectedProjectChanging(value);
					this.SendPropertyChanging();
					this._ExpectedProject = value;
					this.SendPropertyChanged("ExpectedProject");
					this.OnExpectedProjectChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedTime", DbType="DateTime NOT NULL")]
		public System.DateTime ExpectedTime
		{
			get
			{
				return this._ExpectedTime;
			}
			set
			{
				if ((this._ExpectedTime != value))
				{
					this.OnExpectedTimeChanging(value);
					this.SendPropertyChanging();
					this._ExpectedTime = value;
					this.SendPropertyChanged("ExpectedTime");
					this.OnExpectedTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this.OnBatchIndexChanging(value);
					this.SendPropertyChanging();
					this._BatchIndex = value;
					this.SendPropertyChanged("BatchIndex");
					this.OnBatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="CommitProduce_CommitInMaterials", Storage="_CommitInMaterials", ThisKey="StorageInProduceID", OtherKey="ProduceID")]
		public EntitySet<CommitInMaterials> CommitInMaterials
		{
			get
			{
				return this._CommitInMaterials;
			}
			set
			{
				this._CommitInMaterials.Assign(value);
			}
		}
		
		[Association(Name="CommitProduce_RelationCommitIn", Storage="_RelationCommitIn", ThisKey="StorageInProduceID", OtherKey="CommitMaterial")]
		public EntitySet<RelationCommitIn> RelationCommitIn
		{
			get
			{
				return this._RelationCommitIn;
			}
			set
			{
				this._RelationCommitIn.Assign(value);
			}
		}
		
		[Association(Name="CommitInMain_CommitProduce", Storage="_CommitInMain", ThisKey="StorageInID", OtherKey="StorageInID", IsForeignKey=true)]
		public CommitInMain CommitInMain
		{
			get
			{
				return this._CommitInMain.Entity;
			}
			set
			{
				CommitInMain previousValue = this._CommitInMain.Entity;
				if (((previousValue != value) 
							|| (this._CommitInMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitInMain.Entity = null;
						previousValue.CommitProduce.Remove(this);
					}
					this._CommitInMain.Entity = value;
					if ((value != null))
					{
						value.CommitProduce.Add(this);
						this._StorageInID = value.StorageInID;
					}
					else
					{
						this._StorageInID = default(int);
					}
					this.SendPropertyChanged("CommitInMain");
				}
			}
		}
		
		[Association(Name="EmpInfo_CommitProduce", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.CommitProduce.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.CommitProduce.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="MaterialInfo_CommitProduce", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.CommitProduce.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.CommitProduce.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_CommitProduce", Storage="_ProjectInfo", ThisKey="ExpectedProject", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.CommitProduce.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.CommitProduce.Add(this);
						this._ExpectedProject = value.ProjectID;
					}
					else
					{
						this._ExpectedProject = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.CommitProduce = this;
		}
		
		private void detach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.CommitProduce = null;
		}
		
		private void attach_RelationCommitIn(RelationCommitIn entity)
		{
			this.SendPropertyChanging();
			entity.CommitProduce = this;
		}
		
		private void detach_RelationCommitIn(RelationCommitIn entity)
		{
			this.SendPropertyChanging();
			entity.CommitProduce = null;
		}
	}
	
	[Table(Name="dbo.DeliveredTypeInfo")]
	public partial class DeliveredTypeInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeliveredTypeID;
		
		private string _DeliveredTypeName;
		
		private string _DeliveredTypeCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeliveredTypeIDChanging(int value);
    partial void OnDeliveredTypeIDChanged();
    partial void OnDeliveredTypeNameChanging(string value);
    partial void OnDeliveredTypeNameChanged();
    partial void OnDeliveredTypeCodeChanging(string value);
    partial void OnDeliveredTypeCodeChanged();
    #endregion
		
		public DeliveredTypeInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_DeliveredTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeliveredTypeID
		{
			get
			{
				return this._DeliveredTypeID;
			}
			set
			{
				if ((this._DeliveredTypeID != value))
				{
					this.OnDeliveredTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveredTypeID = value;
					this.SendPropertyChanged("DeliveredTypeID");
					this.OnDeliveredTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveredTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DeliveredTypeName
		{
			get
			{
				return this._DeliveredTypeName;
			}
			set
			{
				if ((this._DeliveredTypeName != value))
				{
					this.OnDeliveredTypeNameChanging(value);
					this.SendPropertyChanging();
					this._DeliveredTypeName = value;
					this.SendPropertyChanged("DeliveredTypeName");
					this.OnDeliveredTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveredTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DeliveredTypeCode
		{
			get
			{
				return this._DeliveredTypeCode;
			}
			set
			{
				if ((this._DeliveredTypeCode != value))
				{
					this.OnDeliveredTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._DeliveredTypeCode = value;
					this.SendPropertyChanged("DeliveredTypeCode");
					this.OnDeliveredTypeCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DepInfo")]
	public partial class DepInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepID;
		
		private string _DepName;
		
		private string _DepCode;
		
		private string _InCharge;
		
		private string _Contact;
		
		private string _Remark;
		
		private EntitySet<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnDepNameChanging(string value);
    partial void OnDepNameChanged();
    partial void OnDepCodeChanging(string value);
    partial void OnDepCodeChanged();
    partial void OnInChargeChanging(string value);
    partial void OnInChargeChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public DepInfo()
		{
			this._EmpInfo = new EntitySet<EmpInfo>(new Action<EmpInfo>(this.attach_EmpInfo), new Action<EmpInfo>(this.detach_EmpInfo));
			OnCreated();
		}
		
		[Column(Storage="_DepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DepName
		{
			get
			{
				return this._DepName;
			}
			set
			{
				if ((this._DepName != value))
				{
					this.OnDepNameChanging(value);
					this.SendPropertyChanging();
					this._DepName = value;
					this.SendPropertyChanged("DepName");
					this.OnDepNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DepCode
		{
			get
			{
				return this._DepCode;
			}
			set
			{
				if ((this._DepCode != value))
				{
					this.OnDepCodeChanging(value);
					this.SendPropertyChanging();
					this._DepCode = value;
					this.SendPropertyChanged("DepCode");
					this.OnDepCodeChanged();
				}
			}
		}
		
		[Column(Storage="_InCharge", DbType="NVarChar(50)")]
		public string InCharge
		{
			get
			{
				return this._InCharge;
			}
			set
			{
				if ((this._InCharge != value))
				{
					this.OnInChargeChanging(value);
					this.SendPropertyChanging();
					this._InCharge = value;
					this.SendPropertyChanged("InCharge");
					this.OnInChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Contact", DbType="NVarChar(50)")]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="DepInfo_EmpInfo", Storage="_EmpInfo", ThisKey="DepID", OtherKey="DepID")]
		public EntitySet<EmpInfo> EmpInfo
		{
			get
			{
				return this._EmpInfo;
			}
			set
			{
				this._EmpInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmpInfo(EmpInfo entity)
		{
			this.SendPropertyChanging();
			entity.DepInfo = this;
		}
		
		private void detach_EmpInfo(EmpInfo entity)
		{
			this.SendPropertyChanging();
			entity.DepInfo = null;
		}
	}
	
	[Table(Name="dbo.EmpInfo")]
	public partial class EmpInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpID;
		
		private string _Account;
		
		private int _DepID;
		
		private string _EmpName;
		
		private string _Contact;
		
		private string _Remark;
		
		private EntitySet<AwaitScrap> _AwaitScrap;
		
		private EntitySet<CommitDirector> _CommitDirector;
		
		private EntitySet<CommitInAssets> _CommitInAssets;
		
		private EntitySet<CommitInAudited> _CommitInAudited;
		
		private EntitySet<CommitInAudited> _CommitInAudited1;
		
		private EntitySet<CommitInAudited> _CommitInAudited2;
		
		private EntitySet<CommitInAudited> _CommitInAudited3;
		
		private EntitySet<CommitInDetailed> _CommitInDetailed;
		
		private EntitySet<CommitInDetailed> _CommitInDetailed1;
		
		private EntitySet<CommitInHead> _CommitInHead;
		
		private EntitySet<CommitInMain> _CommitInMain;
		
		private EntitySet<CommitInMaterials> _CommitInMaterials;
		
		private EntitySet<CommitInMaterialsLeader> _CommitInMaterialsLeader;
		
		private EntitySet<CommitInQualified> _CommitInQualified;
		
		private EntitySet<CommitInQualified> _CommitInQualified1;
		
		private EntitySet<CommitInTest> _CommitInTest;
		
		private EntitySet<CommitProduce> _CommitProduce;
		
		private EntitySet<FileOfQC> _FileOfQC;
		
		private EntitySet<FlowDetailsOffline> _FlowDetailsOffline;
		
		private EntitySet<LogInfo> _LogInfo;
		
		private EntitySet<MessageInfo> _MessageInfo;
		
		private EntitySet<MessageReceiver> _MessageReceiver;
		
		private EntitySet<QualifiedStocks> _QualifiedStocks;
		
		private EntitySet<Scrapped> _Scrapped;
		
		private EntitySet<SrinAccountReceiptConfirm> _SrinAccountReceiptConfirm;
		
		private EntitySet<SrinAChiefQReceiptConfirm> _SrinAChiefQReceiptConfirm;
		
		private EntitySet<SrinAssetQualifiedDetails> _SrinAssetQualifiedDetails;
		
		private EntitySet<SrinAssetReceiptConfirm> _SrinAssetReceiptConfirm;
		
		private EntitySet<SrinDetails> _SrinDetails;
		
		private EntitySet<SrinInspectorVerifyDetails> _SrinInspectorVerifyDetails;
		
		private EntitySet<SrinInspectorVerifyRDetails> _SrinInspectorVerifyRDetails;
		
		private EntitySet<SrinInspectorVerifyTransfer> _SrinInspectorVerifyTransfer;
		
		private EntitySet<SrinMaterialRepairAudit> _SrinMaterialRepairAudit;
		
		private EntitySet<SrinMaterialRepairDetails> _SrinMaterialRepairDetails;
		
		private EntitySet<SrinMaterialVerifyDetails> _SrinMaterialVerifyDetails;
		
		private EntitySet<SrinProduceVerifyTransfer> _SrinProduceVerifyTransfer;
		
		private EntitySet<SrinQualifiedReceipt> _SrinQualifiedReceipt;
		
		private EntitySet<SrinReceipt> _SrinReceipt;
		
		private EntitySet<SrinRepairPlan> _SrinRepairPlan;
		
		private EntitySet<SrinRepairReport> _SrinRepairReport;
		
		private EntitySet<SrinStocktaking> _SrinStocktaking;
		
		private EntitySet<SrinStocktakingConfirm> _SrinStocktakingConfirm;
		
		private EntitySet<SrinStocktakingDetails> _SrinStocktakingDetails;
		
		private EntitySet<SrinSubDetails> _SrinSubDetails;
		
		private EntitySet<SrinSubDoc> _SrinSubDoc;
		
		private EntitySet<SrinSubDoc> _SrinSubDoc1;
		
		private EntitySet<SrinVerifyTransfer> _SrinVerifyTransfer;
		
		private EntitySet<SrinWriteOffDetails> _SrinWriteOffDetails;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<StockOnline> _StockOnline1;
		
		private EntitySet<StockOnline> _StockOnline2;
		
		private EntitySet<StockTransfer> _StockTransfer;
		
		private EntitySet<StockTransferTask> _StockTransferTask;
		
		private EntitySet<StockTransferTask> _StockTransferTask1;
		
		private EntitySet<StorageCommitOutAssetAudit> _StorageCommitOutAssetAudit;
		
		private EntitySet<StorageCommitOutDetails> _StorageCommitOutDetails;
		
		private EntitySet<StorageCommitOutDirectorConfirm> _StorageCommitOutDirectorConfirm;
		
		private EntitySet<StorageCommitOutNotice> _StorageCommitOutNotice;
		
		private EntitySet<StorageCommitOutProduceAudit> _StorageCommitOutProduceAudit;
		
		private EntitySet<StorageCommitOutRealDetails> _StorageCommitOutRealDetails;
		
		private EntitySet<StorageDirector> _StorageDirector;
		
		private EntitySet<StorageInAssets> _StorageInAssets;
		
		private EntitySet<StorageInfo> _StorageInfo;
		
		private EntitySet<StorageInHead> _StorageInHead;
		
		private EntitySet<StorageInMain> _StorageInMain;
		
		private EntitySet<StorageInMaterials> _StorageInMaterials;
		
		private EntitySet<StorageInMaterialsLeader> _StorageInMaterialsLeader;
		
		private EntitySet<StorageInTest> _StorageInTest;
		
		private EntitySet<StorageOutAssetAudit> _StorageOutAssetAudit;
		
		private EntitySet<StorageOutDetails> _StorageOutDetails;
		
		private EntitySet<StorageOutDirectorConfirm> _StorageOutDirectorConfirm;
		
		private EntitySet<StorageOutNotice> _StorageOutNotice;
		
		private EntitySet<StorageOutProduceAudit> _StorageOutProduceAudit;
		
		private EntitySet<StorageOutRealDetails> _StorageOutRealDetails;
		
		private EntitySet<StorageOutTask> _StorageOutTask;
		
		private EntitySet<StorageOutTask> _StorageOutTask1;
		
		private EntitySet<StorageProduce> _StorageProduce;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntitySet<TableOfStocks> _TableOfStocks1;
		
		private EntitySet<TableOfStocks> _TableOfStocks2;
		
		private EntitySet<TaskProxy> _TaskProxy;
		
		private EntitySet<TaskProxy> _TaskProxy1;
		
		private EntitySet<TaskStorageIn> _TaskStorageIn;
		
		private EntitySet<TaskStorageIn> _TaskStorageIn1;
		
		private EntityRef<DepInfo> _DepInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIDChanging(int value);
    partial void OnEmpIDChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public EmpInfo()
		{
			this._AwaitScrap = new EntitySet<AwaitScrap>(new Action<AwaitScrap>(this.attach_AwaitScrap), new Action<AwaitScrap>(this.detach_AwaitScrap));
			this._CommitDirector = new EntitySet<CommitDirector>(new Action<CommitDirector>(this.attach_CommitDirector), new Action<CommitDirector>(this.detach_CommitDirector));
			this._CommitInAssets = new EntitySet<CommitInAssets>(new Action<CommitInAssets>(this.attach_CommitInAssets), new Action<CommitInAssets>(this.detach_CommitInAssets));
			this._CommitInAudited = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited), new Action<CommitInAudited>(this.detach_CommitInAudited));
			this._CommitInAudited1 = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited1), new Action<CommitInAudited>(this.detach_CommitInAudited1));
			this._CommitInAudited2 = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited2), new Action<CommitInAudited>(this.detach_CommitInAudited2));
			this._CommitInAudited3 = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited3), new Action<CommitInAudited>(this.detach_CommitInAudited3));
			this._CommitInDetailed = new EntitySet<CommitInDetailed>(new Action<CommitInDetailed>(this.attach_CommitInDetailed), new Action<CommitInDetailed>(this.detach_CommitInDetailed));
			this._CommitInDetailed1 = new EntitySet<CommitInDetailed>(new Action<CommitInDetailed>(this.attach_CommitInDetailed1), new Action<CommitInDetailed>(this.detach_CommitInDetailed1));
			this._CommitInHead = new EntitySet<CommitInHead>(new Action<CommitInHead>(this.attach_CommitInHead), new Action<CommitInHead>(this.detach_CommitInHead));
			this._CommitInMain = new EntitySet<CommitInMain>(new Action<CommitInMain>(this.attach_CommitInMain), new Action<CommitInMain>(this.detach_CommitInMain));
			this._CommitInMaterials = new EntitySet<CommitInMaterials>(new Action<CommitInMaterials>(this.attach_CommitInMaterials), new Action<CommitInMaterials>(this.detach_CommitInMaterials));
			this._CommitInMaterialsLeader = new EntitySet<CommitInMaterialsLeader>(new Action<CommitInMaterialsLeader>(this.attach_CommitInMaterialsLeader), new Action<CommitInMaterialsLeader>(this.detach_CommitInMaterialsLeader));
			this._CommitInQualified = new EntitySet<CommitInQualified>(new Action<CommitInQualified>(this.attach_CommitInQualified), new Action<CommitInQualified>(this.detach_CommitInQualified));
			this._CommitInQualified1 = new EntitySet<CommitInQualified>(new Action<CommitInQualified>(this.attach_CommitInQualified1), new Action<CommitInQualified>(this.detach_CommitInQualified1));
			this._CommitInTest = new EntitySet<CommitInTest>(new Action<CommitInTest>(this.attach_CommitInTest), new Action<CommitInTest>(this.detach_CommitInTest));
			this._CommitProduce = new EntitySet<CommitProduce>(new Action<CommitProduce>(this.attach_CommitProduce), new Action<CommitProduce>(this.detach_CommitProduce));
			this._FileOfQC = new EntitySet<FileOfQC>(new Action<FileOfQC>(this.attach_FileOfQC), new Action<FileOfQC>(this.detach_FileOfQC));
			this._FlowDetailsOffline = new EntitySet<FlowDetailsOffline>(new Action<FlowDetailsOffline>(this.attach_FlowDetailsOffline), new Action<FlowDetailsOffline>(this.detach_FlowDetailsOffline));
			this._LogInfo = new EntitySet<LogInfo>(new Action<LogInfo>(this.attach_LogInfo), new Action<LogInfo>(this.detach_LogInfo));
			this._MessageInfo = new EntitySet<MessageInfo>(new Action<MessageInfo>(this.attach_MessageInfo), new Action<MessageInfo>(this.detach_MessageInfo));
			this._MessageReceiver = new EntitySet<MessageReceiver>(new Action<MessageReceiver>(this.attach_MessageReceiver), new Action<MessageReceiver>(this.detach_MessageReceiver));
			this._QualifiedStocks = new EntitySet<QualifiedStocks>(new Action<QualifiedStocks>(this.attach_QualifiedStocks), new Action<QualifiedStocks>(this.detach_QualifiedStocks));
			this._Scrapped = new EntitySet<Scrapped>(new Action<Scrapped>(this.attach_Scrapped), new Action<Scrapped>(this.detach_Scrapped));
			this._SrinAccountReceiptConfirm = new EntitySet<SrinAccountReceiptConfirm>(new Action<SrinAccountReceiptConfirm>(this.attach_SrinAccountReceiptConfirm), new Action<SrinAccountReceiptConfirm>(this.detach_SrinAccountReceiptConfirm));
			this._SrinAChiefQReceiptConfirm = new EntitySet<SrinAChiefQReceiptConfirm>(new Action<SrinAChiefQReceiptConfirm>(this.attach_SrinAChiefQReceiptConfirm), new Action<SrinAChiefQReceiptConfirm>(this.detach_SrinAChiefQReceiptConfirm));
			this._SrinAssetQualifiedDetails = new EntitySet<SrinAssetQualifiedDetails>(new Action<SrinAssetQualifiedDetails>(this.attach_SrinAssetQualifiedDetails), new Action<SrinAssetQualifiedDetails>(this.detach_SrinAssetQualifiedDetails));
			this._SrinAssetReceiptConfirm = new EntitySet<SrinAssetReceiptConfirm>(new Action<SrinAssetReceiptConfirm>(this.attach_SrinAssetReceiptConfirm), new Action<SrinAssetReceiptConfirm>(this.detach_SrinAssetReceiptConfirm));
			this._SrinDetails = new EntitySet<SrinDetails>(new Action<SrinDetails>(this.attach_SrinDetails), new Action<SrinDetails>(this.detach_SrinDetails));
			this._SrinInspectorVerifyDetails = new EntitySet<SrinInspectorVerifyDetails>(new Action<SrinInspectorVerifyDetails>(this.attach_SrinInspectorVerifyDetails), new Action<SrinInspectorVerifyDetails>(this.detach_SrinInspectorVerifyDetails));
			this._SrinInspectorVerifyRDetails = new EntitySet<SrinInspectorVerifyRDetails>(new Action<SrinInspectorVerifyRDetails>(this.attach_SrinInspectorVerifyRDetails), new Action<SrinInspectorVerifyRDetails>(this.detach_SrinInspectorVerifyRDetails));
			this._SrinInspectorVerifyTransfer = new EntitySet<SrinInspectorVerifyTransfer>(new Action<SrinInspectorVerifyTransfer>(this.attach_SrinInspectorVerifyTransfer), new Action<SrinInspectorVerifyTransfer>(this.detach_SrinInspectorVerifyTransfer));
			this._SrinMaterialRepairAudit = new EntitySet<SrinMaterialRepairAudit>(new Action<SrinMaterialRepairAudit>(this.attach_SrinMaterialRepairAudit), new Action<SrinMaterialRepairAudit>(this.detach_SrinMaterialRepairAudit));
			this._SrinMaterialRepairDetails = new EntitySet<SrinMaterialRepairDetails>(new Action<SrinMaterialRepairDetails>(this.attach_SrinMaterialRepairDetails), new Action<SrinMaterialRepairDetails>(this.detach_SrinMaterialRepairDetails));
			this._SrinMaterialVerifyDetails = new EntitySet<SrinMaterialVerifyDetails>(new Action<SrinMaterialVerifyDetails>(this.attach_SrinMaterialVerifyDetails), new Action<SrinMaterialVerifyDetails>(this.detach_SrinMaterialVerifyDetails));
			this._SrinProduceVerifyTransfer = new EntitySet<SrinProduceVerifyTransfer>(new Action<SrinProduceVerifyTransfer>(this.attach_SrinProduceVerifyTransfer), new Action<SrinProduceVerifyTransfer>(this.detach_SrinProduceVerifyTransfer));
			this._SrinQualifiedReceipt = new EntitySet<SrinQualifiedReceipt>(new Action<SrinQualifiedReceipt>(this.attach_SrinQualifiedReceipt), new Action<SrinQualifiedReceipt>(this.detach_SrinQualifiedReceipt));
			this._SrinReceipt = new EntitySet<SrinReceipt>(new Action<SrinReceipt>(this.attach_SrinReceipt), new Action<SrinReceipt>(this.detach_SrinReceipt));
			this._SrinRepairPlan = new EntitySet<SrinRepairPlan>(new Action<SrinRepairPlan>(this.attach_SrinRepairPlan), new Action<SrinRepairPlan>(this.detach_SrinRepairPlan));
			this._SrinRepairReport = new EntitySet<SrinRepairReport>(new Action<SrinRepairReport>(this.attach_SrinRepairReport), new Action<SrinRepairReport>(this.detach_SrinRepairReport));
			this._SrinStocktaking = new EntitySet<SrinStocktaking>(new Action<SrinStocktaking>(this.attach_SrinStocktaking), new Action<SrinStocktaking>(this.detach_SrinStocktaking));
			this._SrinStocktakingConfirm = new EntitySet<SrinStocktakingConfirm>(new Action<SrinStocktakingConfirm>(this.attach_SrinStocktakingConfirm), new Action<SrinStocktakingConfirm>(this.detach_SrinStocktakingConfirm));
			this._SrinStocktakingDetails = new EntitySet<SrinStocktakingDetails>(new Action<SrinStocktakingDetails>(this.attach_SrinStocktakingDetails), new Action<SrinStocktakingDetails>(this.detach_SrinStocktakingDetails));
			this._SrinSubDetails = new EntitySet<SrinSubDetails>(new Action<SrinSubDetails>(this.attach_SrinSubDetails), new Action<SrinSubDetails>(this.detach_SrinSubDetails));
			this._SrinSubDoc = new EntitySet<SrinSubDoc>(new Action<SrinSubDoc>(this.attach_SrinSubDoc), new Action<SrinSubDoc>(this.detach_SrinSubDoc));
			this._SrinSubDoc1 = new EntitySet<SrinSubDoc>(new Action<SrinSubDoc>(this.attach_SrinSubDoc1), new Action<SrinSubDoc>(this.detach_SrinSubDoc1));
			this._SrinVerifyTransfer = new EntitySet<SrinVerifyTransfer>(new Action<SrinVerifyTransfer>(this.attach_SrinVerifyTransfer), new Action<SrinVerifyTransfer>(this.detach_SrinVerifyTransfer));
			this._SrinWriteOffDetails = new EntitySet<SrinWriteOffDetails>(new Action<SrinWriteOffDetails>(this.attach_SrinWriteOffDetails), new Action<SrinWriteOffDetails>(this.detach_SrinWriteOffDetails));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._StockOnline1 = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline1), new Action<StockOnline>(this.detach_StockOnline1));
			this._StockOnline2 = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline2), new Action<StockOnline>(this.detach_StockOnline2));
			this._StockTransfer = new EntitySet<StockTransfer>(new Action<StockTransfer>(this.attach_StockTransfer), new Action<StockTransfer>(this.detach_StockTransfer));
			this._StockTransferTask = new EntitySet<StockTransferTask>(new Action<StockTransferTask>(this.attach_StockTransferTask), new Action<StockTransferTask>(this.detach_StockTransferTask));
			this._StockTransferTask1 = new EntitySet<StockTransferTask>(new Action<StockTransferTask>(this.attach_StockTransferTask1), new Action<StockTransferTask>(this.detach_StockTransferTask1));
			this._StorageCommitOutAssetAudit = new EntitySet<StorageCommitOutAssetAudit>(new Action<StorageCommitOutAssetAudit>(this.attach_StorageCommitOutAssetAudit), new Action<StorageCommitOutAssetAudit>(this.detach_StorageCommitOutAssetAudit));
			this._StorageCommitOutDetails = new EntitySet<StorageCommitOutDetails>(new Action<StorageCommitOutDetails>(this.attach_StorageCommitOutDetails), new Action<StorageCommitOutDetails>(this.detach_StorageCommitOutDetails));
			this._StorageCommitOutDirectorConfirm = new EntitySet<StorageCommitOutDirectorConfirm>(new Action<StorageCommitOutDirectorConfirm>(this.attach_StorageCommitOutDirectorConfirm), new Action<StorageCommitOutDirectorConfirm>(this.detach_StorageCommitOutDirectorConfirm));
			this._StorageCommitOutNotice = new EntitySet<StorageCommitOutNotice>(new Action<StorageCommitOutNotice>(this.attach_StorageCommitOutNotice), new Action<StorageCommitOutNotice>(this.detach_StorageCommitOutNotice));
			this._StorageCommitOutProduceAudit = new EntitySet<StorageCommitOutProduceAudit>(new Action<StorageCommitOutProduceAudit>(this.attach_StorageCommitOutProduceAudit), new Action<StorageCommitOutProduceAudit>(this.detach_StorageCommitOutProduceAudit));
			this._StorageCommitOutRealDetails = new EntitySet<StorageCommitOutRealDetails>(new Action<StorageCommitOutRealDetails>(this.attach_StorageCommitOutRealDetails), new Action<StorageCommitOutRealDetails>(this.detach_StorageCommitOutRealDetails));
			this._StorageDirector = new EntitySet<StorageDirector>(new Action<StorageDirector>(this.attach_StorageDirector), new Action<StorageDirector>(this.detach_StorageDirector));
			this._StorageInAssets = new EntitySet<StorageInAssets>(new Action<StorageInAssets>(this.attach_StorageInAssets), new Action<StorageInAssets>(this.detach_StorageInAssets));
			this._StorageInfo = new EntitySet<StorageInfo>(new Action<StorageInfo>(this.attach_StorageInfo), new Action<StorageInfo>(this.detach_StorageInfo));
			this._StorageInHead = new EntitySet<StorageInHead>(new Action<StorageInHead>(this.attach_StorageInHead), new Action<StorageInHead>(this.detach_StorageInHead));
			this._StorageInMain = new EntitySet<StorageInMain>(new Action<StorageInMain>(this.attach_StorageInMain), new Action<StorageInMain>(this.detach_StorageInMain));
			this._StorageInMaterials = new EntitySet<StorageInMaterials>(new Action<StorageInMaterials>(this.attach_StorageInMaterials), new Action<StorageInMaterials>(this.detach_StorageInMaterials));
			this._StorageInMaterialsLeader = new EntitySet<StorageInMaterialsLeader>(new Action<StorageInMaterialsLeader>(this.attach_StorageInMaterialsLeader), new Action<StorageInMaterialsLeader>(this.detach_StorageInMaterialsLeader));
			this._StorageInTest = new EntitySet<StorageInTest>(new Action<StorageInTest>(this.attach_StorageInTest), new Action<StorageInTest>(this.detach_StorageInTest));
			this._StorageOutAssetAudit = new EntitySet<StorageOutAssetAudit>(new Action<StorageOutAssetAudit>(this.attach_StorageOutAssetAudit), new Action<StorageOutAssetAudit>(this.detach_StorageOutAssetAudit));
			this._StorageOutDetails = new EntitySet<StorageOutDetails>(new Action<StorageOutDetails>(this.attach_StorageOutDetails), new Action<StorageOutDetails>(this.detach_StorageOutDetails));
			this._StorageOutDirectorConfirm = new EntitySet<StorageOutDirectorConfirm>(new Action<StorageOutDirectorConfirm>(this.attach_StorageOutDirectorConfirm), new Action<StorageOutDirectorConfirm>(this.detach_StorageOutDirectorConfirm));
			this._StorageOutNotice = new EntitySet<StorageOutNotice>(new Action<StorageOutNotice>(this.attach_StorageOutNotice), new Action<StorageOutNotice>(this.detach_StorageOutNotice));
			this._StorageOutProduceAudit = new EntitySet<StorageOutProduceAudit>(new Action<StorageOutProduceAudit>(this.attach_StorageOutProduceAudit), new Action<StorageOutProduceAudit>(this.detach_StorageOutProduceAudit));
			this._StorageOutRealDetails = new EntitySet<StorageOutRealDetails>(new Action<StorageOutRealDetails>(this.attach_StorageOutRealDetails), new Action<StorageOutRealDetails>(this.detach_StorageOutRealDetails));
			this._StorageOutTask = new EntitySet<StorageOutTask>(new Action<StorageOutTask>(this.attach_StorageOutTask), new Action<StorageOutTask>(this.detach_StorageOutTask));
			this._StorageOutTask1 = new EntitySet<StorageOutTask>(new Action<StorageOutTask>(this.attach_StorageOutTask1), new Action<StorageOutTask>(this.detach_StorageOutTask1));
			this._StorageProduce = new EntitySet<StorageProduce>(new Action<StorageProduce>(this.attach_StorageProduce), new Action<StorageProduce>(this.detach_StorageProduce));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._TableOfStocks1 = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks1), new Action<TableOfStocks>(this.detach_TableOfStocks1));
			this._TableOfStocks2 = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks2), new Action<TableOfStocks>(this.detach_TableOfStocks2));
			this._TaskProxy = new EntitySet<TaskProxy>(new Action<TaskProxy>(this.attach_TaskProxy), new Action<TaskProxy>(this.detach_TaskProxy));
			this._TaskProxy1 = new EntitySet<TaskProxy>(new Action<TaskProxy>(this.attach_TaskProxy1), new Action<TaskProxy>(this.detach_TaskProxy1));
			this._TaskStorageIn = new EntitySet<TaskStorageIn>(new Action<TaskStorageIn>(this.attach_TaskStorageIn), new Action<TaskStorageIn>(this.detach_TaskStorageIn));
			this._TaskStorageIn1 = new EntitySet<TaskStorageIn>(new Action<TaskStorageIn>(this.attach_TaskStorageIn1), new Action<TaskStorageIn>(this.detach_TaskStorageIn1));
			this._DepInfo = default(EntityRef<DepInfo>);
			OnCreated();
		}
		
		[Column(Storage="_EmpID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[Column(Storage="_Account", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_DepID", DbType="Int NOT NULL")]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					if (this._DepInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmpName", DbType="NVarChar(50)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[Column(Storage="_Contact", DbType="NVarChar(50)")]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_AwaitScrap", Storage="_AwaitScrap", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<AwaitScrap> AwaitScrap
		{
			get
			{
				return this._AwaitScrap;
			}
			set
			{
				this._AwaitScrap.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitDirector", Storage="_CommitDirector", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitDirector> CommitDirector
		{
			get
			{
				return this._CommitDirector;
			}
			set
			{
				this._CommitDirector.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInAssets", Storage="_CommitInAssets", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitInAssets> CommitInAssets
		{
			get
			{
				return this._CommitInAssets;
			}
			set
			{
				this._CommitInAssets.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited", Storage="_CommitInAudited", ThisKey="EmpID", OtherKey="Director")]
		public EntitySet<CommitInAudited> CommitInAudited
		{
			get
			{
				return this._CommitInAudited;
			}
			set
			{
				this._CommitInAudited.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited1", Storage="_CommitInAudited1", ThisKey="EmpID", OtherKey="MaterialsManager")]
		public EntitySet<CommitInAudited> CommitInAudited1
		{
			get
			{
				return this._CommitInAudited1;
			}
			set
			{
				this._CommitInAudited1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited2", Storage="_CommitInAudited2", ThisKey="EmpID", OtherKey="MaterialAccounting")]
		public EntitySet<CommitInAudited> CommitInAudited2
		{
			get
			{
				return this._CommitInAudited2;
			}
			set
			{
				this._CommitInAudited2.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInAudited3", Storage="_CommitInAudited3", ThisKey="EmpID", OtherKey="WarehouseWorker")]
		public EntitySet<CommitInAudited> CommitInAudited3
		{
			get
			{
				return this._CommitInAudited3;
			}
			set
			{
				this._CommitInAudited3.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInDetailed", Storage="_CommitInDetailed", ThisKey="EmpID", OtherKey="MaterialsManager")]
		public EntitySet<CommitInDetailed> CommitInDetailed
		{
			get
			{
				return this._CommitInDetailed;
			}
			set
			{
				this._CommitInDetailed.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInDetailed1", Storage="_CommitInDetailed1", ThisKey="EmpID", OtherKey="WarehouseWorker")]
		public EntitySet<CommitInDetailed> CommitInDetailed1
		{
			get
			{
				return this._CommitInDetailed1;
			}
			set
			{
				this._CommitInDetailed1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInHead", Storage="_CommitInHead", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitInHead> CommitInHead
		{
			get
			{
				return this._CommitInHead;
			}
			set
			{
				this._CommitInHead.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInMain", Storage="_CommitInMain", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitInMain> CommitInMain
		{
			get
			{
				return this._CommitInMain;
			}
			set
			{
				this._CommitInMain.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInMaterials", Storage="_CommitInMaterials", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitInMaterials> CommitInMaterials
		{
			get
			{
				return this._CommitInMaterials;
			}
			set
			{
				this._CommitInMaterials.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInMaterialsLeader", Storage="_CommitInMaterialsLeader", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitInMaterialsLeader> CommitInMaterialsLeader
		{
			get
			{
				return this._CommitInMaterialsLeader;
			}
			set
			{
				this._CommitInMaterialsLeader.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInQualified", Storage="_CommitInQualified", ThisKey="EmpID", OtherKey="MaterialsManager")]
		public EntitySet<CommitInQualified> CommitInQualified
		{
			get
			{
				return this._CommitInQualified;
			}
			set
			{
				this._CommitInQualified.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInQualified1", Storage="_CommitInQualified1", ThisKey="EmpID", OtherKey="WarehouseWorker")]
		public EntitySet<CommitInQualified> CommitInQualified1
		{
			get
			{
				return this._CommitInQualified1;
			}
			set
			{
				this._CommitInQualified1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitInTest", Storage="_CommitInTest", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitInTest> CommitInTest
		{
			get
			{
				return this._CommitInTest;
			}
			set
			{
				this._CommitInTest.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_CommitProduce", Storage="_CommitProduce", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<CommitProduce> CommitProduce
		{
			get
			{
				return this._CommitProduce;
			}
			set
			{
				this._CommitProduce.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_FileOfQC", Storage="_FileOfQC", ThisKey="EmpID", OtherKey="FileCreateEmp")]
		public EntitySet<FileOfQC> FileOfQC
		{
			get
			{
				return this._FileOfQC;
			}
			set
			{
				this._FileOfQC.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_FlowDetailsOffline", Storage="_FlowDetailsOffline", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<FlowDetailsOffline> FlowDetailsOffline
		{
			get
			{
				return this._FlowDetailsOffline;
			}
			set
			{
				this._FlowDetailsOffline.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_LogInfo", Storage="_LogInfo", ThisKey="EmpID", OtherKey="LogUser")]
		public EntitySet<LogInfo> LogInfo
		{
			get
			{
				return this._LogInfo;
			}
			set
			{
				this._LogInfo.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_MessageInfo", Storage="_MessageInfo", ThisKey="EmpID", OtherKey="Creater")]
		public EntitySet<MessageInfo> MessageInfo
		{
			get
			{
				return this._MessageInfo;
			}
			set
			{
				this._MessageInfo.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_MessageReceiver", Storage="_MessageReceiver", ThisKey="EmpID", OtherKey="ReceiverID")]
		public EntitySet<MessageReceiver> MessageReceiver
		{
			get
			{
				return this._MessageReceiver;
			}
			set
			{
				this._MessageReceiver.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_QualifiedStocks", Storage="_QualifiedStocks", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this._QualifiedStocks;
			}
			set
			{
				this._QualifiedStocks.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_Scrapped", Storage="_Scrapped", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<Scrapped> Scrapped
		{
			get
			{
				return this._Scrapped;
			}
			set
			{
				this._Scrapped.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinAccountReceiptConfirm", Storage="_SrinAccountReceiptConfirm", ThisKey="EmpID", OtherKey="Account")]
		public EntitySet<SrinAccountReceiptConfirm> SrinAccountReceiptConfirm
		{
			get
			{
				return this._SrinAccountReceiptConfirm;
			}
			set
			{
				this._SrinAccountReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinAChiefQReceiptConfirm", Storage="_SrinAChiefQReceiptConfirm", ThisKey="EmpID", OtherKey="AssetChief")]
		public EntitySet<SrinAChiefQReceiptConfirm> SrinAChiefQReceiptConfirm
		{
			get
			{
				return this._SrinAChiefQReceiptConfirm;
			}
			set
			{
				this._SrinAChiefQReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinAssetQualifiedDetails", Storage="_SrinAssetQualifiedDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinAssetQualifiedDetails> SrinAssetQualifiedDetails
		{
			get
			{
				return this._SrinAssetQualifiedDetails;
			}
			set
			{
				this._SrinAssetQualifiedDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinAssetReceiptConfirm", Storage="_SrinAssetReceiptConfirm", ThisKey="EmpID", OtherKey="MaterialChief")]
		public EntitySet<SrinAssetReceiptConfirm> SrinAssetReceiptConfirm
		{
			get
			{
				return this._SrinAssetReceiptConfirm;
			}
			set
			{
				this._SrinAssetReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinDetails", Storage="_SrinDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinDetails> SrinDetails
		{
			get
			{
				return this._SrinDetails;
			}
			set
			{
				this._SrinDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinInspectorVerifyDetails", Storage="_SrinInspectorVerifyDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinInspectorVerifyDetails> SrinInspectorVerifyDetails
		{
			get
			{
				return this._SrinInspectorVerifyDetails;
			}
			set
			{
				this._SrinInspectorVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinInspectorVerifyRDetails", Storage="_SrinInspectorVerifyRDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinInspectorVerifyRDetails> SrinInspectorVerifyRDetails
		{
			get
			{
				return this._SrinInspectorVerifyRDetails;
			}
			set
			{
				this._SrinInspectorVerifyRDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinInspectorVerifyTransfer", Storage="_SrinInspectorVerifyTransfer", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinInspectorVerifyTransfer> SrinInspectorVerifyTransfer
		{
			get
			{
				return this._SrinInspectorVerifyTransfer;
			}
			set
			{
				this._SrinInspectorVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinMaterialRepairAudit", Storage="_SrinMaterialRepairAudit", ThisKey="EmpID", OtherKey="MaterialChief")]
		public EntitySet<SrinMaterialRepairAudit> SrinMaterialRepairAudit
		{
			get
			{
				return this._SrinMaterialRepairAudit;
			}
			set
			{
				this._SrinMaterialRepairAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinMaterialRepairDetails", Storage="_SrinMaterialRepairDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinMaterialRepairDetails> SrinMaterialRepairDetails
		{
			get
			{
				return this._SrinMaterialRepairDetails;
			}
			set
			{
				this._SrinMaterialRepairDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinMaterialVerifyDetails", Storage="_SrinMaterialVerifyDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinMaterialVerifyDetails> SrinMaterialVerifyDetails
		{
			get
			{
				return this._SrinMaterialVerifyDetails;
			}
			set
			{
				this._SrinMaterialVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinProduceVerifyTransfer", Storage="_SrinProduceVerifyTransfer", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinProduceVerifyTransfer> SrinProduceVerifyTransfer
		{
			get
			{
				return this._SrinProduceVerifyTransfer;
			}
			set
			{
				this._SrinProduceVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinQualifiedReceipt", Storage="_SrinQualifiedReceipt", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinQualifiedReceipt> SrinQualifiedReceipt
		{
			get
			{
				return this._SrinQualifiedReceipt;
			}
			set
			{
				this._SrinQualifiedReceipt.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinReceipt", Storage="_SrinReceipt", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinReceipt> SrinReceipt
		{
			get
			{
				return this._SrinReceipt;
			}
			set
			{
				this._SrinReceipt.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinRepairPlan", Storage="_SrinRepairPlan", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinRepairPlan> SrinRepairPlan
		{
			get
			{
				return this._SrinRepairPlan;
			}
			set
			{
				this._SrinRepairPlan.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinRepairReport", Storage="_SrinRepairReport", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinRepairReport> SrinRepairReport
		{
			get
			{
				return this._SrinRepairReport;
			}
			set
			{
				this._SrinRepairReport.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinStocktaking", Storage="_SrinStocktaking", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinStocktaking> SrinStocktaking
		{
			get
			{
				return this._SrinStocktaking;
			}
			set
			{
				this._SrinStocktaking.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinStocktakingConfirm", Storage="_SrinStocktakingConfirm", ThisKey="EmpID", OtherKey="MaterialChief")]
		public EntitySet<SrinStocktakingConfirm> SrinStocktakingConfirm
		{
			get
			{
				return this._SrinStocktakingConfirm;
			}
			set
			{
				this._SrinStocktakingConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinStocktakingDetails", Storage="_SrinStocktakingDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinStocktakingDetails> SrinStocktakingDetails
		{
			get
			{
				return this._SrinStocktakingDetails;
			}
			set
			{
				this._SrinStocktakingDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinSubDetails", Storage="_SrinSubDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinSubDetails> SrinSubDetails
		{
			get
			{
				return this._SrinSubDetails;
			}
			set
			{
				this._SrinSubDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinSubDoc", Storage="_SrinSubDoc", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinSubDoc> SrinSubDoc
		{
			get
			{
				return this._SrinSubDoc;
			}
			set
			{
				this._SrinSubDoc.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinSubDoc1", Storage="_SrinSubDoc1", ThisKey="EmpID", OtherKey="Taker")]
		public EntitySet<SrinSubDoc> SrinSubDoc1
		{
			get
			{
				return this._SrinSubDoc1;
			}
			set
			{
				this._SrinSubDoc1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinVerifyTransfer", Storage="_SrinVerifyTransfer", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinVerifyTransfer> SrinVerifyTransfer
		{
			get
			{
				return this._SrinVerifyTransfer;
			}
			set
			{
				this._SrinVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinWriteOffDetails", Storage="_SrinWriteOffDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<SrinWriteOffDetails> SrinWriteOffDetails
		{
			get
			{
				return this._SrinWriteOffDetails;
			}
			set
			{
				this._SrinWriteOffDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockOnline", Storage="_StockOnline", ThisKey="EmpID", OtherKey="AssetsManager")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockOnline1", Storage="_StockOnline1", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StockOnline> StockOnline1
		{
			get
			{
				return this._StockOnline1;
			}
			set
			{
				this._StockOnline1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockOnline2", Storage="_StockOnline2", ThisKey="EmpID", OtherKey="MaterialsManager")]
		public EntitySet<StockOnline> StockOnline2
		{
			get
			{
				return this._StockOnline2;
			}
			set
			{
				this._StockOnline2.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockTransfer", Storage="_StockTransfer", ThisKey="EmpID", OtherKey="Creater")]
		public EntitySet<StockTransfer> StockTransfer
		{
			get
			{
				return this._StockTransfer;
			}
			set
			{
				this._StockTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask", Storage="_StockTransferTask", ThisKey="EmpID", OtherKey="TaskCreaterID")]
		public EntitySet<StockTransferTask> StockTransferTask
		{
			get
			{
				return this._StockTransferTask;
			}
			set
			{
				this._StockTransferTask.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask1", Storage="_StockTransferTask1", ThisKey="EmpID", OtherKey="TaskTargetID")]
		public EntitySet<StockTransferTask> StockTransferTask1
		{
			get
			{
				return this._StockTransferTask1;
			}
			set
			{
				this._StockTransferTask1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutAssetAudit", Storage="_StorageCommitOutAssetAudit", ThisKey="EmpID", OtherKey="AssetChief")]
		public EntitySet<StorageCommitOutAssetAudit> StorageCommitOutAssetAudit
		{
			get
			{
				return this._StorageCommitOutAssetAudit;
			}
			set
			{
				this._StorageCommitOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutDetails", Storage="_StorageCommitOutDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageCommitOutDetails> StorageCommitOutDetails
		{
			get
			{
				return this._StorageCommitOutDetails;
			}
			set
			{
				this._StorageCommitOutDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutDirectorConfirm", Storage="_StorageCommitOutDirectorConfirm", ThisKey="EmpID", OtherKey="Director")]
		public EntitySet<StorageCommitOutDirectorConfirm> StorageCommitOutDirectorConfirm
		{
			get
			{
				return this._StorageCommitOutDirectorConfirm;
			}
			set
			{
				this._StorageCommitOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutNotice", Storage="_StorageCommitOutNotice", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageCommitOutNotice> StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice;
			}
			set
			{
				this._StorageCommitOutNotice.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutProduceAudit", Storage="_StorageCommitOutProduceAudit", ThisKey="EmpID", OtherKey="ProduceChief")]
		public EntitySet<StorageCommitOutProduceAudit> StorageCommitOutProduceAudit
		{
			get
			{
				return this._StorageCommitOutProduceAudit;
			}
			set
			{
				this._StorageCommitOutProduceAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutRealDetails", Storage="_StorageCommitOutRealDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageCommitOutRealDetails> StorageCommitOutRealDetails
		{
			get
			{
				return this._StorageCommitOutRealDetails;
			}
			set
			{
				this._StorageCommitOutRealDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageDirector", Storage="_StorageDirector", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageDirector> StorageDirector
		{
			get
			{
				return this._StorageDirector;
			}
			set
			{
				this._StorageDirector.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInAssets", Storage="_StorageInAssets", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageInAssets> StorageInAssets
		{
			get
			{
				return this._StorageInAssets;
			}
			set
			{
				this._StorageInAssets.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInfo", Storage="_StorageInfo", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<StorageInfo> StorageInfo
		{
			get
			{
				return this._StorageInfo;
			}
			set
			{
				this._StorageInfo.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInHead", Storage="_StorageInHead", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageInHead> StorageInHead
		{
			get
			{
				return this._StorageInHead;
			}
			set
			{
				this._StorageInHead.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInMain", Storage="_StorageInMain", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageInMain> StorageInMain
		{
			get
			{
				return this._StorageInMain;
			}
			set
			{
				this._StorageInMain.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInMaterials", Storage="_StorageInMaterials", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageInMaterials> StorageInMaterials
		{
			get
			{
				return this._StorageInMaterials;
			}
			set
			{
				this._StorageInMaterials.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInMaterialsLeader", Storage="_StorageInMaterialsLeader", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageInMaterialsLeader> StorageInMaterialsLeader
		{
			get
			{
				return this._StorageInMaterialsLeader;
			}
			set
			{
				this._StorageInMaterialsLeader.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInTest", Storage="_StorageInTest", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageInTest> StorageInTest
		{
			get
			{
				return this._StorageInTest;
			}
			set
			{
				this._StorageInTest.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutAssetAudit", Storage="_StorageOutAssetAudit", ThisKey="EmpID", OtherKey="AssetChief")]
		public EntitySet<StorageOutAssetAudit> StorageOutAssetAudit
		{
			get
			{
				return this._StorageOutAssetAudit;
			}
			set
			{
				this._StorageOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutDetails", Storage="_StorageOutDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageOutDetails> StorageOutDetails
		{
			get
			{
				return this._StorageOutDetails;
			}
			set
			{
				this._StorageOutDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutDirectorConfirm", Storage="_StorageOutDirectorConfirm", ThisKey="EmpID", OtherKey="Director")]
		public EntitySet<StorageOutDirectorConfirm> StorageOutDirectorConfirm
		{
			get
			{
				return this._StorageOutDirectorConfirm;
			}
			set
			{
				this._StorageOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutNotice", Storage="_StorageOutNotice", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageOutNotice> StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice;
			}
			set
			{
				this._StorageOutNotice.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutProduceAudit", Storage="_StorageOutProduceAudit", ThisKey="EmpID", OtherKey="ProduceChief")]
		public EntitySet<StorageOutProduceAudit> StorageOutProduceAudit
		{
			get
			{
				return this._StorageOutProduceAudit;
			}
			set
			{
				this._StorageOutProduceAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutRealDetails", Storage="_StorageOutRealDetails", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageOutRealDetails> StorageOutRealDetails
		{
			get
			{
				return this._StorageOutRealDetails;
			}
			set
			{
				this._StorageOutRealDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask", Storage="_StorageOutTask", ThisKey="EmpID", OtherKey="TaskCreaterID")]
		public EntitySet<StorageOutTask> StorageOutTask
		{
			get
			{
				return this._StorageOutTask;
			}
			set
			{
				this._StorageOutTask.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask1", Storage="_StorageOutTask1", ThisKey="EmpID", OtherKey="TaskTargetID")]
		public EntitySet<StorageOutTask> StorageOutTask1
		{
			get
			{
				return this._StorageOutTask1;
			}
			set
			{
				this._StorageOutTask1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageProduce", Storage="_StorageProduce", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<StorageProduce> StorageProduce
		{
			get
			{
				return this._StorageProduce;
			}
			set
			{
				this._StorageProduce.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TableOfStocks", Storage="_TableOfStocks", ThisKey="EmpID", OtherKey="AssetsManager")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TableOfStocks1", Storage="_TableOfStocks1", ThisKey="EmpID", OtherKey="Creator")]
		public EntitySet<TableOfStocks> TableOfStocks1
		{
			get
			{
				return this._TableOfStocks1;
			}
			set
			{
				this._TableOfStocks1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TableOfStocks2", Storage="_TableOfStocks2", ThisKey="EmpID", OtherKey="MaterialsManager")]
		public EntitySet<TableOfStocks> TableOfStocks2
		{
			get
			{
				return this._TableOfStocks2;
			}
			set
			{
				this._TableOfStocks2.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskProxy", Storage="_TaskProxy", ThisKey="EmpID", OtherKey="ProxyPrincipal")]
		public EntitySet<TaskProxy> TaskProxy
		{
			get
			{
				return this._TaskProxy;
			}
			set
			{
				this._TaskProxy.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskProxy1", Storage="_TaskProxy1", ThisKey="EmpID", OtherKey="ProxyFiduciary")]
		public EntitySet<TaskProxy> TaskProxy1
		{
			get
			{
				return this._TaskProxy1;
			}
			set
			{
				this._TaskProxy1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn", Storage="_TaskStorageIn", ThisKey="EmpID", OtherKey="TaskCreaterID")]
		public EntitySet<TaskStorageIn> TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn;
			}
			set
			{
				this._TaskStorageIn.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn1", Storage="_TaskStorageIn1", ThisKey="EmpID", OtherKey="TaskTargetID")]
		public EntitySet<TaskStorageIn> TaskStorageIn1
		{
			get
			{
				return this._TaskStorageIn1;
			}
			set
			{
				this._TaskStorageIn1.Assign(value);
			}
		}
		
		[Association(Name="DepInfo_EmpInfo", Storage="_DepInfo", ThisKey="DepID", OtherKey="DepID", IsForeignKey=true)]
		public DepInfo DepInfo
		{
			get
			{
				return this._DepInfo.Entity;
			}
			set
			{
				DepInfo previousValue = this._DepInfo.Entity;
				if (((previousValue != value) 
							|| (this._DepInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepInfo.Entity = null;
						previousValue.EmpInfo.Remove(this);
					}
					this._DepInfo.Entity = value;
					if ((value != null))
					{
						value.EmpInfo.Add(this);
						this._DepID = value.DepID;
					}
					else
					{
						this._DepID = default(int);
					}
					this.SendPropertyChanged("DepInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitDirector(CommitDirector entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitDirector(CommitDirector entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInAssets(CommitInAssets entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInAssets(CommitInAssets entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInAudited1(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_CommitInAudited1(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_CommitInAudited2(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo2 = this;
		}
		
		private void detach_CommitInAudited2(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo2 = null;
		}
		
		private void attach_CommitInAudited3(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo3 = this;
		}
		
		private void detach_CommitInAudited3(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo3 = null;
		}
		
		private void attach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInDetailed1(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_CommitInDetailed1(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_CommitInHead(CommitInHead entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInHead(CommitInHead entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInMain(CommitInMain entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInMain(CommitInMain entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInMaterialsLeader(CommitInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInMaterialsLeader(CommitInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitInQualified1(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_CommitInQualified1(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_CommitInTest(CommitInTest entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitInTest(CommitInTest entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_FileOfQC(FileOfQC entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_FileOfQC(FileOfQC entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_FlowDetailsOffline(FlowDetailsOffline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_FlowDetailsOffline(FlowDetailsOffline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_LogInfo(LogInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_LogInfo(LogInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_MessageInfo(MessageInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_MessageInfo(MessageInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_Scrapped(Scrapped entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_Scrapped(Scrapped entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinAccountReceiptConfirm(SrinAccountReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinAccountReceiptConfirm(SrinAccountReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinAssetReceiptConfirm(SrinAssetReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinAssetReceiptConfirm(SrinAssetReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinDetails(SrinDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinDetails(SrinDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinInspectorVerifyDetails(SrinInspectorVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinInspectorVerifyDetails(SrinInspectorVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinMaterialRepairAudit(SrinMaterialRepairAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinMaterialRepairAudit(SrinMaterialRepairAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinProduceVerifyTransfer(SrinProduceVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinProduceVerifyTransfer(SrinProduceVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinQualifiedReceipt(SrinQualifiedReceipt entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinQualifiedReceipt(SrinQualifiedReceipt entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinReceipt(SrinReceipt entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinReceipt(SrinReceipt entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinRepairPlan(SrinRepairPlan entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinRepairPlan(SrinRepairPlan entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinRepairReport(SrinRepairReport entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinRepairReport(SrinRepairReport entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinStocktaking(SrinStocktaking entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinStocktaking(SrinStocktaking entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinStocktakingConfirm(SrinStocktakingConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinStocktakingConfirm(SrinStocktakingConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinSubDetails(SrinSubDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinSubDetails(SrinSubDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinSubDoc(SrinSubDoc entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinSubDoc(SrinSubDoc entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinSubDoc1(SrinSubDoc entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_SrinSubDoc1(SrinSubDoc entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_SrinVerifyTransfer(SrinVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinVerifyTransfer(SrinVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StockOnline1(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_StockOnline1(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_StockOnline2(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo2 = this;
		}
		
		private void detach_StockOnline2(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo2 = null;
		}
		
		private void attach_StockTransfer(StockTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StockTransfer(StockTransfer entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StockTransferTask(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StockTransferTask(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StockTransferTask1(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_StockTransferTask1(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageCommitOutDetails(StorageCommitOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageCommitOutDetails(StorageCommitOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageCommitOutNotice(StorageCommitOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageCommitOutNotice(StorageCommitOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageCommitOutProduceAudit(StorageCommitOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageCommitOutProduceAudit(StorageCommitOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageCommitOutRealDetails(StorageCommitOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageCommitOutRealDetails(StorageCommitOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageDirector(StorageDirector entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageDirector(StorageDirector entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInAssets(StorageInAssets entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInAssets(StorageInAssets entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInfo(StorageInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInfo(StorageInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInHead(StorageInHead entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInHead(StorageInHead entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInMain(StorageInMain entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInMain(StorageInMain entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInMaterialsLeader(StorageInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInMaterialsLeader(StorageInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageInTest(StorageInTest entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageInTest(StorageInTest entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutDetails(StorageOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutDetails(StorageOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutNotice(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutNotice(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutProduceAudit(StorageOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutProduceAudit(StorageOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutRealDetails(StorageOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutRealDetails(StorageOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutTask(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutTask(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutTask1(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_StorageOutTask1(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_TableOfStocks1(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_TableOfStocks1(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_TableOfStocks2(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo2 = this;
		}
		
		private void detach_TableOfStocks2(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo2 = null;
		}
		
		private void attach_TaskProxy(TaskProxy entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_TaskProxy(TaskProxy entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_TaskProxy1(TaskProxy entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_TaskProxy1(TaskProxy entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_TaskStorageIn(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_TaskStorageIn(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_TaskStorageIn1(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_TaskStorageIn1(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
	}
	
	[Table(Name="dbo.FileOfQC")]
	public partial class FileOfQC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileID;
		
		private string _NameOfFile;
		
		private System.Data.Linq.Binary _FileContent;
		
		private string _FileSize;
		
		private System.DateTime _FileCreateTime;
		
		private System.Nullable<int> _FileCreateEmp;
		
		private string _Filed1;
		
		private string _Filed2;
		
		private string _Filed3;
		
		private string _Filed4;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnNameOfFileChanging(string value);
    partial void OnNameOfFileChanged();
    partial void OnFileContentChanging(System.Data.Linq.Binary value);
    partial void OnFileContentChanged();
    partial void OnFileSizeChanging(string value);
    partial void OnFileSizeChanged();
    partial void OnFileCreateTimeChanging(System.DateTime value);
    partial void OnFileCreateTimeChanged();
    partial void OnFileCreateEmpChanging(System.Nullable<int> value);
    partial void OnFileCreateEmpChanged();
    partial void OnFiled1Changing(string value);
    partial void OnFiled1Changed();
    partial void OnFiled2Changing(string value);
    partial void OnFiled2Changed();
    partial void OnFiled3Changing(string value);
    partial void OnFiled3Changed();
    partial void OnFiled4Changing(string value);
    partial void OnFiled4Changed();
    #endregion
		
		public FileOfQC()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_NameOfFile", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NameOfFile
		{
			get
			{
				return this._NameOfFile;
			}
			set
			{
				if ((this._NameOfFile != value))
				{
					this.OnNameOfFileChanging(value);
					this.SendPropertyChanging();
					this._NameOfFile = value;
					this.SendPropertyChanged("NameOfFile");
					this.OnNameOfFileChanged();
				}
			}
		}
		
		[Column(Storage="_FileContent", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FileContent
		{
			get
			{
				return this._FileContent;
			}
			set
			{
				if ((this._FileContent != value))
				{
					this.OnFileContentChanging(value);
					this.SendPropertyChanging();
					this._FileContent = value;
					this.SendPropertyChanged("FileContent");
					this.OnFileContentChanged();
				}
			}
		}
		
		[Column(Storage="_FileSize", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FileCreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime FileCreateTime
		{
			get
			{
				return this._FileCreateTime;
			}
			set
			{
				if ((this._FileCreateTime != value))
				{
					this.OnFileCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._FileCreateTime = value;
					this.SendPropertyChanged("FileCreateTime");
					this.OnFileCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_FileCreateEmp", DbType="Int")]
		public System.Nullable<int> FileCreateEmp
		{
			get
			{
				return this._FileCreateEmp;
			}
			set
			{
				if ((this._FileCreateEmp != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileCreateEmpChanging(value);
					this.SendPropertyChanging();
					this._FileCreateEmp = value;
					this.SendPropertyChanged("FileCreateEmp");
					this.OnFileCreateEmpChanged();
				}
			}
		}
		
		[Column(Storage="_Filed1", DbType="NVarChar(80)")]
		public string Filed1
		{
			get
			{
				return this._Filed1;
			}
			set
			{
				if ((this._Filed1 != value))
				{
					this.OnFiled1Changing(value);
					this.SendPropertyChanging();
					this._Filed1 = value;
					this.SendPropertyChanged("Filed1");
					this.OnFiled1Changed();
				}
			}
		}
		
		[Column(Storage="_Filed2", DbType="NVarChar(80)")]
		public string Filed2
		{
			get
			{
				return this._Filed2;
			}
			set
			{
				if ((this._Filed2 != value))
				{
					this.OnFiled2Changing(value);
					this.SendPropertyChanging();
					this._Filed2 = value;
					this.SendPropertyChanged("Filed2");
					this.OnFiled2Changed();
				}
			}
		}
		
		[Column(Storage="_Filed3", DbType="NVarChar(80)")]
		public string Filed3
		{
			get
			{
				return this._Filed3;
			}
			set
			{
				if ((this._Filed3 != value))
				{
					this.OnFiled3Changing(value);
					this.SendPropertyChanging();
					this._Filed3 = value;
					this.SendPropertyChanged("Filed3");
					this.OnFiled3Changed();
				}
			}
		}
		
		[Column(Storage="_Filed4", DbType="NVarChar(80)")]
		public string Filed4
		{
			get
			{
				return this._Filed4;
			}
			set
			{
				if ((this._Filed4 != value))
				{
					this.OnFiled4Changing(value);
					this.SendPropertyChanging();
					this._Filed4 = value;
					this.SendPropertyChanged("Filed4");
					this.OnFiled4Changed();
				}
			}
		}
		
		[Association(Name="EmpInfo_FileOfQC", Storage="_EmpInfo", ThisKey="FileCreateEmp", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.FileOfQC.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.FileOfQC.Add(this);
						this._FileCreateEmp = value.EmpID;
					}
					else
					{
						this._FileCreateEmp = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FlowDetailsOffline")]
	public partial class FlowDetailsOffline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlowDetailsID;
		
		private int _TableOfStocksID;
		
		private string _StorageType;
		
		private string _StorageOutCode;
		
		private int _StorageOutProject;
		
		private string _CurUnit;
		
		private decimal _RealGentaojian;
		
		private decimal _RealMetre;
		
		private decimal _RealTon;
		
		private decimal _CurQuantity;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<TableOfStocks> _TableOfStocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlowDetailsIDChanging(int value);
    partial void OnFlowDetailsIDChanged();
    partial void OnTableOfStocksIDChanging(int value);
    partial void OnTableOfStocksIDChanged();
    partial void OnStorageTypeChanging(string value);
    partial void OnStorageTypeChanged();
    partial void OnStorageOutCodeChanging(string value);
    partial void OnStorageOutCodeChanged();
    partial void OnStorageOutProjectChanging(int value);
    partial void OnStorageOutProjectChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnRealGentaojianChanging(decimal value);
    partial void OnRealGentaojianChanged();
    partial void OnRealMetreChanging(decimal value);
    partial void OnRealMetreChanged();
    partial void OnRealTonChanging(decimal value);
    partial void OnRealTonChanged();
    partial void OnCurQuantityChanging(decimal value);
    partial void OnCurQuantityChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public FlowDetailsOffline()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._TableOfStocks = default(EntityRef<TableOfStocks>);
			OnCreated();
		}
		
		[Column(Storage="_FlowDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FlowDetailsID
		{
			get
			{
				return this._FlowDetailsID;
			}
			set
			{
				if ((this._FlowDetailsID != value))
				{
					this.OnFlowDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._FlowDetailsID = value;
					this.SendPropertyChanged("FlowDetailsID");
					this.OnFlowDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_TableOfStocksID", DbType="Int NOT NULL")]
		public int TableOfStocksID
		{
			get
			{
				return this._TableOfStocksID;
			}
			set
			{
				if ((this._TableOfStocksID != value))
				{
					if (this._TableOfStocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableOfStocksIDChanging(value);
					this.SendPropertyChanging();
					this._TableOfStocksID = value;
					this.SendPropertyChanged("TableOfStocksID");
					this.OnTableOfStocksIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageType", DbType="NVarChar(50)")]
		public string StorageType
		{
			get
			{
				return this._StorageType;
			}
			set
			{
				if ((this._StorageType != value))
				{
					this.OnStorageTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageType = value;
					this.SendPropertyChanged("StorageType");
					this.OnStorageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageOutCode
		{
			get
			{
				return this._StorageOutCode;
			}
			set
			{
				if ((this._StorageOutCode != value))
				{
					this.OnStorageOutCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageOutCode = value;
					this.SendPropertyChanged("StorageOutCode");
					this.OnStorageOutCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutProject", DbType="Int NOT NULL")]
		public int StorageOutProject
		{
			get
			{
				return this._StorageOutProject;
			}
			set
			{
				if ((this._StorageOutProject != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutProjectChanging(value);
					this.SendPropertyChanging();
					this._StorageOutProject = value;
					this.SendPropertyChanged("StorageOutProject");
					this.OnStorageOutProjectChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this.OnRealGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RealGentaojian = value;
					this.SendPropertyChanged("RealGentaojian");
					this.OnRealGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this.OnRealMetreChanging(value);
					this.SendPropertyChanging();
					this._RealMetre = value;
					this.SendPropertyChanged("RealMetre");
					this.OnRealMetreChanged();
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this.OnRealTonChanging(value);
					this.SendPropertyChanging();
					this._RealTon = value;
					this.SendPropertyChanged("RealTon");
					this.OnRealTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurQuantity", DbType="Decimal(18,2) NOT NULL")]
		public decimal CurQuantity
		{
			get
			{
				return this._CurQuantity;
			}
			set
			{
				if ((this._CurQuantity != value))
				{
					this.OnCurQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurQuantity = value;
					this.SendPropertyChanged("CurQuantity");
					this.OnCurQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_FlowDetailsOffline", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.FlowDetailsOffline.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.FlowDetailsOffline.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_FlowDetailsOffline", Storage="_ProjectInfo", ThisKey="StorageOutProject", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.FlowDetailsOffline.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.FlowDetailsOffline.Add(this);
						this._StorageOutProject = value.ProjectID;
					}
					else
					{
						this._StorageOutProject = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="TableOfStocks_FlowDetailsOffline", Storage="_TableOfStocks", ThisKey="TableOfStocksID", OtherKey="StocksID", IsForeignKey=true)]
		public TableOfStocks TableOfStocks
		{
			get
			{
				return this._TableOfStocks.Entity;
			}
			set
			{
				TableOfStocks previousValue = this._TableOfStocks.Entity;
				if (((previousValue != value) 
							|| (this._TableOfStocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableOfStocks.Entity = null;
						previousValue.FlowDetailsOffline.Remove(this);
					}
					this._TableOfStocks.Entity = value;
					if ((value != null))
					{
						value.FlowDetailsOffline.Add(this);
						this._TableOfStocksID = value.StocksID;
					}
					else
					{
						this._TableOfStocksID = default(int);
					}
					this.SendPropertyChanged("TableOfStocks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LogInfo")]
	public partial class LogInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private string _LogType;
		
		private string _LogMessage;
		
		private string _LogSource;
		
		private int _LogUser;
		
		private System.DateTime _LogDateTime;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    partial void OnLogMessageChanging(string value);
    partial void OnLogMessageChanged();
    partial void OnLogSourceChanging(string value);
    partial void OnLogSourceChanged();
    partial void OnLogUserChanging(int value);
    partial void OnLogUserChanged();
    partial void OnLogDateTimeChanging(System.DateTime value);
    partial void OnLogDateTimeChanged();
    #endregion
		
		public LogInfo()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LogMessage", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LogMessage
		{
			get
			{
				return this._LogMessage;
			}
			set
			{
				if ((this._LogMessage != value))
				{
					this.OnLogMessageChanging(value);
					this.SendPropertyChanging();
					this._LogMessage = value;
					this.SendPropertyChanged("LogMessage");
					this.OnLogMessageChanged();
				}
			}
		}
		
		[Column(Storage="_LogSource", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LogSource
		{
			get
			{
				return this._LogSource;
			}
			set
			{
				if ((this._LogSource != value))
				{
					this.OnLogSourceChanging(value);
					this.SendPropertyChanging();
					this._LogSource = value;
					this.SendPropertyChanged("LogSource");
					this.OnLogSourceChanged();
				}
			}
		}
		
		[Column(Storage="_LogUser", DbType="Int NOT NULL")]
		public int LogUser
		{
			get
			{
				return this._LogUser;
			}
			set
			{
				if ((this._LogUser != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogUserChanging(value);
					this.SendPropertyChanging();
					this._LogUser = value;
					this.SendPropertyChanged("LogUser");
					this.OnLogUserChanged();
				}
			}
		}
		
		[Column(Storage="_LogDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogDateTime
		{
			get
			{
				return this._LogDateTime;
			}
			set
			{
				if ((this._LogDateTime != value))
				{
					this.OnLogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LogDateTime = value;
					this.SendPropertyChanged("LogDateTime");
					this.OnLogDateTimeChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_LogInfo", Storage="_EmpInfo", ThisKey="LogUser", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.LogInfo.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.LogInfo.Add(this);
						this._LogUser = value.EmpID;
					}
					else
					{
						this._LogUser = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Manufacturer")]
	public partial class Manufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManufacturerID;
		
		private string _ManufacturerName;
		
		private string _ManufacturerCode;
		
		private int _ManufacturerTypeID;
		
		private string _ManufacturerAddress1;
		
		private string _ManufacturerAddress2;
		
		private string _ManufacturerPhone;
		
		private string _principal;
		
		private string _Remark;
		
		private EntitySet<AwaitScrap> _AwaitScrap;
		
		private EntitySet<CommitInMaterials> _CommitInMaterials;
		
		private EntitySet<QualifiedStocks> _QualifiedStocks;
		
		private EntitySet<SrinAssetQualifiedDetails> _SrinAssetQualifiedDetails;
		
		private EntitySet<SrinMaterialRepairDetails> _SrinMaterialRepairDetails;
		
		private EntitySet<SrinMaterialVerifyDetails> _SrinMaterialVerifyDetails;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<StorageInMaterials> _StorageInMaterials;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntityRef<ManufacturerType> _ManufacturerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnManufacturerNameChanging(string value);
    partial void OnManufacturerNameChanged();
    partial void OnManufacturerCodeChanging(string value);
    partial void OnManufacturerCodeChanged();
    partial void OnManufacturerTypeIDChanging(int value);
    partial void OnManufacturerTypeIDChanged();
    partial void OnManufacturerAddress1Changing(string value);
    partial void OnManufacturerAddress1Changed();
    partial void OnManufacturerAddress2Changing(string value);
    partial void OnManufacturerAddress2Changed();
    partial void OnManufacturerPhoneChanging(string value);
    partial void OnManufacturerPhoneChanged();
    partial void OnprincipalChanging(string value);
    partial void OnprincipalChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public Manufacturer()
		{
			this._AwaitScrap = new EntitySet<AwaitScrap>(new Action<AwaitScrap>(this.attach_AwaitScrap), new Action<AwaitScrap>(this.detach_AwaitScrap));
			this._CommitInMaterials = new EntitySet<CommitInMaterials>(new Action<CommitInMaterials>(this.attach_CommitInMaterials), new Action<CommitInMaterials>(this.detach_CommitInMaterials));
			this._QualifiedStocks = new EntitySet<QualifiedStocks>(new Action<QualifiedStocks>(this.attach_QualifiedStocks), new Action<QualifiedStocks>(this.detach_QualifiedStocks));
			this._SrinAssetQualifiedDetails = new EntitySet<SrinAssetQualifiedDetails>(new Action<SrinAssetQualifiedDetails>(this.attach_SrinAssetQualifiedDetails), new Action<SrinAssetQualifiedDetails>(this.detach_SrinAssetQualifiedDetails));
			this._SrinMaterialRepairDetails = new EntitySet<SrinMaterialRepairDetails>(new Action<SrinMaterialRepairDetails>(this.attach_SrinMaterialRepairDetails), new Action<SrinMaterialRepairDetails>(this.detach_SrinMaterialRepairDetails));
			this._SrinMaterialVerifyDetails = new EntitySet<SrinMaterialVerifyDetails>(new Action<SrinMaterialVerifyDetails>(this.attach_SrinMaterialVerifyDetails), new Action<SrinMaterialVerifyDetails>(this.detach_SrinMaterialVerifyDetails));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._StorageInMaterials = new EntitySet<StorageInMaterials>(new Action<StorageInMaterials>(this.attach_StorageInMaterials), new Action<StorageInMaterials>(this.detach_StorageInMaterials));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._ManufacturerType = default(EntityRef<ManufacturerType>);
			OnCreated();
		}
		
		[Column(Storage="_ManufacturerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this.OnManufacturerNameChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerName = value;
					this.SendPropertyChanged("ManufacturerName");
					this.OnManufacturerNameChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerCode
		{
			get
			{
				return this._ManufacturerCode;
			}
			set
			{
				if ((this._ManufacturerCode != value))
				{
					this.OnManufacturerCodeChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerCode = value;
					this.SendPropertyChanged("ManufacturerCode");
					this.OnManufacturerCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerTypeID", DbType="Int NOT NULL")]
		public int ManufacturerTypeID
		{
			get
			{
				return this._ManufacturerTypeID;
			}
			set
			{
				if ((this._ManufacturerTypeID != value))
				{
					if (this._ManufacturerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerTypeID = value;
					this.SendPropertyChanged("ManufacturerTypeID");
					this.OnManufacturerTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerAddress1", DbType="NVarChar(200)")]
		public string ManufacturerAddress1
		{
			get
			{
				return this._ManufacturerAddress1;
			}
			set
			{
				if ((this._ManufacturerAddress1 != value))
				{
					this.OnManufacturerAddress1Changing(value);
					this.SendPropertyChanging();
					this._ManufacturerAddress1 = value;
					this.SendPropertyChanged("ManufacturerAddress1");
					this.OnManufacturerAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_ManufacturerAddress2", DbType="NVarChar(200)")]
		public string ManufacturerAddress2
		{
			get
			{
				return this._ManufacturerAddress2;
			}
			set
			{
				if ((this._ManufacturerAddress2 != value))
				{
					this.OnManufacturerAddress2Changing(value);
					this.SendPropertyChanging();
					this._ManufacturerAddress2 = value;
					this.SendPropertyChanged("ManufacturerAddress2");
					this.OnManufacturerAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_ManufacturerPhone", DbType="NVarChar(50)")]
		public string ManufacturerPhone
		{
			get
			{
				return this._ManufacturerPhone;
			}
			set
			{
				if ((this._ManufacturerPhone != value))
				{
					this.OnManufacturerPhoneChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerPhone = value;
					this.SendPropertyChanged("ManufacturerPhone");
					this.OnManufacturerPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_principal", DbType="NVarChar(50)")]
		public string principal
		{
			get
			{
				return this._principal;
			}
			set
			{
				if ((this._principal != value))
				{
					this.OnprincipalChanging(value);
					this.SendPropertyChanging();
					this._principal = value;
					this.SendPropertyChanged("principal");
					this.OnprincipalChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="Manufacturer_AwaitScrap", Storage="_AwaitScrap", ThisKey="ManufacturerID", OtherKey="ManufactureID")]
		public EntitySet<AwaitScrap> AwaitScrap
		{
			get
			{
				return this._AwaitScrap;
			}
			set
			{
				this._AwaitScrap.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_CommitInMaterials", Storage="_CommitInMaterials", ThisKey="ManufacturerID", OtherKey="ManufacturerID")]
		public EntitySet<CommitInMaterials> CommitInMaterials
		{
			get
			{
				return this._CommitInMaterials;
			}
			set
			{
				this._CommitInMaterials.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_QualifiedStocks", Storage="_QualifiedStocks", ThisKey="ManufacturerID", OtherKey="ManufactureID")]
		public EntitySet<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this._QualifiedStocks;
			}
			set
			{
				this._QualifiedStocks.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_SrinAssetQualifiedDetails", Storage="_SrinAssetQualifiedDetails", ThisKey="ManufacturerID", OtherKey="ManufactureID")]
		public EntitySet<SrinAssetQualifiedDetails> SrinAssetQualifiedDetails
		{
			get
			{
				return this._SrinAssetQualifiedDetails;
			}
			set
			{
				this._SrinAssetQualifiedDetails.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_SrinMaterialRepairDetails", Storage="_SrinMaterialRepairDetails", ThisKey="ManufacturerID", OtherKey="ManufactureID")]
		public EntitySet<SrinMaterialRepairDetails> SrinMaterialRepairDetails
		{
			get
			{
				return this._SrinMaterialRepairDetails;
			}
			set
			{
				this._SrinMaterialRepairDetails.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_SrinMaterialVerifyDetails", Storage="_SrinMaterialVerifyDetails", ThisKey="ManufacturerID", OtherKey="ManufactureID")]
		public EntitySet<SrinMaterialVerifyDetails> SrinMaterialVerifyDetails
		{
			get
			{
				return this._SrinMaterialVerifyDetails;
			}
			set
			{
				this._SrinMaterialVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_StockOnline", Storage="_StockOnline", ThisKey="ManufacturerID", OtherKey="ManufacturerID")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_StorageInMaterials", Storage="_StorageInMaterials", ThisKey="ManufacturerID", OtherKey="ManufacturerID")]
		public EntitySet<StorageInMaterials> StorageInMaterials
		{
			get
			{
				return this._StorageInMaterials;
			}
			set
			{
				this._StorageInMaterials.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_TableOfStocks", Storage="_TableOfStocks", ThisKey="ManufacturerID", OtherKey="ManufacturerID")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="ManufacturerType_Manufacturer", Storage="_ManufacturerType", ThisKey="ManufacturerTypeID", OtherKey="ManufacturerTypeID", IsForeignKey=true)]
		public ManufacturerType ManufacturerType
		{
			get
			{
				return this._ManufacturerType.Entity;
			}
			set
			{
				ManufacturerType previousValue = this._ManufacturerType.Entity;
				if (((previousValue != value) 
							|| (this._ManufacturerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManufacturerType.Entity = null;
						previousValue.Manufacturer.Remove(this);
					}
					this._ManufacturerType.Entity = value;
					if ((value != null))
					{
						value.Manufacturer.Add(this);
						this._ManufacturerTypeID = value.ManufacturerTypeID;
					}
					else
					{
						this._ManufacturerTypeID = default(int);
					}
					this.SendPropertyChanged("ManufacturerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
	}
	
	[Table(Name="dbo.ManufacturerType")]
	public partial class ManufacturerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManufacturerTypeID;
		
		private string _ManufacturerTypeName;
		
		private string _ManufacturerTypeCode;
		
		private string _Remark;
		
		private EntitySet<Manufacturer> _Manufacturer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerTypeIDChanging(int value);
    partial void OnManufacturerTypeIDChanged();
    partial void OnManufacturerTypeNameChanging(string value);
    partial void OnManufacturerTypeNameChanged();
    partial void OnManufacturerTypeCodeChanging(string value);
    partial void OnManufacturerTypeCodeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public ManufacturerType()
		{
			this._Manufacturer = new EntitySet<Manufacturer>(new Action<Manufacturer>(this.attach_Manufacturer), new Action<Manufacturer>(this.detach_Manufacturer));
			OnCreated();
		}
		
		[Column(Storage="_ManufacturerTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManufacturerTypeID
		{
			get
			{
				return this._ManufacturerTypeID;
			}
			set
			{
				if ((this._ManufacturerTypeID != value))
				{
					this.OnManufacturerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerTypeID = value;
					this.SendPropertyChanged("ManufacturerTypeID");
					this.OnManufacturerTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerTypeName
		{
			get
			{
				return this._ManufacturerTypeName;
			}
			set
			{
				if ((this._ManufacturerTypeName != value))
				{
					this.OnManufacturerTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerTypeName = value;
					this.SendPropertyChanged("ManufacturerTypeName");
					this.OnManufacturerTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerTypeCode
		{
			get
			{
				return this._ManufacturerTypeCode;
			}
			set
			{
				if ((this._ManufacturerTypeCode != value))
				{
					this.OnManufacturerTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerTypeCode = value;
					this.SendPropertyChanged("ManufacturerTypeCode");
					this.OnManufacturerTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="ManufacturerType_Manufacturer", Storage="_Manufacturer", ThisKey="ManufacturerTypeID", OtherKey="ManufacturerTypeID")]
		public EntitySet<Manufacturer> Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				this._Manufacturer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Manufacturer(Manufacturer entity)
		{
			this.SendPropertyChanging();
			entity.ManufacturerType = this;
		}
		
		private void detach_Manufacturer(Manufacturer entity)
		{
			this.SendPropertyChanging();
			entity.ManufacturerType = null;
		}
	}
	
	[Table(Name="dbo.MaterialChildType")]
	public partial class MaterialChildType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialChildTypeID;
		
		private string _MaterialChildTypeName;
		
		private string _MaterialChildTypeCode;
		
		private int _MaterialMainTypeID;
		
		private EntitySet<MaterialInfo> _MaterialInfo;
		
		private EntityRef<MaterialMainType> _MaterialMainType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialChildTypeIDChanging(int value);
    partial void OnMaterialChildTypeIDChanged();
    partial void OnMaterialChildTypeNameChanging(string value);
    partial void OnMaterialChildTypeNameChanged();
    partial void OnMaterialChildTypeCodeChanging(string value);
    partial void OnMaterialChildTypeCodeChanged();
    partial void OnMaterialMainTypeIDChanging(int value);
    partial void OnMaterialMainTypeIDChanged();
    #endregion
		
		public MaterialChildType()
		{
			this._MaterialInfo = new EntitySet<MaterialInfo>(new Action<MaterialInfo>(this.attach_MaterialInfo), new Action<MaterialInfo>(this.detach_MaterialInfo));
			this._MaterialMainType = default(EntityRef<MaterialMainType>);
			OnCreated();
		}
		
		[Column(Storage="_MaterialChildTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialChildTypeID
		{
			get
			{
				return this._MaterialChildTypeID;
			}
			set
			{
				if ((this._MaterialChildTypeID != value))
				{
					this.OnMaterialChildTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialChildTypeID = value;
					this.SendPropertyChanged("MaterialChildTypeID");
					this.OnMaterialChildTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialChildTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialChildTypeName
		{
			get
			{
				return this._MaterialChildTypeName;
			}
			set
			{
				if ((this._MaterialChildTypeName != value))
				{
					this.OnMaterialChildTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialChildTypeName = value;
					this.SendPropertyChanged("MaterialChildTypeName");
					this.OnMaterialChildTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialChildTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialChildTypeCode
		{
			get
			{
				return this._MaterialChildTypeCode;
			}
			set
			{
				if ((this._MaterialChildTypeCode != value))
				{
					this.OnMaterialChildTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialChildTypeCode = value;
					this.SendPropertyChanged("MaterialChildTypeCode");
					this.OnMaterialChildTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialMainTypeID", DbType="Int NOT NULL")]
		public int MaterialMainTypeID
		{
			get
			{
				return this._MaterialMainTypeID;
			}
			set
			{
				if ((this._MaterialMainTypeID != value))
				{
					if (this._MaterialMainType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialMainTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialMainTypeID = value;
					this.SendPropertyChanged("MaterialMainTypeID");
					this.OnMaterialMainTypeIDChanged();
				}
			}
		}
		
		[Association(Name="MaterialChildType_MaterialInfo", Storage="_MaterialInfo", ThisKey="MaterialChildTypeID", OtherKey="MaterialchildTypeID")]
		public EntitySet<MaterialInfo> MaterialInfo
		{
			get
			{
				return this._MaterialInfo;
			}
			set
			{
				this._MaterialInfo.Assign(value);
			}
		}
		
		[Association(Name="MaterialMainType_MaterialChildType", Storage="_MaterialMainType", ThisKey="MaterialMainTypeID", OtherKey="MaterialMainTypeID", IsForeignKey=true)]
		public MaterialMainType MaterialMainType
		{
			get
			{
				return this._MaterialMainType.Entity;
			}
			set
			{
				MaterialMainType previousValue = this._MaterialMainType.Entity;
				if (((previousValue != value) 
							|| (this._MaterialMainType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialMainType.Entity = null;
						previousValue.MaterialChildType.Remove(this);
					}
					this._MaterialMainType.Entity = value;
					if ((value != null))
					{
						value.MaterialChildType.Add(this);
						this._MaterialMainTypeID = value.MaterialMainTypeID;
					}
					else
					{
						this._MaterialMainTypeID = default(int);
					}
					this.SendPropertyChanged("MaterialMainType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MaterialInfo(MaterialInfo entity)
		{
			this.SendPropertyChanging();
			entity.MaterialChildType = this;
		}
		
		private void detach_MaterialInfo(MaterialInfo entity)
		{
			this.SendPropertyChanging();
			entity.MaterialChildType = null;
		}
	}
	
	[Table(Name="dbo.MaterialInfo")]
	public partial class MaterialInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialID;
		
		private string _FinanceCode;
		
		private string _MaterialName;
		
		private int _MaterialchildTypeID;
		
		private string _SpecificationModel;
		
		private string _Remark;
		
		private EntitySet<AwaitScrap> _AwaitScrap;
		
		private EntitySet<WarningList> _WarningList;
		
		private EntitySet<CommitInAudited> _CommitInAudited;
		
		private EntitySet<CommitInDetailed> _CommitInDetailed;
		
		private EntitySet<CommitInQualified> _CommitInQualified;
		
		private EntitySet<CommitProduce> _CommitProduce;
		
		private EntitySet<QualifiedStocks> _QualifiedStocks;
		
		private EntitySet<SrinSubDetails> _SrinSubDetails;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<StorageCommitOutDetails> _StorageCommitOutDetails;
		
		private EntitySet<StorageOutDetails> _StorageOutDetails;
		
		private EntitySet<StorageProduce> _StorageProduce;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntityRef<MaterialChildType> _MaterialChildType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnFinanceCodeChanging(string value);
    partial void OnFinanceCodeChanged();
    partial void OnMaterialNameChanging(string value);
    partial void OnMaterialNameChanged();
    partial void OnMaterialchildTypeIDChanging(int value);
    partial void OnMaterialchildTypeIDChanged();
    partial void OnSpecificationModelChanging(string value);
    partial void OnSpecificationModelChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public MaterialInfo()
		{
			this._AwaitScrap = new EntitySet<AwaitScrap>(new Action<AwaitScrap>(this.attach_AwaitScrap), new Action<AwaitScrap>(this.detach_AwaitScrap));
			this._WarningList = new EntitySet<WarningList>(new Action<WarningList>(this.attach_WarningList), new Action<WarningList>(this.detach_WarningList));
			this._CommitInAudited = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited), new Action<CommitInAudited>(this.detach_CommitInAudited));
			this._CommitInDetailed = new EntitySet<CommitInDetailed>(new Action<CommitInDetailed>(this.attach_CommitInDetailed), new Action<CommitInDetailed>(this.detach_CommitInDetailed));
			this._CommitInQualified = new EntitySet<CommitInQualified>(new Action<CommitInQualified>(this.attach_CommitInQualified), new Action<CommitInQualified>(this.detach_CommitInQualified));
			this._CommitProduce = new EntitySet<CommitProduce>(new Action<CommitProduce>(this.attach_CommitProduce), new Action<CommitProduce>(this.detach_CommitProduce));
			this._QualifiedStocks = new EntitySet<QualifiedStocks>(new Action<QualifiedStocks>(this.attach_QualifiedStocks), new Action<QualifiedStocks>(this.detach_QualifiedStocks));
			this._SrinSubDetails = new EntitySet<SrinSubDetails>(new Action<SrinSubDetails>(this.attach_SrinSubDetails), new Action<SrinSubDetails>(this.detach_SrinSubDetails));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._StorageCommitOutDetails = new EntitySet<StorageCommitOutDetails>(new Action<StorageCommitOutDetails>(this.attach_StorageCommitOutDetails), new Action<StorageCommitOutDetails>(this.detach_StorageCommitOutDetails));
			this._StorageOutDetails = new EntitySet<StorageOutDetails>(new Action<StorageOutDetails>(this.attach_StorageOutDetails), new Action<StorageOutDetails>(this.detach_StorageOutDetails));
			this._StorageProduce = new EntitySet<StorageProduce>(new Action<StorageProduce>(this.attach_StorageProduce), new Action<StorageProduce>(this.detach_StorageProduce));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._MaterialChildType = default(EntityRef<MaterialChildType>);
			OnCreated();
		}
		
		[Column(Storage="_MaterialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this.OnFinanceCodeChanging(value);
					this.SendPropertyChanging();
					this._FinanceCode = value;
					this.SendPropertyChanged("FinanceCode");
					this.OnFinanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this.OnMaterialNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialName = value;
					this.SendPropertyChanged("MaterialName");
					this.OnMaterialNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialchildTypeID", DbType="Int NOT NULL")]
		public int MaterialchildTypeID
		{
			get
			{
				return this._MaterialchildTypeID;
			}
			set
			{
				if ((this._MaterialchildTypeID != value))
				{
					if (this._MaterialChildType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialchildTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialchildTypeID = value;
					this.SendPropertyChanged("MaterialchildTypeID");
					this.OnMaterialchildTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this.OnSpecificationModelChanging(value);
					this.SendPropertyChanging();
					this._SpecificationModel = value;
					this.SendPropertyChanged("SpecificationModel");
					this.OnSpecificationModelChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="MaterialInfo_AwaitScrap", Storage="_AwaitScrap", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<AwaitScrap> AwaitScrap
		{
			get
			{
				return this._AwaitScrap;
			}
			set
			{
				this._AwaitScrap.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_WarningList", Storage="_WarningList", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<WarningList> WarningList
		{
			get
			{
				return this._WarningList;
			}
			set
			{
				this._WarningList.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_CommitInAudited", Storage="_CommitInAudited", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<CommitInAudited> CommitInAudited
		{
			get
			{
				return this._CommitInAudited;
			}
			set
			{
				this._CommitInAudited.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_CommitInDetailed", Storage="_CommitInDetailed", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<CommitInDetailed> CommitInDetailed
		{
			get
			{
				return this._CommitInDetailed;
			}
			set
			{
				this._CommitInDetailed.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_CommitInQualified", Storage="_CommitInQualified", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<CommitInQualified> CommitInQualified
		{
			get
			{
				return this._CommitInQualified;
			}
			set
			{
				this._CommitInQualified.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_CommitProduce", Storage="_CommitProduce", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<CommitProduce> CommitProduce
		{
			get
			{
				return this._CommitProduce;
			}
			set
			{
				this._CommitProduce.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_QualifiedStocks", Storage="_QualifiedStocks", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this._QualifiedStocks;
			}
			set
			{
				this._QualifiedStocks.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_SrinSubDetails", Storage="_SrinSubDetails", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<SrinSubDetails> SrinSubDetails
		{
			get
			{
				return this._SrinSubDetails;
			}
			set
			{
				this._SrinSubDetails.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_StockOnline", Storage="_StockOnline", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_StorageCommitOutDetails", Storage="_StorageCommitOutDetails", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<StorageCommitOutDetails> StorageCommitOutDetails
		{
			get
			{
				return this._StorageCommitOutDetails;
			}
			set
			{
				this._StorageCommitOutDetails.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_StorageOutDetails", Storage="_StorageOutDetails", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<StorageOutDetails> StorageOutDetails
		{
			get
			{
				return this._StorageOutDetails;
			}
			set
			{
				this._StorageOutDetails.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_StorageProduce", Storage="_StorageProduce", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<StorageProduce> StorageProduce
		{
			get
			{
				return this._StorageProduce;
			}
			set
			{
				this._StorageProduce.Assign(value);
			}
		}
		
		[Association(Name="MaterialInfo_TableOfStocks", Storage="_TableOfStocks", ThisKey="MaterialID", OtherKey="MaterialID")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="MaterialChildType_MaterialInfo", Storage="_MaterialChildType", ThisKey="MaterialchildTypeID", OtherKey="MaterialChildTypeID", IsForeignKey=true)]
		public MaterialChildType MaterialChildType
		{
			get
			{
				return this._MaterialChildType.Entity;
			}
			set
			{
				MaterialChildType previousValue = this._MaterialChildType.Entity;
				if (((previousValue != value) 
							|| (this._MaterialChildType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialChildType.Entity = null;
						previousValue.MaterialInfo.Remove(this);
					}
					this._MaterialChildType.Entity = value;
					if ((value != null))
					{
						value.MaterialInfo.Add(this);
						this._MaterialchildTypeID = value.MaterialChildTypeID;
					}
					else
					{
						this._MaterialchildTypeID = default(int);
					}
					this.SendPropertyChanged("MaterialChildType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_WarningList(WarningList entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_WarningList(WarningList entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_SrinSubDetails(SrinSubDetails entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_SrinSubDetails(SrinSubDetails entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_StorageCommitOutDetails(StorageCommitOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_StorageCommitOutDetails(StorageCommitOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_StorageOutDetails(StorageOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_StorageOutDetails(StorageOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.MaterialInfo = null;
		}
	}
	
	[Table(Name="dbo.MaterialMainType")]
	public partial class MaterialMainType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialMainTypeID;
		
		private string _MaterialMainTypeName;
		
		private string _MaterialMainTypeCode;
		
		private int _MaterialTypeID;
		
		private EntitySet<MaterialChildType> _MaterialChildType;
		
		private EntityRef<MaterialType> _MaterialType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialMainTypeIDChanging(int value);
    partial void OnMaterialMainTypeIDChanged();
    partial void OnMaterialMainTypeNameChanging(string value);
    partial void OnMaterialMainTypeNameChanged();
    partial void OnMaterialMainTypeCodeChanging(string value);
    partial void OnMaterialMainTypeCodeChanged();
    partial void OnMaterialTypeIDChanging(int value);
    partial void OnMaterialTypeIDChanged();
    #endregion
		
		public MaterialMainType()
		{
			this._MaterialChildType = new EntitySet<MaterialChildType>(new Action<MaterialChildType>(this.attach_MaterialChildType), new Action<MaterialChildType>(this.detach_MaterialChildType));
			this._MaterialType = default(EntityRef<MaterialType>);
			OnCreated();
		}
		
		[Column(Storage="_MaterialMainTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialMainTypeID
		{
			get
			{
				return this._MaterialMainTypeID;
			}
			set
			{
				if ((this._MaterialMainTypeID != value))
				{
					this.OnMaterialMainTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialMainTypeID = value;
					this.SendPropertyChanged("MaterialMainTypeID");
					this.OnMaterialMainTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialMainTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialMainTypeName
		{
			get
			{
				return this._MaterialMainTypeName;
			}
			set
			{
				if ((this._MaterialMainTypeName != value))
				{
					this.OnMaterialMainTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialMainTypeName = value;
					this.SendPropertyChanged("MaterialMainTypeName");
					this.OnMaterialMainTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialMainTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialMainTypeCode
		{
			get
			{
				return this._MaterialMainTypeCode;
			}
			set
			{
				if ((this._MaterialMainTypeCode != value))
				{
					this.OnMaterialMainTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialMainTypeCode = value;
					this.SendPropertyChanged("MaterialMainTypeCode");
					this.OnMaterialMainTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialTypeID", DbType="Int NOT NULL")]
		public int MaterialTypeID
		{
			get
			{
				return this._MaterialTypeID;
			}
			set
			{
				if ((this._MaterialTypeID != value))
				{
					if (this._MaterialType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialTypeID = value;
					this.SendPropertyChanged("MaterialTypeID");
					this.OnMaterialTypeIDChanged();
				}
			}
		}
		
		[Association(Name="MaterialMainType_MaterialChildType", Storage="_MaterialChildType", ThisKey="MaterialMainTypeID", OtherKey="MaterialMainTypeID")]
		public EntitySet<MaterialChildType> MaterialChildType
		{
			get
			{
				return this._MaterialChildType;
			}
			set
			{
				this._MaterialChildType.Assign(value);
			}
		}
		
		[Association(Name="MaterialType_MaterialMainType", Storage="_MaterialType", ThisKey="MaterialTypeID", OtherKey="MaterialTypeID", IsForeignKey=true)]
		public MaterialType MaterialType
		{
			get
			{
				return this._MaterialType.Entity;
			}
			set
			{
				MaterialType previousValue = this._MaterialType.Entity;
				if (((previousValue != value) 
							|| (this._MaterialType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialType.Entity = null;
						previousValue.MaterialMainType.Remove(this);
					}
					this._MaterialType.Entity = value;
					if ((value != null))
					{
						value.MaterialMainType.Add(this);
						this._MaterialTypeID = value.MaterialTypeID;
					}
					else
					{
						this._MaterialTypeID = default(int);
					}
					this.SendPropertyChanged("MaterialType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MaterialChildType(MaterialChildType entity)
		{
			this.SendPropertyChanging();
			entity.MaterialMainType = this;
		}
		
		private void detach_MaterialChildType(MaterialChildType entity)
		{
			this.SendPropertyChanging();
			entity.MaterialMainType = null;
		}
	}
	
	[Table(Name="dbo.MaterialType")]
	public partial class MaterialType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialTypeID;
		
		private string _MaterialTypeName;
		
		private string _MaterialTypeCode;
		
		private EntitySet<MaterialMainType> _MaterialMainType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialTypeIDChanging(int value);
    partial void OnMaterialTypeIDChanged();
    partial void OnMaterialTypeNameChanging(string value);
    partial void OnMaterialTypeNameChanged();
    partial void OnMaterialTypeCodeChanging(string value);
    partial void OnMaterialTypeCodeChanged();
    #endregion
		
		public MaterialType()
		{
			this._MaterialMainType = new EntitySet<MaterialMainType>(new Action<MaterialMainType>(this.attach_MaterialMainType), new Action<MaterialMainType>(this.detach_MaterialMainType));
			OnCreated();
		}
		
		[Column(Storage="_MaterialTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialTypeID
		{
			get
			{
				return this._MaterialTypeID;
			}
			set
			{
				if ((this._MaterialTypeID != value))
				{
					this.OnMaterialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialTypeID = value;
					this.SendPropertyChanged("MaterialTypeID");
					this.OnMaterialTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialTypeName
		{
			get
			{
				return this._MaterialTypeName;
			}
			set
			{
				if ((this._MaterialTypeName != value))
				{
					this.OnMaterialTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialTypeName = value;
					this.SendPropertyChanged("MaterialTypeName");
					this.OnMaterialTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialTypeCode
		{
			get
			{
				return this._MaterialTypeCode;
			}
			set
			{
				if ((this._MaterialTypeCode != value))
				{
					this.OnMaterialTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialTypeCode = value;
					this.SendPropertyChanged("MaterialTypeCode");
					this.OnMaterialTypeCodeChanged();
				}
			}
		}
		
		[Association(Name="MaterialType_MaterialMainType", Storage="_MaterialMainType", ThisKey="MaterialTypeID", OtherKey="MaterialTypeID")]
		public EntitySet<MaterialMainType> MaterialMainType
		{
			get
			{
				return this._MaterialMainType;
			}
			set
			{
				this._MaterialMainType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MaterialMainType(MaterialMainType entity)
		{
			this.SendPropertyChanging();
			entity.MaterialType = this;
		}
		
		private void detach_MaterialMainType(MaterialMainType entity)
		{
			this.SendPropertyChanging();
			entity.MaterialType = null;
		}
	}
	
	[Table(Name="dbo.MessageInfo")]
	public partial class MessageInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageInfoID;
		
		private int _Creater;
		
		private string _MessageTitle;
		
		private string _MessageContent;
		
		private string _MessageSource;
		
		private string _MessageStatus;
		
		private string _MessageType;
		
		private System.Nullable<System.DateTime> _CreateTime;
		
		private int _TaskID;
		
		private EntitySet<MessageReceiver> _MessageReceiver;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageInfoIDChanging(int value);
    partial void OnMessageInfoIDChanged();
    partial void OnCreaterChanging(int value);
    partial void OnCreaterChanged();
    partial void OnMessageTitleChanging(string value);
    partial void OnMessageTitleChanged();
    partial void OnMessageContentChanging(string value);
    partial void OnMessageContentChanged();
    partial void OnMessageSourceChanging(string value);
    partial void OnMessageSourceChanged();
    partial void OnMessageStatusChanging(string value);
    partial void OnMessageStatusChanged();
    partial void OnMessageTypeChanging(string value);
    partial void OnMessageTypeChanged();
    partial void OnCreateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateTimeChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public MessageInfo()
		{
			this._MessageReceiver = new EntitySet<MessageReceiver>(new Action<MessageReceiver>(this.attach_MessageReceiver), new Action<MessageReceiver>(this.detach_MessageReceiver));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_MessageInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageInfoID
		{
			get
			{
				return this._MessageInfoID;
			}
			set
			{
				if ((this._MessageInfoID != value))
				{
					this.OnMessageInfoIDChanging(value);
					this.SendPropertyChanging();
					this._MessageInfoID = value;
					this.SendPropertyChanged("MessageInfoID");
					this.OnMessageInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Creater", DbType="Int NOT NULL")]
		public int Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTitle", DbType="NVarChar(50)")]
		public string MessageTitle
		{
			get
			{
				return this._MessageTitle;
			}
			set
			{
				if ((this._MessageTitle != value))
				{
					this.OnMessageTitleChanging(value);
					this.SendPropertyChanging();
					this._MessageTitle = value;
					this.SendPropertyChanged("MessageTitle");
					this.OnMessageTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MessageContent", DbType="NVarChar(MAX)")]
		public string MessageContent
		{
			get
			{
				return this._MessageContent;
			}
			set
			{
				if ((this._MessageContent != value))
				{
					this.OnMessageContentChanging(value);
					this.SendPropertyChanging();
					this._MessageContent = value;
					this.SendPropertyChanged("MessageContent");
					this.OnMessageContentChanged();
				}
			}
		}
		
		[Column(Storage="_MessageSource", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MessageSource
		{
			get
			{
				return this._MessageSource;
			}
			set
			{
				if ((this._MessageSource != value))
				{
					this.OnMessageSourceChanging(value);
					this.SendPropertyChanging();
					this._MessageSource = value;
					this.SendPropertyChanged("MessageSource");
					this.OnMessageSourceChanged();
				}
			}
		}
		
		[Column(Storage="_MessageStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MessageStatus
		{
			get
			{
				return this._MessageStatus;
			}
			set
			{
				if ((this._MessageStatus != value))
				{
					this.OnMessageStatusChanging(value);
					this.SendPropertyChanging();
					this._MessageStatus = value;
					this.SendPropertyChanged("MessageStatus");
					this.OnMessageStatusChanged();
				}
			}
		}
		
		[Column(Storage="_MessageType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MessageType
		{
			get
			{
				return this._MessageType;
			}
			set
			{
				if ((this._MessageType != value))
				{
					this.OnMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._MessageType = value;
					this.SendPropertyChanged("MessageType");
					this.OnMessageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="MessageInfo_MessageReceiver", Storage="_MessageReceiver", ThisKey="MessageInfoID", OtherKey="MessageInfoID")]
		public EntitySet<MessageReceiver> MessageReceiver
		{
			get
			{
				return this._MessageReceiver;
			}
			set
			{
				this._MessageReceiver.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_MessageInfo", Storage="_EmpInfo", ThisKey="Creater", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.MessageInfo.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.MessageInfo.Add(this);
						this._Creater = value.EmpID;
					}
					else
					{
						this._Creater = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.MessageInfo = this;
		}
		
		private void detach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.MessageInfo = null;
		}
	}
	
	[Table(Name="dbo.MessageReceiver")]
	public partial class MessageReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageReceiverID;
		
		private int _MessageInfoID;
		
		private int _ReceiverID;
		
		private EntityRef<MessageInfo> _MessageInfo;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageReceiverIDChanging(int value);
    partial void OnMessageReceiverIDChanged();
    partial void OnMessageInfoIDChanging(int value);
    partial void OnMessageInfoIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    #endregion
		
		public MessageReceiver()
		{
			this._MessageInfo = default(EntityRef<MessageInfo>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_MessageReceiverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageReceiverID
		{
			get
			{
				return this._MessageReceiverID;
			}
			set
			{
				if ((this._MessageReceiverID != value))
				{
					this.OnMessageReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._MessageReceiverID = value;
					this.SendPropertyChanged("MessageReceiverID");
					this.OnMessageReceiverIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageInfoID", DbType="Int NOT NULL")]
		public int MessageInfoID
		{
			get
			{
				return this._MessageInfoID;
			}
			set
			{
				if ((this._MessageInfoID != value))
				{
					if (this._MessageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageInfoIDChanging(value);
					this.SendPropertyChanging();
					this._MessageInfoID = value;
					this.SendPropertyChanged("MessageInfoID");
					this.OnMessageInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[Association(Name="MessageInfo_MessageReceiver", Storage="_MessageInfo", ThisKey="MessageInfoID", OtherKey="MessageInfoID", IsForeignKey=true)]
		public MessageInfo MessageInfo
		{
			get
			{
				return this._MessageInfo.Entity;
			}
			set
			{
				MessageInfo previousValue = this._MessageInfo.Entity;
				if (((previousValue != value) 
							|| (this._MessageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageInfo.Entity = null;
						previousValue.MessageReceiver.Remove(this);
					}
					this._MessageInfo.Entity = value;
					if ((value != null))
					{
						value.MessageReceiver.Add(this);
						this._MessageInfoID = value.MessageInfoID;
					}
					else
					{
						this._MessageInfoID = default(int);
					}
					this.SendPropertyChanged("MessageInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_MessageReceiver", Storage="_EmpInfo", ThisKey="ReceiverID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.MessageReceiver.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.MessageReceiver.Add(this);
						this._ReceiverID = value.EmpID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PileInfo")]
	public partial class PileInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PileID;
		
		private string _PileName;
		
		private string _PileCode;
		
		private int _StorageID;
		
		private string _PileSize;
		
		private string _Remark;
		
		private EntitySet<AwaitScrap> _AwaitScrap;
		
		private EntitySet<CommitInAudited> _CommitInAudited;
		
		private EntitySet<CommitInDetailed> _CommitInDetailed;
		
		private EntitySet<CommitInMaterials> _CommitInMaterials;
		
		private EntitySet<CommitInQualified> _CommitInQualified;
		
		private EntitySet<QualifiedStocks> _QualifiedStocks;
		
		private EntitySet<SrinStocktakingDetails> _SrinStocktakingDetails;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<StockTransferDetail> _StockTransferDetail;
		
		private EntitySet<StorageInMaterials> _StorageInMaterials;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntityRef<StorageInfo> _StorageInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnPileNameChanging(string value);
    partial void OnPileNameChanged();
    partial void OnPileCodeChanging(string value);
    partial void OnPileCodeChanged();
    partial void OnStorageIDChanging(int value);
    partial void OnStorageIDChanged();
    partial void OnPileSizeChanging(string value);
    partial void OnPileSizeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public PileInfo()
		{
			this._AwaitScrap = new EntitySet<AwaitScrap>(new Action<AwaitScrap>(this.attach_AwaitScrap), new Action<AwaitScrap>(this.detach_AwaitScrap));
			this._CommitInAudited = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited), new Action<CommitInAudited>(this.detach_CommitInAudited));
			this._CommitInDetailed = new EntitySet<CommitInDetailed>(new Action<CommitInDetailed>(this.attach_CommitInDetailed), new Action<CommitInDetailed>(this.detach_CommitInDetailed));
			this._CommitInMaterials = new EntitySet<CommitInMaterials>(new Action<CommitInMaterials>(this.attach_CommitInMaterials), new Action<CommitInMaterials>(this.detach_CommitInMaterials));
			this._CommitInQualified = new EntitySet<CommitInQualified>(new Action<CommitInQualified>(this.attach_CommitInQualified), new Action<CommitInQualified>(this.detach_CommitInQualified));
			this._QualifiedStocks = new EntitySet<QualifiedStocks>(new Action<QualifiedStocks>(this.attach_QualifiedStocks), new Action<QualifiedStocks>(this.detach_QualifiedStocks));
			this._SrinStocktakingDetails = new EntitySet<SrinStocktakingDetails>(new Action<SrinStocktakingDetails>(this.attach_SrinStocktakingDetails), new Action<SrinStocktakingDetails>(this.detach_SrinStocktakingDetails));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._StockTransferDetail = new EntitySet<StockTransferDetail>(new Action<StockTransferDetail>(this.attach_StockTransferDetail), new Action<StockTransferDetail>(this.detach_StockTransferDetail));
			this._StorageInMaterials = new EntitySet<StorageInMaterials>(new Action<StorageInMaterials>(this.attach_StorageInMaterials), new Action<StorageInMaterials>(this.detach_StorageInMaterials));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._StorageInfo = default(EntityRef<StorageInfo>);
			OnCreated();
		}
		
		[Column(Storage="_PileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PileName
		{
			get
			{
				return this._PileName;
			}
			set
			{
				if ((this._PileName != value))
				{
					this.OnPileNameChanging(value);
					this.SendPropertyChanging();
					this._PileName = value;
					this.SendPropertyChanged("PileName");
					this.OnPileNameChanged();
				}
			}
		}
		
		[Column(Storage="_PileCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PileCode
		{
			get
			{
				return this._PileCode;
			}
			set
			{
				if ((this._PileCode != value))
				{
					this.OnPileCodeChanging(value);
					this.SendPropertyChanging();
					this._PileCode = value;
					this.SendPropertyChanged("PileCode");
					this.OnPileCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					if (this._StorageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileSize", DbType="NVarChar(50)")]
		public string PileSize
		{
			get
			{
				return this._PileSize;
			}
			set
			{
				if ((this._PileSize != value))
				{
					this.OnPileSizeChanging(value);
					this.SendPropertyChanging();
					this._PileSize = value;
					this.SendPropertyChanged("PileSize");
					this.OnPileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="PileInfo_AwaitScrap", Storage="_AwaitScrap", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<AwaitScrap> AwaitScrap
		{
			get
			{
				return this._AwaitScrap;
			}
			set
			{
				this._AwaitScrap.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_CommitInAudited", Storage="_CommitInAudited", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<CommitInAudited> CommitInAudited
		{
			get
			{
				return this._CommitInAudited;
			}
			set
			{
				this._CommitInAudited.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_CommitInDetailed", Storage="_CommitInDetailed", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<CommitInDetailed> CommitInDetailed
		{
			get
			{
				return this._CommitInDetailed;
			}
			set
			{
				this._CommitInDetailed.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_CommitInMaterials", Storage="_CommitInMaterials", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<CommitInMaterials> CommitInMaterials
		{
			get
			{
				return this._CommitInMaterials;
			}
			set
			{
				this._CommitInMaterials.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_CommitInQualified", Storage="_CommitInQualified", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<CommitInQualified> CommitInQualified
		{
			get
			{
				return this._CommitInQualified;
			}
			set
			{
				this._CommitInQualified.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_QualifiedStocks", Storage="_QualifiedStocks", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this._QualifiedStocks;
			}
			set
			{
				this._QualifiedStocks.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_SrinStocktakingDetails", Storage="_SrinStocktakingDetails", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<SrinStocktakingDetails> SrinStocktakingDetails
		{
			get
			{
				return this._SrinStocktakingDetails;
			}
			set
			{
				this._SrinStocktakingDetails.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_StockOnline", Storage="_StockOnline", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_StockTransferDetail", Storage="_StockTransferDetail", ThisKey="PileID", OtherKey="TargetPile")]
		public EntitySet<StockTransferDetail> StockTransferDetail
		{
			get
			{
				return this._StockTransferDetail;
			}
			set
			{
				this._StockTransferDetail.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_StorageInMaterials", Storage="_StorageInMaterials", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<StorageInMaterials> StorageInMaterials
		{
			get
			{
				return this._StorageInMaterials;
			}
			set
			{
				this._StorageInMaterials.Assign(value);
			}
		}
		
		[Association(Name="PileInfo_TableOfStocks", Storage="_TableOfStocks", ThisKey="PileID", OtherKey="PileID")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="StorageInfo_PileInfo", Storage="_StorageInfo", ThisKey="StorageID", OtherKey="StorageID", IsForeignKey=true)]
		public StorageInfo StorageInfo
		{
			get
			{
				return this._StorageInfo.Entity;
			}
			set
			{
				StorageInfo previousValue = this._StorageInfo.Entity;
				if (((previousValue != value) 
							|| (this._StorageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInfo.Entity = null;
						previousValue.PileInfo.Remove(this);
					}
					this._StorageInfo.Entity = value;
					if ((value != null))
					{
						value.PileInfo.Add(this);
						this._StorageID = value.StorageID;
					}
					else
					{
						this._StorageID = default(int);
					}
					this.SendPropertyChanged("StorageInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_StockTransferDetail(StockTransferDetail entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_StockTransferDetail(StockTransferDetail entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.PileInfo = null;
		}
	}
	
	[Table(Name="dbo.ProjectInfo")]
	public partial class ProjectInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private int _Owner;
		
		private string _ProjectName;
		
		private string _ProjectCode;
		
		private string _ProjectProperty;
		
		private string _Remark;
		
		private EntitySet<AwaitScrap> _AwaitScrap;
		
		private EntitySet<CommitProduce> _CommitProduce;
		
		private EntitySet<FlowDetailsOffline> _FlowDetailsOffline;
		
		private EntitySet<QualifiedStocks> _QualifiedStocks;
		
		private EntitySet<RelationProjectBusiness> _RelationProjectBusiness;
		
		private EntitySet<SrinSubDoc> _SrinSubDoc;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<StorageOutNotice> _StorageOutNotice;
		
		private EntitySet<StorageProduce> _StorageProduce;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntityRef<BusinessUnitInfo> _BusinessUnitInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectCodeChanging(string value);
    partial void OnProjectCodeChanged();
    partial void OnProjectPropertyChanging(string value);
    partial void OnProjectPropertyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public ProjectInfo()
		{
			this._AwaitScrap = new EntitySet<AwaitScrap>(new Action<AwaitScrap>(this.attach_AwaitScrap), new Action<AwaitScrap>(this.detach_AwaitScrap));
			this._CommitProduce = new EntitySet<CommitProduce>(new Action<CommitProduce>(this.attach_CommitProduce), new Action<CommitProduce>(this.detach_CommitProduce));
			this._FlowDetailsOffline = new EntitySet<FlowDetailsOffline>(new Action<FlowDetailsOffline>(this.attach_FlowDetailsOffline), new Action<FlowDetailsOffline>(this.detach_FlowDetailsOffline));
			this._QualifiedStocks = new EntitySet<QualifiedStocks>(new Action<QualifiedStocks>(this.attach_QualifiedStocks), new Action<QualifiedStocks>(this.detach_QualifiedStocks));
			this._RelationProjectBusiness = new EntitySet<RelationProjectBusiness>(new Action<RelationProjectBusiness>(this.attach_RelationProjectBusiness), new Action<RelationProjectBusiness>(this.detach_RelationProjectBusiness));
			this._SrinSubDoc = new EntitySet<SrinSubDoc>(new Action<SrinSubDoc>(this.attach_SrinSubDoc), new Action<SrinSubDoc>(this.detach_SrinSubDoc));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._StorageOutNotice = new EntitySet<StorageOutNotice>(new Action<StorageOutNotice>(this.attach_StorageOutNotice), new Action<StorageOutNotice>(this.detach_StorageOutNotice));
			this._StorageProduce = new EntitySet<StorageProduce>(new Action<StorageProduce>(this.attach_StorageProduce), new Action<StorageProduce>(this.detach_StorageProduce));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._BusinessUnitInfo = default(EntityRef<BusinessUnitInfo>);
			OnCreated();
		}
		
		[Column(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					if (this._BusinessUnitInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectCode
		{
			get
			{
				return this._ProjectCode;
			}
			set
			{
				if ((this._ProjectCode != value))
				{
					this.OnProjectCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjectCode = value;
					this.SendPropertyChanged("ProjectCode");
					this.OnProjectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectProperty", DbType="NVarChar(50)")]
		public string ProjectProperty
		{
			get
			{
				return this._ProjectProperty;
			}
			set
			{
				if ((this._ProjectProperty != value))
				{
					this.OnProjectPropertyChanging(value);
					this.SendPropertyChanging();
					this._ProjectProperty = value;
					this.SendPropertyChanged("ProjectProperty");
					this.OnProjectPropertyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="ProjectInfo_AwaitScrap", Storage="_AwaitScrap", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<AwaitScrap> AwaitScrap
		{
			get
			{
				return this._AwaitScrap;
			}
			set
			{
				this._AwaitScrap.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_CommitProduce", Storage="_CommitProduce", ThisKey="ProjectID", OtherKey="ExpectedProject")]
		public EntitySet<CommitProduce> CommitProduce
		{
			get
			{
				return this._CommitProduce;
			}
			set
			{
				this._CommitProduce.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_FlowDetailsOffline", Storage="_FlowDetailsOffline", ThisKey="ProjectID", OtherKey="StorageOutProject")]
		public EntitySet<FlowDetailsOffline> FlowDetailsOffline
		{
			get
			{
				return this._FlowDetailsOffline;
			}
			set
			{
				this._FlowDetailsOffline.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_QualifiedStocks", Storage="_QualifiedStocks", ThisKey="ProjectID", OtherKey="RetrieveProjectID")]
		public EntitySet<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this._QualifiedStocks;
			}
			set
			{
				this._QualifiedStocks.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_RelationProjectBusiness", Storage="_RelationProjectBusiness", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<RelationProjectBusiness> RelationProjectBusiness
		{
			get
			{
				return this._RelationProjectBusiness;
			}
			set
			{
				this._RelationProjectBusiness.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_SrinSubDoc", Storage="_SrinSubDoc", ThisKey="ProjectID", OtherKey="Project")]
		public EntitySet<SrinSubDoc> SrinSubDoc
		{
			get
			{
				return this._SrinSubDoc;
			}
			set
			{
				this._SrinSubDoc.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_StockOnline", Storage="_StockOnline", ThisKey="ProjectID", OtherKey="ExpectedProject")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_StorageOutNotice", Storage="_StorageOutNotice", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<StorageOutNotice> StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice;
			}
			set
			{
				this._StorageOutNotice.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_StorageProduce", Storage="_StorageProduce", ThisKey="ProjectID", OtherKey="ExpectedProject")]
		public EntitySet<StorageProduce> StorageProduce
		{
			get
			{
				return this._StorageProduce;
			}
			set
			{
				this._StorageProduce.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_TableOfStocks", Storage="_TableOfStocks", ThisKey="ProjectID", OtherKey="ExpectedProject")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitInfo_ProjectInfo", Storage="_BusinessUnitInfo", ThisKey="Owner", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BusinessUnitInfo BusinessUnitInfo
		{
			get
			{
				return this._BusinessUnitInfo.Entity;
			}
			set
			{
				BusinessUnitInfo previousValue = this._BusinessUnitInfo.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnitInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnitInfo.Entity = null;
						previousValue.ProjectInfo.Remove(this);
					}
					this._BusinessUnitInfo.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo.Add(this);
						this._Owner = value.BusinessUnitID;
					}
					else
					{
						this._Owner = default(int);
					}
					this.SendPropertyChanged("BusinessUnitInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_CommitProduce(CommitProduce entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_FlowDetailsOffline(FlowDetailsOffline entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_FlowDetailsOffline(FlowDetailsOffline entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_RelationProjectBusiness(RelationProjectBusiness entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_RelationProjectBusiness(RelationProjectBusiness entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_SrinSubDoc(SrinSubDoc entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_SrinSubDoc(SrinSubDoc entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_StorageOutNotice(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_StorageOutNotice(StorageOutNotice entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo = null;
		}
	}
	
	[Table(Name="dbo.ProxyDirector")]
	public partial class ProxyDirector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProxyDirectorID;
		
		private int _TaskID;
		
		private int _TaskProxyID;
		
		private EntityRef<TaskProxy> _TaskProxy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProxyDirectorIDChanging(int value);
    partial void OnProxyDirectorIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskProxyIDChanging(int value);
    partial void OnTaskProxyIDChanged();
    #endregion
		
		public ProxyDirector()
		{
			this._TaskProxy = default(EntityRef<TaskProxy>);
			OnCreated();
		}
		
		[Column(Storage="_ProxyDirectorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProxyDirectorID
		{
			get
			{
				return this._ProxyDirectorID;
			}
			set
			{
				if ((this._ProxyDirectorID != value))
				{
					this.OnProxyDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._ProxyDirectorID = value;
					this.SendPropertyChanged("ProxyDirectorID");
					this.OnProxyDirectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskProxyID", DbType="Int NOT NULL")]
		public int TaskProxyID
		{
			get
			{
				return this._TaskProxyID;
			}
			set
			{
				if ((this._TaskProxyID != value))
				{
					if (this._TaskProxy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskProxyIDChanging(value);
					this.SendPropertyChanging();
					this._TaskProxyID = value;
					this.SendPropertyChanged("TaskProxyID");
					this.OnTaskProxyIDChanged();
				}
			}
		}
		
		[Association(Name="TaskProxy_ProxyDirector", Storage="_TaskProxy", ThisKey="TaskProxyID", OtherKey="TaskProxyID", IsForeignKey=true)]
		public TaskProxy TaskProxy
		{
			get
			{
				return this._TaskProxy.Entity;
			}
			set
			{
				TaskProxy previousValue = this._TaskProxy.Entity;
				if (((previousValue != value) 
							|| (this._TaskProxy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskProxy.Entity = null;
						previousValue.ProxyDirector.Remove(this);
					}
					this._TaskProxy.Entity = value;
					if ((value != null))
					{
						value.ProxyDirector.Add(this);
						this._TaskProxyID = value.TaskProxyID;
					}
					else
					{
						this._TaskProxyID = default(int);
					}
					this.SendPropertyChanged("TaskProxy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QualifiedStocks")]
	public partial class QualifiedStocks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StocksID;
		
		private int _MaterialID;
		
		private System.DateTime _StorageTime;
		
		private int _ManufactureID;
		
		private int _StorageID;
		
		private int _PileID;
		
		private decimal _Gentaojian;
		
		private decimal _Metre;
		
		private decimal _Ton;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.DateTime _RetrieveTime;
		
		private int _RetrieveProjectID;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<StorageInfo> _StorageInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStocksIDChanging(int value);
    partial void OnStocksIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnStorageIDChanging(int value);
    partial void OnStorageIDChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnGentaojianChanging(decimal value);
    partial void OnGentaojianChanged();
    partial void OnMetreChanging(decimal value);
    partial void OnMetreChanged();
    partial void OnTonChanging(decimal value);
    partial void OnTonChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRetrieveTimeChanging(System.DateTime value);
    partial void OnRetrieveTimeChanged();
    partial void OnRetrieveProjectIDChanging(int value);
    partial void OnRetrieveProjectIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    #endregion
		
		public QualifiedStocks()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._StorageInfo = default(EntityRef<StorageInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StocksID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this.OnStocksIDChanging(value);
					this.SendPropertyChanging();
					this._StocksID = value;
					this.SendPropertyChanged("StocksID");
					this.OnStocksIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					if (this._StorageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_Metre", DbType="Decimal(18,2) NOT NULL")]
		public decimal Metre
		{
			get
			{
				return this._Metre;
			}
			set
			{
				if ((this._Metre != value))
				{
					this.OnMetreChanging(value);
					this.SendPropertyChanging();
					this._Metre = value;
					this.SendPropertyChanged("Metre");
					this.OnMetreChanged();
				}
			}
		}
		
		[Column(Storage="_Ton", DbType="Decimal(18,2) NOT NULL")]
		public decimal Ton
		{
			get
			{
				return this._Ton;
			}
			set
			{
				if ((this._Ton != value))
				{
					this.OnTonChanging(value);
					this.SendPropertyChanging();
					this._Ton = value;
					this.SendPropertyChanged("Ton");
					this.OnTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_RetrieveTime", DbType="DateTime NOT NULL")]
		public System.DateTime RetrieveTime
		{
			get
			{
				return this._RetrieveTime;
			}
			set
			{
				if ((this._RetrieveTime != value))
				{
					this.OnRetrieveTimeChanging(value);
					this.SendPropertyChanging();
					this._RetrieveTime = value;
					this.SendPropertyChanged("RetrieveTime");
					this.OnRetrieveTimeChanged();
				}
			}
		}
		
		[Column(Storage="_RetrieveProjectID", DbType="Int NOT NULL")]
		public int RetrieveProjectID
		{
			get
			{
				return this._RetrieveProjectID;
			}
			set
			{
				if ((this._RetrieveProjectID != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRetrieveProjectIDChanging(value);
					this.SendPropertyChanging();
					this._RetrieveProjectID = value;
					this.SendPropertyChanged("RetrieveProjectID");
					this.OnRetrieveProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_QualifiedStocks", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.QualifiedStocks.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.QualifiedStocks.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_QualifiedStocks", Storage="_Manufacturer", ThisKey="ManufactureID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.QualifiedStocks.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.QualifiedStocks.Add(this);
						this._ManufactureID = value.ManufacturerID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="MaterialInfo_QualifiedStocks", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.QualifiedStocks.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.QualifiedStocks.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_QualifiedStocks", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.QualifiedStocks.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.QualifiedStocks.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_QualifiedStocks", Storage="_ProjectInfo", ThisKey="RetrieveProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.QualifiedStocks.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.QualifiedStocks.Add(this);
						this._RetrieveProjectID = value.ProjectID;
					}
					else
					{
						this._RetrieveProjectID = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="StorageInfo_QualifiedStocks", Storage="_StorageInfo", ThisKey="StorageID", OtherKey="StorageID", IsForeignKey=true)]
		public StorageInfo StorageInfo
		{
			get
			{
				return this._StorageInfo.Entity;
			}
			set
			{
				StorageInfo previousValue = this._StorageInfo.Entity;
				if (((previousValue != value) 
							|| (this._StorageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInfo.Entity = null;
						previousValue.QualifiedStocks.Remove(this);
					}
					this._StorageInfo.Entity = value;
					if ((value != null))
					{
						value.QualifiedStocks.Add(this);
						this._StorageID = value.StorageID;
					}
					else
					{
						this._StorageID = default(int);
					}
					this.SendPropertyChanged("StorageInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ReceivingTypeInfo")]
	public partial class ReceivingTypeInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceivingTypeID;
		
		private string _ReceivingTypeName;
		
		private string _ReceivingTypeCode;
		
		private EntitySet<CommitIn> _CommitIn;
		
		private EntitySet<StorageInMain> _StorageInMain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceivingTypeIDChanging(int value);
    partial void OnReceivingTypeIDChanged();
    partial void OnReceivingTypeNameChanging(string value);
    partial void OnReceivingTypeNameChanged();
    partial void OnReceivingTypeCodeChanging(string value);
    partial void OnReceivingTypeCodeChanged();
    #endregion
		
		public ReceivingTypeInfo()
		{
			this._CommitIn = new EntitySet<CommitIn>(new Action<CommitIn>(this.attach_CommitIn), new Action<CommitIn>(this.detach_CommitIn));
			this._StorageInMain = new EntitySet<StorageInMain>(new Action<StorageInMain>(this.attach_StorageInMain), new Action<StorageInMain>(this.detach_StorageInMain));
			OnCreated();
		}
		
		[Column(Storage="_ReceivingTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceivingTypeID
		{
			get
			{
				return this._ReceivingTypeID;
			}
			set
			{
				if ((this._ReceivingTypeID != value))
				{
					this.OnReceivingTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTypeID = value;
					this.SendPropertyChanged("ReceivingTypeID");
					this.OnReceivingTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReceivingTypeName
		{
			get
			{
				return this._ReceivingTypeName;
			}
			set
			{
				if ((this._ReceivingTypeName != value))
				{
					this.OnReceivingTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTypeName = value;
					this.SendPropertyChanged("ReceivingTypeName");
					this.OnReceivingTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReceivingTypeCode
		{
			get
			{
				return this._ReceivingTypeCode;
			}
			set
			{
				if ((this._ReceivingTypeCode != value))
				{
					this.OnReceivingTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTypeCode = value;
					this.SendPropertyChanged("ReceivingTypeCode");
					this.OnReceivingTypeCodeChanged();
				}
			}
		}
		
		[Association(Name="ReceivingTypeInfo_CommitIn", Storage="_CommitIn", ThisKey="ReceivingTypeID", OtherKey="ReceivingType")]
		public EntitySet<CommitIn> CommitIn
		{
			get
			{
				return this._CommitIn;
			}
			set
			{
				this._CommitIn.Assign(value);
			}
		}
		
		[Association(Name="ReceivingTypeInfo_StorageInMain", Storage="_StorageInMain", ThisKey="ReceivingTypeID", OtherKey="ReceivingType")]
		public EntitySet<StorageInMain> StorageInMain
		{
			get
			{
				return this._StorageInMain;
			}
			set
			{
				this._StorageInMain.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitIn(CommitIn entity)
		{
			this.SendPropertyChanging();
			entity.ReceivingTypeInfo = this;
		}
		
		private void detach_CommitIn(CommitIn entity)
		{
			this.SendPropertyChanging();
			entity.ReceivingTypeInfo = null;
		}
		
		private void attach_StorageInMain(StorageInMain entity)
		{
			this.SendPropertyChanging();
			entity.ReceivingTypeInfo = this;
		}
		
		private void detach_StorageInMain(StorageInMain entity)
		{
			this.SendPropertyChanging();
			entity.ReceivingTypeInfo = null;
		}
	}
	
	[Table(Name="dbo.RelationCommitIn")]
	public partial class RelationCommitIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationID;
		
		private int _CommitMaterial;
		
		private string _CommitOutMaterial;
		
		private System.DateTime _CreateTime;
		
		private EntityRef<CommitProduce> _CommitProduce;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIDChanging(int value);
    partial void OnRelationIDChanged();
    partial void OnCommitMaterialChanging(int value);
    partial void OnCommitMaterialChanged();
    partial void OnCommitOutMaterialChanging(string value);
    partial void OnCommitOutMaterialChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public RelationCommitIn()
		{
			this._CommitProduce = default(EntityRef<CommitProduce>);
			OnCreated();
		}
		
		[Column(Storage="_RelationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommitMaterial", DbType="Int NOT NULL")]
		public int CommitMaterial
		{
			get
			{
				return this._CommitMaterial;
			}
			set
			{
				if ((this._CommitMaterial != value))
				{
					if (this._CommitProduce.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitMaterialChanging(value);
					this.SendPropertyChanging();
					this._CommitMaterial = value;
					this.SendPropertyChanged("CommitMaterial");
					this.OnCommitMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_CommitOutMaterial", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CommitOutMaterial
		{
			get
			{
				return this._CommitOutMaterial;
			}
			set
			{
				if ((this._CommitOutMaterial != value))
				{
					this.OnCommitOutMaterialChanging(value);
					this.SendPropertyChanging();
					this._CommitOutMaterial = value;
					this.SendPropertyChanged("CommitOutMaterial");
					this.OnCommitOutMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="CommitProduce_RelationCommitIn", Storage="_CommitProduce", ThisKey="CommitMaterial", OtherKey="StorageInProduceID", IsForeignKey=true)]
		public CommitProduce CommitProduce
		{
			get
			{
				return this._CommitProduce.Entity;
			}
			set
			{
				CommitProduce previousValue = this._CommitProduce.Entity;
				if (((previousValue != value) 
							|| (this._CommitProduce.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitProduce.Entity = null;
						previousValue.RelationCommitIn.Remove(this);
					}
					this._CommitProduce.Entity = value;
					if ((value != null))
					{
						value.RelationCommitIn.Add(this);
						this._CommitMaterial = value.StorageInProduceID;
					}
					else
					{
						this._CommitMaterial = default(int);
					}
					this.SendPropertyChanged("CommitProduce");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RelationProjectBusiness")]
	public partial class RelationProjectBusiness : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private int _BusinessUnitID;
		
		private EntityRef<BusinessUnitInfo> _BusinessUnitInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnBusinessUnitIDChanging(int value);
    partial void OnBusinessUnitIDChanged();
    #endregion
		
		public RelationProjectBusiness()
		{
			this._BusinessUnitInfo = default(EntityRef<BusinessUnitInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			OnCreated();
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					if (this._BusinessUnitInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitID = value;
					this.SendPropertyChanged("BusinessUnitID");
					this.OnBusinessUnitIDChanged();
				}
			}
		}
		
		[Association(Name="BusinessUnitInfo_RelationProjectBusiness", Storage="_BusinessUnitInfo", ThisKey="BusinessUnitID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BusinessUnitInfo BusinessUnitInfo
		{
			get
			{
				return this._BusinessUnitInfo.Entity;
			}
			set
			{
				BusinessUnitInfo previousValue = this._BusinessUnitInfo.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnitInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnitInfo.Entity = null;
						previousValue.RelationProjectBusiness.Remove(this);
					}
					this._BusinessUnitInfo.Entity = value;
					if ((value != null))
					{
						value.RelationProjectBusiness.Add(this);
						this._BusinessUnitID = value.BusinessUnitID;
					}
					else
					{
						this._BusinessUnitID = default(int);
					}
					this.SendPropertyChanged("BusinessUnitInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_RelationProjectBusiness", Storage="_ProjectInfo", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.RelationProjectBusiness.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.RelationProjectBusiness.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Scrapped")]
	public partial class Scrapped : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScrappedID;
		
		private int _AwaitScrapID;
		
		private string _ScrappedNum;
		
		private System.DateTime _ScrappedTime;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private System.Nullable<int> _StockID;
		
		private string _StockType;
		
		private EntityRef<AwaitScrap> _AwaitScrap;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScrappedIDChanging(int value);
    partial void OnScrappedIDChanged();
    partial void OnAwaitScrapIDChanging(int value);
    partial void OnAwaitScrapIDChanged();
    partial void OnScrappedNumChanging(string value);
    partial void OnScrappedNumChanged();
    partial void OnScrappedTimeChanging(System.DateTime value);
    partial void OnScrappedTimeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnStockIDChanging(System.Nullable<int> value);
    partial void OnStockIDChanged();
    partial void OnStockTypeChanging(string value);
    partial void OnStockTypeChanged();
    #endregion
		
		public Scrapped()
		{
			this._AwaitScrap = default(EntityRef<AwaitScrap>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_ScrappedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScrappedID
		{
			get
			{
				return this._ScrappedID;
			}
			set
			{
				if ((this._ScrappedID != value))
				{
					this.OnScrappedIDChanging(value);
					this.SendPropertyChanging();
					this._ScrappedID = value;
					this.SendPropertyChanged("ScrappedID");
					this.OnScrappedIDChanged();
				}
			}
		}
		
		[Column(Storage="_AwaitScrapID", DbType="Int NOT NULL")]
		public int AwaitScrapID
		{
			get
			{
				return this._AwaitScrapID;
			}
			set
			{
				if ((this._AwaitScrapID != value))
				{
					if (this._AwaitScrap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwaitScrapIDChanging(value);
					this.SendPropertyChanging();
					this._AwaitScrapID = value;
					this.SendPropertyChanged("AwaitScrapID");
					this.OnAwaitScrapIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScrappedNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ScrappedNum
		{
			get
			{
				return this._ScrappedNum;
			}
			set
			{
				if ((this._ScrappedNum != value))
				{
					this.OnScrappedNumChanging(value);
					this.SendPropertyChanging();
					this._ScrappedNum = value;
					this.SendPropertyChanged("ScrappedNum");
					this.OnScrappedNumChanged();
				}
			}
		}
		
		[Column(Storage="_ScrappedTime", DbType="DateTime NOT NULL")]
		public System.DateTime ScrappedTime
		{
			get
			{
				return this._ScrappedTime;
			}
			set
			{
				if ((this._ScrappedTime != value))
				{
					this.OnScrappedTimeChanging(value);
					this.SendPropertyChanging();
					this._ScrappedTime = value;
					this.SendPropertyChanged("ScrappedTime");
					this.OnScrappedTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_StockID", DbType="Int")]
		public System.Nullable<int> StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[Column(Storage="_StockType", DbType="NVarChar(50)")]
		public string StockType
		{
			get
			{
				return this._StockType;
			}
			set
			{
				if ((this._StockType != value))
				{
					this.OnStockTypeChanging(value);
					this.SendPropertyChanging();
					this._StockType = value;
					this.SendPropertyChanged("StockType");
					this.OnStockTypeChanged();
				}
			}
		}
		
		[Association(Name="AwaitScrap_Scrapped", Storage="_AwaitScrap", ThisKey="AwaitScrapID", OtherKey="AwaitScrapID", IsForeignKey=true)]
		public AwaitScrap AwaitScrap
		{
			get
			{
				return this._AwaitScrap.Entity;
			}
			set
			{
				AwaitScrap previousValue = this._AwaitScrap.Entity;
				if (((previousValue != value) 
							|| (this._AwaitScrap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AwaitScrap.Entity = null;
						previousValue.Scrapped.Remove(this);
					}
					this._AwaitScrap.Entity = value;
					if ((value != null))
					{
						value.Scrapped.Add(this);
						this._AwaitScrapID = value.AwaitScrapID;
					}
					else
					{
						this._AwaitScrapID = default(int);
					}
					this.SendPropertyChanged("AwaitScrap");
				}
			}
		}
		
		[Association(Name="EmpInfo_Scrapped", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.Scrapped.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.Scrapped.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinAccountReceiptConfirm")]
	public partial class SrinAccountReceiptConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinAccountReceiptConfirmID;
		
		private int _SrinAssetReceiptConfirmID;
		
		private int _Account;
		
		private System.DateTime _ConfirmTime;
		
		private int _TaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinAssetReceiptConfirm> _SrinAssetReceiptConfirm;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinAccountReceiptConfirmIDChanging(int value);
    partial void OnSrinAccountReceiptConfirmIDChanged();
    partial void OnSrinAssetReceiptConfirmIDChanging(int value);
    partial void OnSrinAssetReceiptConfirmIDChanged();
    partial void OnAccountChanging(int value);
    partial void OnAccountChanged();
    partial void OnConfirmTimeChanging(System.DateTime value);
    partial void OnConfirmTimeChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinAccountReceiptConfirm()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinAssetReceiptConfirm = default(EntityRef<SrinAssetReceiptConfirm>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinAccountReceiptConfirmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinAccountReceiptConfirmID
		{
			get
			{
				return this._SrinAccountReceiptConfirmID;
			}
			set
			{
				if ((this._SrinAccountReceiptConfirmID != value))
				{
					this.OnSrinAccountReceiptConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._SrinAccountReceiptConfirmID = value;
					this.SendPropertyChanged("SrinAccountReceiptConfirmID");
					this.OnSrinAccountReceiptConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinAssetReceiptConfirmID", DbType="Int NOT NULL")]
		public int SrinAssetReceiptConfirmID
		{
			get
			{
				return this._SrinAssetReceiptConfirmID;
			}
			set
			{
				if ((this._SrinAssetReceiptConfirmID != value))
				{
					if (this._SrinAssetReceiptConfirm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinAssetReceiptConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._SrinAssetReceiptConfirmID = value;
					this.SendPropertyChanged("SrinAssetReceiptConfirmID");
					this.OnSrinAssetReceiptConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_Account", DbType="Int NOT NULL")]
		public int Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinAccountReceiptConfirm", Storage="_EmpInfo", ThisKey="Account", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinAccountReceiptConfirm.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinAccountReceiptConfirm.Add(this);
						this._Account = value.EmpID;
					}
					else
					{
						this._Account = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinAssetReceiptConfirm_SrinAccountReceiptConfirm", Storage="_SrinAssetReceiptConfirm", ThisKey="SrinAssetReceiptConfirmID", OtherKey="SrinAssetReceiptConfirmID", IsForeignKey=true)]
		public SrinAssetReceiptConfirm SrinAssetReceiptConfirm
		{
			get
			{
				return this._SrinAssetReceiptConfirm.Entity;
			}
			set
			{
				SrinAssetReceiptConfirm previousValue = this._SrinAssetReceiptConfirm.Entity;
				if (((previousValue != value) 
							|| (this._SrinAssetReceiptConfirm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinAssetReceiptConfirm.Entity = null;
						previousValue.SrinAccountReceiptConfirm.Remove(this);
					}
					this._SrinAssetReceiptConfirm.Entity = value;
					if ((value != null))
					{
						value.SrinAccountReceiptConfirm.Add(this);
						this._SrinAssetReceiptConfirmID = value.SrinAssetReceiptConfirmID;
					}
					else
					{
						this._SrinAssetReceiptConfirmID = default(int);
					}
					this.SendPropertyChanged("SrinAssetReceiptConfirm");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinAccountReceiptConfirm", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinAccountReceiptConfirm.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinAccountReceiptConfirm.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinAChiefQReceiptConfirm")]
	public partial class SrinAChiefQReceiptConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinAChiefQReceiptConfirmID;
		
		private int _SrinQualifiedReceiptID;
		
		private int _AssetChief;
		
		private System.DateTime _ConfirmTime;
		
		private string _Remark;
		
		private int _TaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinQualifiedReceipt> _SrinQualifiedReceipt;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinAChiefQReceiptConfirmIDChanging(int value);
    partial void OnSrinAChiefQReceiptConfirmIDChanged();
    partial void OnSrinQualifiedReceiptIDChanging(int value);
    partial void OnSrinQualifiedReceiptIDChanged();
    partial void OnAssetChiefChanging(int value);
    partial void OnAssetChiefChanged();
    partial void OnConfirmTimeChanging(System.DateTime value);
    partial void OnConfirmTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinAChiefQReceiptConfirm()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinQualifiedReceipt = default(EntityRef<SrinQualifiedReceipt>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinAChiefQReceiptConfirmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinAChiefQReceiptConfirmID
		{
			get
			{
				return this._SrinAChiefQReceiptConfirmID;
			}
			set
			{
				if ((this._SrinAChiefQReceiptConfirmID != value))
				{
					this.OnSrinAChiefQReceiptConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._SrinAChiefQReceiptConfirmID = value;
					this.SendPropertyChanged("SrinAChiefQReceiptConfirmID");
					this.OnSrinAChiefQReceiptConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinQualifiedReceiptID", DbType="Int NOT NULL")]
		public int SrinQualifiedReceiptID
		{
			get
			{
				return this._SrinQualifiedReceiptID;
			}
			set
			{
				if ((this._SrinQualifiedReceiptID != value))
				{
					if (this._SrinQualifiedReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinQualifiedReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinQualifiedReceiptID = value;
					this.SendPropertyChanged("SrinQualifiedReceiptID");
					this.OnSrinQualifiedReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetChief", DbType="Int NOT NULL")]
		public int AssetChief
		{
			get
			{
				return this._AssetChief;
			}
			set
			{
				if ((this._AssetChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetChiefChanging(value);
					this.SendPropertyChanging();
					this._AssetChief = value;
					this.SendPropertyChanged("AssetChief");
					this.OnAssetChiefChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinAChiefQReceiptConfirm", Storage="_EmpInfo", ThisKey="AssetChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinAChiefQReceiptConfirm.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinAChiefQReceiptConfirm.Add(this);
						this._AssetChief = value.EmpID;
					}
					else
					{
						this._AssetChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinQualifiedReceipt_SrinAChiefQReceiptConfirm", Storage="_SrinQualifiedReceipt", ThisKey="SrinQualifiedReceiptID", OtherKey="SrinQualifiedReceiptID", IsForeignKey=true)]
		public SrinQualifiedReceipt SrinQualifiedReceipt
		{
			get
			{
				return this._SrinQualifiedReceipt.Entity;
			}
			set
			{
				SrinQualifiedReceipt previousValue = this._SrinQualifiedReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinQualifiedReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinQualifiedReceipt.Entity = null;
						previousValue.SrinAChiefQReceiptConfirm.Remove(this);
					}
					this._SrinQualifiedReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinAChiefQReceiptConfirm.Add(this);
						this._SrinQualifiedReceiptID = value.SrinQualifiedReceiptID;
					}
					else
					{
						this._SrinQualifiedReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinQualifiedReceipt");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinAChiefQReceiptConfirm", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinAChiefQReceiptConfirm.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinAChiefQReceiptConfirm.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinAssetQualifiedDetails")]
	public partial class SrinAssetQualifiedDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinAssetQualifiedDetailsID;
		
		private int _SrinQualifiedReceiptID;
		
		private int _SrinInspectorVerifyDetailsID;
		
		private decimal _Gentaojian;
		
		private decimal _Metre;
		
		private decimal _Ton;
		
		private decimal _Amount;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private decimal _InUnitPrice;
		
		private decimal _OutUnitPrice;
		
		private int _ManufactureID;
		
		private string _CurUnit;
		
		private EntitySet<SrinWriteOffDetails> _SrinWriteOffDetails;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinInspectorVerifyDetails> _SrinInspectorVerifyDetails;
		
		private EntityRef<SrinQualifiedReceipt> _SrinQualifiedReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinAssetQualifiedDetailsIDChanging(int value);
    partial void OnSrinAssetQualifiedDetailsIDChanged();
    partial void OnSrinQualifiedReceiptIDChanging(int value);
    partial void OnSrinQualifiedReceiptIDChanged();
    partial void OnSrinInspectorVerifyDetailsIDChanging(int value);
    partial void OnSrinInspectorVerifyDetailsIDChanged();
    partial void OnGentaojianChanging(decimal value);
    partial void OnGentaojianChanged();
    partial void OnMetreChanging(decimal value);
    partial void OnMetreChanged();
    partial void OnTonChanging(decimal value);
    partial void OnTonChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnInUnitPriceChanging(decimal value);
    partial void OnInUnitPriceChanged();
    partial void OnOutUnitPriceChanging(decimal value);
    partial void OnOutUnitPriceChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    #endregion
		
		public SrinAssetQualifiedDetails()
		{
			this._SrinWriteOffDetails = new EntitySet<SrinWriteOffDetails>(new Action<SrinWriteOffDetails>(this.attach_SrinWriteOffDetails), new Action<SrinWriteOffDetails>(this.detach_SrinWriteOffDetails));
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinInspectorVerifyDetails = default(EntityRef<SrinInspectorVerifyDetails>);
			this._SrinQualifiedReceipt = default(EntityRef<SrinQualifiedReceipt>);
			OnCreated();
		}
		
		[Column(Storage="_SrinAssetQualifiedDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinAssetQualifiedDetailsID
		{
			get
			{
				return this._SrinAssetQualifiedDetailsID;
			}
			set
			{
				if ((this._SrinAssetQualifiedDetailsID != value))
				{
					this.OnSrinAssetQualifiedDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinAssetQualifiedDetailsID = value;
					this.SendPropertyChanged("SrinAssetQualifiedDetailsID");
					this.OnSrinAssetQualifiedDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinQualifiedReceiptID", DbType="Int NOT NULL")]
		public int SrinQualifiedReceiptID
		{
			get
			{
				return this._SrinQualifiedReceiptID;
			}
			set
			{
				if ((this._SrinQualifiedReceiptID != value))
				{
					if (this._SrinQualifiedReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinQualifiedReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinQualifiedReceiptID = value;
					this.SendPropertyChanged("SrinQualifiedReceiptID");
					this.OnSrinQualifiedReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinInspectorVerifyDetailsID", DbType="Int NOT NULL")]
		public int SrinInspectorVerifyDetailsID
		{
			get
			{
				return this._SrinInspectorVerifyDetailsID;
			}
			set
			{
				if ((this._SrinInspectorVerifyDetailsID != value))
				{
					if (this._SrinInspectorVerifyDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinInspectorVerifyDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyDetailsID = value;
					this.SendPropertyChanged("SrinInspectorVerifyDetailsID");
					this.OnSrinInspectorVerifyDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_Metre", DbType="Decimal(18,2) NOT NULL")]
		public decimal Metre
		{
			get
			{
				return this._Metre;
			}
			set
			{
				if ((this._Metre != value))
				{
					this.OnMetreChanging(value);
					this.SendPropertyChanging();
					this._Metre = value;
					this.SendPropertyChanged("Metre");
					this.OnMetreChanged();
				}
			}
		}
		
		[Column(Storage="_Ton", DbType="Decimal(18,2) NOT NULL")]
		public decimal Ton
		{
			get
			{
				return this._Ton;
			}
			set
			{
				if ((this._Ton != value))
				{
					this.OnTonChanging(value);
					this.SendPropertyChanging();
					this._Ton = value;
					this.SendPropertyChanged("Ton");
					this.OnTonChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_InUnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal InUnitPrice
		{
			get
			{
				return this._InUnitPrice;
			}
			set
			{
				if ((this._InUnitPrice != value))
				{
					this.OnInUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._InUnitPrice = value;
					this.SendPropertyChanged("InUnitPrice");
					this.OnInUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_OutUnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal OutUnitPrice
		{
			get
			{
				return this._OutUnitPrice;
			}
			set
			{
				if ((this._OutUnitPrice != value))
				{
					this.OnOutUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._OutUnitPrice = value;
					this.SendPropertyChanged("OutUnitPrice");
					this.OnOutUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Association(Name="SrinAssetQualifiedDetails_SrinWriteOffDetails", Storage="_SrinWriteOffDetails", ThisKey="SrinAssetQualifiedDetailsID", OtherKey="SrinAssetQualifiedDetailsID")]
		public EntitySet<SrinWriteOffDetails> SrinWriteOffDetails
		{
			get
			{
				return this._SrinWriteOffDetails;
			}
			set
			{
				this._SrinWriteOffDetails.Assign(value);
			}
		}
		
		[Association(Name="Manufacturer_SrinAssetQualifiedDetails", Storage="_Manufacturer", ThisKey="ManufactureID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.SrinAssetQualifiedDetails.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.SrinAssetQualifiedDetails.Add(this);
						this._ManufactureID = value.ManufacturerID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinAssetQualifiedDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinAssetQualifiedDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinAssetQualifiedDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyDetails_SrinAssetQualifiedDetails", Storage="_SrinInspectorVerifyDetails", ThisKey="SrinInspectorVerifyDetailsID", OtherKey="SrinInspectorVerifyDetailsID", IsForeignKey=true)]
		public SrinInspectorVerifyDetails SrinInspectorVerifyDetails
		{
			get
			{
				return this._SrinInspectorVerifyDetails.Entity;
			}
			set
			{
				SrinInspectorVerifyDetails previousValue = this._SrinInspectorVerifyDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinInspectorVerifyDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinInspectorVerifyDetails.Entity = null;
						previousValue.SrinAssetQualifiedDetails.Remove(this);
					}
					this._SrinInspectorVerifyDetails.Entity = value;
					if ((value != null))
					{
						value.SrinAssetQualifiedDetails.Add(this);
						this._SrinInspectorVerifyDetailsID = value.SrinInspectorVerifyDetailsID;
					}
					else
					{
						this._SrinInspectorVerifyDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinInspectorVerifyDetails");
				}
			}
		}
		
		[Association(Name="SrinQualifiedReceipt_SrinAssetQualifiedDetails", Storage="_SrinQualifiedReceipt", ThisKey="SrinQualifiedReceiptID", OtherKey="SrinQualifiedReceiptID", IsForeignKey=true)]
		public SrinQualifiedReceipt SrinQualifiedReceipt
		{
			get
			{
				return this._SrinQualifiedReceipt.Entity;
			}
			set
			{
				SrinQualifiedReceipt previousValue = this._SrinQualifiedReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinQualifiedReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinQualifiedReceipt.Entity = null;
						previousValue.SrinAssetQualifiedDetails.Remove(this);
					}
					this._SrinQualifiedReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinAssetQualifiedDetails.Add(this);
						this._SrinQualifiedReceiptID = value.SrinQualifiedReceiptID;
					}
					else
					{
						this._SrinQualifiedReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinQualifiedReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinAssetQualifiedDetails = this;
		}
		
		private void detach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinAssetQualifiedDetails = null;
		}
	}
	
	[Table(Name="dbo.SrinAssetReceiptConfirm")]
	public partial class SrinAssetReceiptConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinAssetReceiptConfirmID;
		
		private int _SrinReceiptID;
		
		private int _MaterialChief;
		
		private System.DateTime _ConfirmTime;
		
		private int _TaskID;
		
		private EntitySet<SrinAccountReceiptConfirm> _SrinAccountReceiptConfirm;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinReceipt> _SrinReceipt;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinAssetReceiptConfirmIDChanging(int value);
    partial void OnSrinAssetReceiptConfirmIDChanged();
    partial void OnSrinReceiptIDChanging(int value);
    partial void OnSrinReceiptIDChanged();
    partial void OnMaterialChiefChanging(int value);
    partial void OnMaterialChiefChanged();
    partial void OnConfirmTimeChanging(System.DateTime value);
    partial void OnConfirmTimeChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinAssetReceiptConfirm()
		{
			this._SrinAccountReceiptConfirm = new EntitySet<SrinAccountReceiptConfirm>(new Action<SrinAccountReceiptConfirm>(this.attach_SrinAccountReceiptConfirm), new Action<SrinAccountReceiptConfirm>(this.detach_SrinAccountReceiptConfirm));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinReceipt = default(EntityRef<SrinReceipt>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinAssetReceiptConfirmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinAssetReceiptConfirmID
		{
			get
			{
				return this._SrinAssetReceiptConfirmID;
			}
			set
			{
				if ((this._SrinAssetReceiptConfirmID != value))
				{
					this.OnSrinAssetReceiptConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._SrinAssetReceiptConfirmID = value;
					this.SendPropertyChanged("SrinAssetReceiptConfirmID");
					this.OnSrinAssetReceiptConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinReceiptID", DbType="Int NOT NULL")]
		public int SrinReceiptID
		{
			get
			{
				return this._SrinReceiptID;
			}
			set
			{
				if ((this._SrinReceiptID != value))
				{
					if (this._SrinReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinReceiptID = value;
					this.SendPropertyChanged("SrinReceiptID");
					this.OnSrinReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialChief", DbType="Int NOT NULL")]
		public int MaterialChief
		{
			get
			{
				return this._MaterialChief;
			}
			set
			{
				if ((this._MaterialChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialChiefChanging(value);
					this.SendPropertyChanging();
					this._MaterialChief = value;
					this.SendPropertyChanged("MaterialChief");
					this.OnMaterialChiefChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinAssetReceiptConfirm_SrinAccountReceiptConfirm", Storage="_SrinAccountReceiptConfirm", ThisKey="SrinAssetReceiptConfirmID", OtherKey="SrinAssetReceiptConfirmID")]
		public EntitySet<SrinAccountReceiptConfirm> SrinAccountReceiptConfirm
		{
			get
			{
				return this._SrinAccountReceiptConfirm;
			}
			set
			{
				this._SrinAccountReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinAssetReceiptConfirm", Storage="_EmpInfo", ThisKey="MaterialChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinAssetReceiptConfirm.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinAssetReceiptConfirm.Add(this);
						this._MaterialChief = value.EmpID;
					}
					else
					{
						this._MaterialChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinReceipt_SrinAssetReceiptConfirm", Storage="_SrinReceipt", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID", IsForeignKey=true)]
		public SrinReceipt SrinReceipt
		{
			get
			{
				return this._SrinReceipt.Entity;
			}
			set
			{
				SrinReceipt previousValue = this._SrinReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinReceipt.Entity = null;
						previousValue.SrinAssetReceiptConfirm.Remove(this);
					}
					this._SrinReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinAssetReceiptConfirm.Add(this);
						this._SrinReceiptID = value.SrinReceiptID;
					}
					else
					{
						this._SrinReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinReceipt");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinAssetReceiptConfirm", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinAssetReceiptConfirm.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinAssetReceiptConfirm.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinAccountReceiptConfirm(SrinAccountReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinAssetReceiptConfirm = this;
		}
		
		private void detach_SrinAccountReceiptConfirm(SrinAccountReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinAssetReceiptConfirm = null;
		}
	}
	
	[Table(Name="dbo.SrinDetails")]
	public partial class SrinDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinDetailsID;
		
		private int _SrinStocktakingDetailsID;
		
		private int _SrinReceiptID;
		
		private decimal _Amount;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private EntitySet<SrinMaterialRepairDetails> _SrinMaterialRepairDetails;
		
		private EntitySet<SrinMaterialVerifyDetails> _SrinMaterialVerifyDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinReceipt> _SrinReceipt;
		
		private EntityRef<SrinStocktakingDetails> _SrinStocktakingDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinDetailsIDChanging(int value);
    partial void OnSrinDetailsIDChanged();
    partial void OnSrinStocktakingDetailsIDChanging(int value);
    partial void OnSrinStocktakingDetailsIDChanged();
    partial void OnSrinReceiptIDChanging(int value);
    partial void OnSrinReceiptIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public SrinDetails()
		{
			this._SrinMaterialRepairDetails = new EntitySet<SrinMaterialRepairDetails>(new Action<SrinMaterialRepairDetails>(this.attach_SrinMaterialRepairDetails), new Action<SrinMaterialRepairDetails>(this.detach_SrinMaterialRepairDetails));
			this._SrinMaterialVerifyDetails = new EntitySet<SrinMaterialVerifyDetails>(new Action<SrinMaterialVerifyDetails>(this.attach_SrinMaterialVerifyDetails), new Action<SrinMaterialVerifyDetails>(this.detach_SrinMaterialVerifyDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinReceipt = default(EntityRef<SrinReceipt>);
			this._SrinStocktakingDetails = default(EntityRef<SrinStocktakingDetails>);
			OnCreated();
		}
		
		[Column(Storage="_SrinDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinDetailsID
		{
			get
			{
				return this._SrinDetailsID;
			}
			set
			{
				if ((this._SrinDetailsID != value))
				{
					this.OnSrinDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinDetailsID = value;
					this.SendPropertyChanged("SrinDetailsID");
					this.OnSrinDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinStocktakingDetailsID", DbType="Int NOT NULL")]
		public int SrinStocktakingDetailsID
		{
			get
			{
				return this._SrinStocktakingDetailsID;
			}
			set
			{
				if ((this._SrinStocktakingDetailsID != value))
				{
					if (this._SrinStocktakingDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinStocktakingDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingDetailsID = value;
					this.SendPropertyChanged("SrinStocktakingDetailsID");
					this.OnSrinStocktakingDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinReceiptID", DbType="Int NOT NULL")]
		public int SrinReceiptID
		{
			get
			{
				return this._SrinReceiptID;
			}
			set
			{
				if ((this._SrinReceiptID != value))
				{
					if (this._SrinReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinReceiptID = value;
					this.SendPropertyChanged("SrinReceiptID");
					this.OnSrinReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Association(Name="SrinDetails_SrinMaterialRepairDetails", Storage="_SrinMaterialRepairDetails", ThisKey="SrinDetailsID", OtherKey="SrinDetailsID")]
		public EntitySet<SrinMaterialRepairDetails> SrinMaterialRepairDetails
		{
			get
			{
				return this._SrinMaterialRepairDetails;
			}
			set
			{
				this._SrinMaterialRepairDetails.Assign(value);
			}
		}
		
		[Association(Name="SrinDetails_SrinMaterialVerifyDetails", Storage="_SrinMaterialVerifyDetails", ThisKey="SrinDetailsID", OtherKey="SrinDetailsID")]
		public EntitySet<SrinMaterialVerifyDetails> SrinMaterialVerifyDetails
		{
			get
			{
				return this._SrinMaterialVerifyDetails;
			}
			set
			{
				this._SrinMaterialVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinReceipt_SrinDetails", Storage="_SrinReceipt", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID", IsForeignKey=true)]
		public SrinReceipt SrinReceipt
		{
			get
			{
				return this._SrinReceipt.Entity;
			}
			set
			{
				SrinReceipt previousValue = this._SrinReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinReceipt.Entity = null;
						previousValue.SrinDetails.Remove(this);
					}
					this._SrinReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinDetails.Add(this);
						this._SrinReceiptID = value.SrinReceiptID;
					}
					else
					{
						this._SrinReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinReceipt");
				}
			}
		}
		
		[Association(Name="SrinStocktakingDetails_SrinDetails", Storage="_SrinStocktakingDetails", ThisKey="SrinStocktakingDetailsID", OtherKey="SrinStocktakingDetailsID", IsForeignKey=true)]
		public SrinStocktakingDetails SrinStocktakingDetails
		{
			get
			{
				return this._SrinStocktakingDetails.Entity;
			}
			set
			{
				SrinStocktakingDetails previousValue = this._SrinStocktakingDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinStocktakingDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinStocktakingDetails.Entity = null;
						previousValue.SrinDetails.Remove(this);
					}
					this._SrinStocktakingDetails.Entity = value;
					if ((value != null))
					{
						value.SrinDetails.Add(this);
						this._SrinStocktakingDetailsID = value.SrinStocktakingDetailsID;
					}
					else
					{
						this._SrinStocktakingDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinStocktakingDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinDetails = this;
		}
		
		private void detach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinDetails = null;
		}
		
		private void attach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinDetails = this;
		}
		
		private void detach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinDetails = null;
		}
	}
	
	[Table(Name="dbo.SrinInspectorVerifyDetails")]
	public partial class SrinInspectorVerifyDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinInspectorVerifyDetailsID;
		
		private int _SrinInspectorVerifyTransferID;
		
		private int _SrinMaterialVerifyDetailsID;
		
		private decimal _QualifiedGentaojian;
		
		private decimal _RepairGentaojian;
		
		private decimal _RejectGentaojian;
		
		private string _VerifyCode;
		
		private System.DateTime _RealVerifyTime;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private EntitySet<SrinAssetQualifiedDetails> _SrinAssetQualifiedDetails;
		
		private EntitySet<SrinInspectorVerifyRDetails> _SrinInspectorVerifyRDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinInspectorVerifyTransfer> _SrinInspectorVerifyTransfer;
		
		private EntityRef<SrinMaterialVerifyDetails> _SrinMaterialVerifyDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinInspectorVerifyDetailsIDChanging(int value);
    partial void OnSrinInspectorVerifyDetailsIDChanged();
    partial void OnSrinInspectorVerifyTransferIDChanging(int value);
    partial void OnSrinInspectorVerifyTransferIDChanged();
    partial void OnSrinMaterialVerifyDetailsIDChanging(int value);
    partial void OnSrinMaterialVerifyDetailsIDChanged();
    partial void OnQualifiedGentaojianChanging(decimal value);
    partial void OnQualifiedGentaojianChanged();
    partial void OnRepairGentaojianChanging(decimal value);
    partial void OnRepairGentaojianChanged();
    partial void OnRejectGentaojianChanging(decimal value);
    partial void OnRejectGentaojianChanged();
    partial void OnVerifyCodeChanging(string value);
    partial void OnVerifyCodeChanged();
    partial void OnRealVerifyTimeChanging(System.DateTime value);
    partial void OnRealVerifyTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    #endregion
		
		public SrinInspectorVerifyDetails()
		{
			this._SrinAssetQualifiedDetails = new EntitySet<SrinAssetQualifiedDetails>(new Action<SrinAssetQualifiedDetails>(this.attach_SrinAssetQualifiedDetails), new Action<SrinAssetQualifiedDetails>(this.detach_SrinAssetQualifiedDetails));
			this._SrinInspectorVerifyRDetails = new EntitySet<SrinInspectorVerifyRDetails>(new Action<SrinInspectorVerifyRDetails>(this.attach_SrinInspectorVerifyRDetails), new Action<SrinInspectorVerifyRDetails>(this.detach_SrinInspectorVerifyRDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinInspectorVerifyTransfer = default(EntityRef<SrinInspectorVerifyTransfer>);
			this._SrinMaterialVerifyDetails = default(EntityRef<SrinMaterialVerifyDetails>);
			OnCreated();
		}
		
		[Column(Storage="_SrinInspectorVerifyDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinInspectorVerifyDetailsID
		{
			get
			{
				return this._SrinInspectorVerifyDetailsID;
			}
			set
			{
				if ((this._SrinInspectorVerifyDetailsID != value))
				{
					this.OnSrinInspectorVerifyDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyDetailsID = value;
					this.SendPropertyChanged("SrinInspectorVerifyDetailsID");
					this.OnSrinInspectorVerifyDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinInspectorVerifyTransferID", DbType="Int NOT NULL")]
		public int SrinInspectorVerifyTransferID
		{
			get
			{
				return this._SrinInspectorVerifyTransferID;
			}
			set
			{
				if ((this._SrinInspectorVerifyTransferID != value))
				{
					if (this._SrinInspectorVerifyTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinInspectorVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyTransferID = value;
					this.SendPropertyChanged("SrinInspectorVerifyTransferID");
					this.OnSrinInspectorVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinMaterialVerifyDetailsID", DbType="Int NOT NULL")]
		public int SrinMaterialVerifyDetailsID
		{
			get
			{
				return this._SrinMaterialVerifyDetailsID;
			}
			set
			{
				if ((this._SrinMaterialVerifyDetailsID != value))
				{
					if (this._SrinMaterialVerifyDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinMaterialVerifyDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinMaterialVerifyDetailsID = value;
					this.SendPropertyChanged("SrinMaterialVerifyDetailsID");
					this.OnSrinMaterialVerifyDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_QualifiedGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal QualifiedGentaojian
		{
			get
			{
				return this._QualifiedGentaojian;
			}
			set
			{
				if ((this._QualifiedGentaojian != value))
				{
					this.OnQualifiedGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QualifiedGentaojian = value;
					this.SendPropertyChanged("QualifiedGentaojian");
					this.OnQualifiedGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RepairGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RepairGentaojian
		{
			get
			{
				return this._RepairGentaojian;
			}
			set
			{
				if ((this._RepairGentaojian != value))
				{
					this.OnRepairGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RepairGentaojian = value;
					this.SendPropertyChanged("RepairGentaojian");
					this.OnRepairGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RejectGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RejectGentaojian
		{
			get
			{
				return this._RejectGentaojian;
			}
			set
			{
				if ((this._RejectGentaojian != value))
				{
					this.OnRejectGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RejectGentaojian = value;
					this.SendPropertyChanged("RejectGentaojian");
					this.OnRejectGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_VerifyCode", DbType="NVarChar(50)")]
		public string VerifyCode
		{
			get
			{
				return this._VerifyCode;
			}
			set
			{
				if ((this._VerifyCode != value))
				{
					this.OnVerifyCodeChanging(value);
					this.SendPropertyChanging();
					this._VerifyCode = value;
					this.SendPropertyChanged("VerifyCode");
					this.OnVerifyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RealVerifyTime", DbType="DateTime NOT NULL")]
		public System.DateTime RealVerifyTime
		{
			get
			{
				return this._RealVerifyTime;
			}
			set
			{
				if ((this._RealVerifyTime != value))
				{
					this.OnRealVerifyTimeChanging(value);
					this.SendPropertyChanging();
					this._RealVerifyTime = value;
					this.SendPropertyChanged("RealVerifyTime");
					this.OnRealVerifyTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyDetails_SrinAssetQualifiedDetails", Storage="_SrinAssetQualifiedDetails", ThisKey="SrinInspectorVerifyDetailsID", OtherKey="SrinInspectorVerifyDetailsID")]
		public EntitySet<SrinAssetQualifiedDetails> SrinAssetQualifiedDetails
		{
			get
			{
				return this._SrinAssetQualifiedDetails;
			}
			set
			{
				this._SrinAssetQualifiedDetails.Assign(value);
			}
		}
		
		[Association(Name="SrinInspectorVerifyDetails_SrinInspectorVerifyRDetails", Storage="_SrinInspectorVerifyRDetails", ThisKey="SrinInspectorVerifyDetailsID", OtherKey="SrinInspectorVerifyDetailsID")]
		public EntitySet<SrinInspectorVerifyRDetails> SrinInspectorVerifyRDetails
		{
			get
			{
				return this._SrinInspectorVerifyRDetails;
			}
			set
			{
				this._SrinInspectorVerifyRDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinInspectorVerifyDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinInspectorVerifyDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyTransfer_SrinInspectorVerifyDetails", Storage="_SrinInspectorVerifyTransfer", ThisKey="SrinInspectorVerifyTransferID", OtherKey="SrinInspectorVerifyTransferID", IsForeignKey=true)]
		public SrinInspectorVerifyTransfer SrinInspectorVerifyTransfer
		{
			get
			{
				return this._SrinInspectorVerifyTransfer.Entity;
			}
			set
			{
				SrinInspectorVerifyTransfer previousValue = this._SrinInspectorVerifyTransfer.Entity;
				if (((previousValue != value) 
							|| (this._SrinInspectorVerifyTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinInspectorVerifyTransfer.Entity = null;
						previousValue.SrinInspectorVerifyDetails.Remove(this);
					}
					this._SrinInspectorVerifyTransfer.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyDetails.Add(this);
						this._SrinInspectorVerifyTransferID = value.SrinInspectorVerifyTransferID;
					}
					else
					{
						this._SrinInspectorVerifyTransferID = default(int);
					}
					this.SendPropertyChanged("SrinInspectorVerifyTransfer");
				}
			}
		}
		
		[Association(Name="SrinMaterialVerifyDetails_SrinInspectorVerifyDetails", Storage="_SrinMaterialVerifyDetails", ThisKey="SrinMaterialVerifyDetailsID", OtherKey="SrinMaterialVerifyDetailsID", IsForeignKey=true)]
		public SrinMaterialVerifyDetails SrinMaterialVerifyDetails
		{
			get
			{
				return this._SrinMaterialVerifyDetails.Entity;
			}
			set
			{
				SrinMaterialVerifyDetails previousValue = this._SrinMaterialVerifyDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinMaterialVerifyDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinMaterialVerifyDetails.Entity = null;
						previousValue.SrinInspectorVerifyDetails.Remove(this);
					}
					this._SrinMaterialVerifyDetails.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyDetails.Add(this);
						this._SrinMaterialVerifyDetailsID = value.SrinMaterialVerifyDetailsID;
					}
					else
					{
						this._SrinMaterialVerifyDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinMaterialVerifyDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyDetails = this;
		}
		
		private void detach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyDetails = null;
		}
		
		private void attach_SrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyDetails = this;
		}
		
		private void detach_SrinInspectorVerifyRDetails(SrinInspectorVerifyRDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyDetails = null;
		}
	}
	
	[Table(Name="dbo.SrinInspectorVerifyRDetails")]
	public partial class SrinInspectorVerifyRDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinInspectorVerifyRDetailsID;
		
		private int _SrinInspectorVerifyDetailsID;
		
		private decimal _QualifiedGentaojian;
		
		private decimal _RejectGentaojian;
		
		private string _VerifyCode;
		
		private System.DateTime _VerifyTime;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinInspectorVerifyDetails> _SrinInspectorVerifyDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinInspectorVerifyRDetailsIDChanging(int value);
    partial void OnSrinInspectorVerifyRDetailsIDChanged();
    partial void OnSrinInspectorVerifyDetailsIDChanging(int value);
    partial void OnSrinInspectorVerifyDetailsIDChanged();
    partial void OnQualifiedGentaojianChanging(decimal value);
    partial void OnQualifiedGentaojianChanged();
    partial void OnRejectGentaojianChanging(decimal value);
    partial void OnRejectGentaojianChanged();
    partial void OnVerifyCodeChanging(string value);
    partial void OnVerifyCodeChanged();
    partial void OnVerifyTimeChanging(System.DateTime value);
    partial void OnVerifyTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    #endregion
		
		public SrinInspectorVerifyRDetails()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinInspectorVerifyDetails = default(EntityRef<SrinInspectorVerifyDetails>);
			OnCreated();
		}
		
		[Column(Storage="_SrinInspectorVerifyRDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinInspectorVerifyRDetailsID
		{
			get
			{
				return this._SrinInspectorVerifyRDetailsID;
			}
			set
			{
				if ((this._SrinInspectorVerifyRDetailsID != value))
				{
					this.OnSrinInspectorVerifyRDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyRDetailsID = value;
					this.SendPropertyChanged("SrinInspectorVerifyRDetailsID");
					this.OnSrinInspectorVerifyRDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinInspectorVerifyDetailsID", DbType="Int NOT NULL")]
		public int SrinInspectorVerifyDetailsID
		{
			get
			{
				return this._SrinInspectorVerifyDetailsID;
			}
			set
			{
				if ((this._SrinInspectorVerifyDetailsID != value))
				{
					if (this._SrinInspectorVerifyDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinInspectorVerifyDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyDetailsID = value;
					this.SendPropertyChanged("SrinInspectorVerifyDetailsID");
					this.OnSrinInspectorVerifyDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_QualifiedGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal QualifiedGentaojian
		{
			get
			{
				return this._QualifiedGentaojian;
			}
			set
			{
				if ((this._QualifiedGentaojian != value))
				{
					this.OnQualifiedGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QualifiedGentaojian = value;
					this.SendPropertyChanged("QualifiedGentaojian");
					this.OnQualifiedGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RejectGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RejectGentaojian
		{
			get
			{
				return this._RejectGentaojian;
			}
			set
			{
				if ((this._RejectGentaojian != value))
				{
					this.OnRejectGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RejectGentaojian = value;
					this.SendPropertyChanged("RejectGentaojian");
					this.OnRejectGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_VerifyCode", DbType="NVarChar(50)")]
		public string VerifyCode
		{
			get
			{
				return this._VerifyCode;
			}
			set
			{
				if ((this._VerifyCode != value))
				{
					this.OnVerifyCodeChanging(value);
					this.SendPropertyChanging();
					this._VerifyCode = value;
					this.SendPropertyChanged("VerifyCode");
					this.OnVerifyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_VerifyTime", DbType="DateTime NOT NULL")]
		public System.DateTime VerifyTime
		{
			get
			{
				return this._VerifyTime;
			}
			set
			{
				if ((this._VerifyTime != value))
				{
					this.OnVerifyTimeChanging(value);
					this.SendPropertyChanging();
					this._VerifyTime = value;
					this.SendPropertyChanged("VerifyTime");
					this.OnVerifyTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinInspectorVerifyRDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinInspectorVerifyRDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyRDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyDetails_SrinInspectorVerifyRDetails", Storage="_SrinInspectorVerifyDetails", ThisKey="SrinInspectorVerifyDetailsID", OtherKey="SrinInspectorVerifyDetailsID", IsForeignKey=true)]
		public SrinInspectorVerifyDetails SrinInspectorVerifyDetails
		{
			get
			{
				return this._SrinInspectorVerifyDetails.Entity;
			}
			set
			{
				SrinInspectorVerifyDetails previousValue = this._SrinInspectorVerifyDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinInspectorVerifyDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinInspectorVerifyDetails.Entity = null;
						previousValue.SrinInspectorVerifyRDetails.Remove(this);
					}
					this._SrinInspectorVerifyDetails.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyRDetails.Add(this);
						this._SrinInspectorVerifyDetailsID = value.SrinInspectorVerifyDetailsID;
					}
					else
					{
						this._SrinInspectorVerifyDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinInspectorVerifyDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinInspectorVerifyTransfer")]
	public partial class SrinInspectorVerifyTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinInspectorVerifyTransferID;
		
		private int _SrinProduceVerifyTransferID;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private int _TaskID;
		
		private EntitySet<SrinInspectorVerifyDetails> _SrinInspectorVerifyDetails;
		
		private EntitySet<SrinQualifiedReceipt> _SrinQualifiedReceipt;
		
		private EntitySet<SrinRepairReport> _SrinRepairReport;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinProduceVerifyTransfer> _SrinProduceVerifyTransfer;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinInspectorVerifyTransferIDChanging(int value);
    partial void OnSrinInspectorVerifyTransferIDChanged();
    partial void OnSrinProduceVerifyTransferIDChanging(int value);
    partial void OnSrinProduceVerifyTransferIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinInspectorVerifyTransfer()
		{
			this._SrinInspectorVerifyDetails = new EntitySet<SrinInspectorVerifyDetails>(new Action<SrinInspectorVerifyDetails>(this.attach_SrinInspectorVerifyDetails), new Action<SrinInspectorVerifyDetails>(this.detach_SrinInspectorVerifyDetails));
			this._SrinQualifiedReceipt = new EntitySet<SrinQualifiedReceipt>(new Action<SrinQualifiedReceipt>(this.attach_SrinQualifiedReceipt), new Action<SrinQualifiedReceipt>(this.detach_SrinQualifiedReceipt));
			this._SrinRepairReport = new EntitySet<SrinRepairReport>(new Action<SrinRepairReport>(this.attach_SrinRepairReport), new Action<SrinRepairReport>(this.detach_SrinRepairReport));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinProduceVerifyTransfer = default(EntityRef<SrinProduceVerifyTransfer>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinInspectorVerifyTransferID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinInspectorVerifyTransferID
		{
			get
			{
				return this._SrinInspectorVerifyTransferID;
			}
			set
			{
				if ((this._SrinInspectorVerifyTransferID != value))
				{
					this.OnSrinInspectorVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyTransferID = value;
					this.SendPropertyChanged("SrinInspectorVerifyTransferID");
					this.OnSrinInspectorVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinProduceVerifyTransferID", DbType="Int NOT NULL")]
		public int SrinProduceVerifyTransferID
		{
			get
			{
				return this._SrinProduceVerifyTransferID;
			}
			set
			{
				if ((this._SrinProduceVerifyTransferID != value))
				{
					if (this._SrinProduceVerifyTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinProduceVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinProduceVerifyTransferID = value;
					this.SendPropertyChanged("SrinProduceVerifyTransferID");
					this.OnSrinProduceVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyTransfer_SrinInspectorVerifyDetails", Storage="_SrinInspectorVerifyDetails", ThisKey="SrinInspectorVerifyTransferID", OtherKey="SrinInspectorVerifyTransferID")]
		public EntitySet<SrinInspectorVerifyDetails> SrinInspectorVerifyDetails
		{
			get
			{
				return this._SrinInspectorVerifyDetails;
			}
			set
			{
				this._SrinInspectorVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="SrinInspectorVerifyTransfer_SrinQualifiedReceipt", Storage="_SrinQualifiedReceipt", ThisKey="SrinInspectorVerifyTransferID", OtherKey="SrinInspectorVerifyTransferID")]
		public EntitySet<SrinQualifiedReceipt> SrinQualifiedReceipt
		{
			get
			{
				return this._SrinQualifiedReceipt;
			}
			set
			{
				this._SrinQualifiedReceipt.Assign(value);
			}
		}
		
		[Association(Name="SrinInspectorVerifyTransfer_SrinRepairReport", Storage="_SrinRepairReport", ThisKey="SrinInspectorVerifyTransferID", OtherKey="SrinInspectorVerifyTransferID")]
		public EntitySet<SrinRepairReport> SrinRepairReport
		{
			get
			{
				return this._SrinRepairReport;
			}
			set
			{
				this._SrinRepairReport.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinInspectorVerifyTransfer", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinInspectorVerifyTransfer.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyTransfer.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinProduceVerifyTransfer_SrinInspectorVerifyTransfer", Storage="_SrinProduceVerifyTransfer", ThisKey="SrinProduceVerifyTransferID", OtherKey="SrinProduceVerifyTransferID", IsForeignKey=true)]
		public SrinProduceVerifyTransfer SrinProduceVerifyTransfer
		{
			get
			{
				return this._SrinProduceVerifyTransfer.Entity;
			}
			set
			{
				SrinProduceVerifyTransfer previousValue = this._SrinProduceVerifyTransfer.Entity;
				if (((previousValue != value) 
							|| (this._SrinProduceVerifyTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinProduceVerifyTransfer.Entity = null;
						previousValue.SrinInspectorVerifyTransfer.Remove(this);
					}
					this._SrinProduceVerifyTransfer.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyTransfer.Add(this);
						this._SrinProduceVerifyTransferID = value.SrinProduceVerifyTransferID;
					}
					else
					{
						this._SrinProduceVerifyTransferID = default(int);
					}
					this.SendPropertyChanged("SrinProduceVerifyTransfer");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinInspectorVerifyTransfer", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinInspectorVerifyTransfer.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinInspectorVerifyTransfer.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinInspectorVerifyDetails(SrinInspectorVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyTransfer = this;
		}
		
		private void detach_SrinInspectorVerifyDetails(SrinInspectorVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyTransfer = null;
		}
		
		private void attach_SrinQualifiedReceipt(SrinQualifiedReceipt entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyTransfer = this;
		}
		
		private void detach_SrinQualifiedReceipt(SrinQualifiedReceipt entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyTransfer = null;
		}
		
		private void attach_SrinRepairReport(SrinRepairReport entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyTransfer = this;
		}
		
		private void detach_SrinRepairReport(SrinRepairReport entity)
		{
			this.SendPropertyChanging();
			entity.SrinInspectorVerifyTransfer = null;
		}
	}
	
	[Table(Name="dbo.SrinMaterialRepairAudit")]
	public partial class SrinMaterialRepairAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinMaterialRepairAuditID;
		
		private int _SrinRepairPlanID;
		
		private string _AuditResult;
		
		private string _AuditOpinion;
		
		private System.DateTime _AuditTime;
		
		private int _MaterialChief;
		
		private int _TaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinRepairPlan> _SrinRepairPlan;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinMaterialRepairAuditIDChanging(int value);
    partial void OnSrinMaterialRepairAuditIDChanged();
    partial void OnSrinRepairPlanIDChanging(int value);
    partial void OnSrinRepairPlanIDChanged();
    partial void OnAuditResultChanging(string value);
    partial void OnAuditResultChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditTimeChanging(System.DateTime value);
    partial void OnAuditTimeChanged();
    partial void OnMaterialChiefChanging(int value);
    partial void OnMaterialChiefChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinMaterialRepairAudit()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinRepairPlan = default(EntityRef<SrinRepairPlan>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinMaterialRepairAuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinMaterialRepairAuditID
		{
			get
			{
				return this._SrinMaterialRepairAuditID;
			}
			set
			{
				if ((this._SrinMaterialRepairAuditID != value))
				{
					this.OnSrinMaterialRepairAuditIDChanging(value);
					this.SendPropertyChanging();
					this._SrinMaterialRepairAuditID = value;
					this.SendPropertyChanged("SrinMaterialRepairAuditID");
					this.OnSrinMaterialRepairAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinRepairPlanID", DbType="Int NOT NULL")]
		public int SrinRepairPlanID
		{
			get
			{
				return this._SrinRepairPlanID;
			}
			set
			{
				if ((this._SrinRepairPlanID != value))
				{
					if (this._SrinRepairPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinRepairPlanIDChanging(value);
					this.SendPropertyChanging();
					this._SrinRepairPlanID = value;
					this.SendPropertyChanged("SrinRepairPlanID");
					this.OnSrinRepairPlanIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditResult", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string AuditResult
		{
			get
			{
				return this._AuditResult;
			}
			set
			{
				if ((this._AuditResult != value))
				{
					this.OnAuditResultChanging(value);
					this.SendPropertyChanging();
					this._AuditResult = value;
					this.SendPropertyChanged("AuditResult");
					this.OnAuditResultChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTime", DbType="DateTime NOT NULL")]
		public System.DateTime AuditTime
		{
			get
			{
				return this._AuditTime;
			}
			set
			{
				if ((this._AuditTime != value))
				{
					this.OnAuditTimeChanging(value);
					this.SendPropertyChanging();
					this._AuditTime = value;
					this.SendPropertyChanged("AuditTime");
					this.OnAuditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialChief", DbType="Int NOT NULL")]
		public int MaterialChief
		{
			get
			{
				return this._MaterialChief;
			}
			set
			{
				if ((this._MaterialChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialChiefChanging(value);
					this.SendPropertyChanging();
					this._MaterialChief = value;
					this.SendPropertyChanged("MaterialChief");
					this.OnMaterialChiefChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinMaterialRepairAudit", Storage="_EmpInfo", ThisKey="MaterialChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinMaterialRepairAudit.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairAudit.Add(this);
						this._MaterialChief = value.EmpID;
					}
					else
					{
						this._MaterialChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinRepairPlan_SrinMaterialRepairAudit", Storage="_SrinRepairPlan", ThisKey="SrinRepairPlanID", OtherKey="SrinRepairPlanID", IsForeignKey=true)]
		public SrinRepairPlan SrinRepairPlan
		{
			get
			{
				return this._SrinRepairPlan.Entity;
			}
			set
			{
				SrinRepairPlan previousValue = this._SrinRepairPlan.Entity;
				if (((previousValue != value) 
							|| (this._SrinRepairPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinRepairPlan.Entity = null;
						previousValue.SrinMaterialRepairAudit.Remove(this);
					}
					this._SrinRepairPlan.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairAudit.Add(this);
						this._SrinRepairPlanID = value.SrinRepairPlanID;
					}
					else
					{
						this._SrinRepairPlanID = default(int);
					}
					this.SendPropertyChanged("SrinRepairPlan");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinMaterialRepairAudit", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinMaterialRepairAudit.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairAudit.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinMaterialRepairDetails")]
	public partial class SrinMaterialRepairDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinMaterialRepairDetailsID;
		
		private int _SrinRepairPlanID;
		
		private int _SrinDetailsID;
		
		private decimal _Gentaojian;
		
		private System.DateTime _ArrivalTime;
		
		private string _RepairReason;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private System.Nullable<System.DateTime> _PlanTime;
		
		private System.Nullable<System.DateTime> _RealTime;
		
		private decimal _RealGentaojian;
		
		private int _ManufactureID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<SrinDetails> _SrinDetails;
		
		private EntityRef<SrinRepairPlan> _SrinRepairPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinMaterialRepairDetailsIDChanging(int value);
    partial void OnSrinMaterialRepairDetailsIDChanged();
    partial void OnSrinRepairPlanIDChanging(int value);
    partial void OnSrinRepairPlanIDChanged();
    partial void OnSrinDetailsIDChanging(int value);
    partial void OnSrinDetailsIDChanged();
    partial void OnGentaojianChanging(decimal value);
    partial void OnGentaojianChanged();
    partial void OnArrivalTimeChanging(System.DateTime value);
    partial void OnArrivalTimeChanged();
    partial void OnRepairReasonChanging(string value);
    partial void OnRepairReasonChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnPlanTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanTimeChanged();
    partial void OnRealTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRealTimeChanged();
    partial void OnRealGentaojianChanging(decimal value);
    partial void OnRealGentaojianChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    #endregion
		
		public SrinMaterialRepairDetails()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._SrinDetails = default(EntityRef<SrinDetails>);
			this._SrinRepairPlan = default(EntityRef<SrinRepairPlan>);
			OnCreated();
		}
		
		[Column(Storage="_SrinMaterialRepairDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinMaterialRepairDetailsID
		{
			get
			{
				return this._SrinMaterialRepairDetailsID;
			}
			set
			{
				if ((this._SrinMaterialRepairDetailsID != value))
				{
					this.OnSrinMaterialRepairDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinMaterialRepairDetailsID = value;
					this.SendPropertyChanged("SrinMaterialRepairDetailsID");
					this.OnSrinMaterialRepairDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinRepairPlanID", DbType="Int NOT NULL")]
		public int SrinRepairPlanID
		{
			get
			{
				return this._SrinRepairPlanID;
			}
			set
			{
				if ((this._SrinRepairPlanID != value))
				{
					if (this._SrinRepairPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinRepairPlanIDChanging(value);
					this.SendPropertyChanging();
					this._SrinRepairPlanID = value;
					this.SendPropertyChanged("SrinRepairPlanID");
					this.OnSrinRepairPlanIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinDetailsID", DbType="Int NOT NULL")]
		public int SrinDetailsID
		{
			get
			{
				return this._SrinDetailsID;
			}
			set
			{
				if ((this._SrinDetailsID != value))
				{
					if (this._SrinDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinDetailsID = value;
					this.SendPropertyChanged("SrinDetailsID");
					this.OnSrinDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_ArrivalTime", DbType="DateTime NOT NULL")]
		public System.DateTime ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[Column(Storage="_RepairReason", DbType="NVarChar(200)")]
		public string RepairReason
		{
			get
			{
				return this._RepairReason;
			}
			set
			{
				if ((this._RepairReason != value))
				{
					this.OnRepairReasonChanging(value);
					this.SendPropertyChanging();
					this._RepairReason = value;
					this.SendPropertyChanged("RepairReason");
					this.OnRepairReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_PlanTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PlanTime
		{
			get
			{
				return this._PlanTime;
			}
			set
			{
				if ((this._PlanTime != value))
				{
					this.OnPlanTimeChanging(value);
					this.SendPropertyChanging();
					this._PlanTime = value;
					this.SendPropertyChanged("PlanTime");
					this.OnPlanTimeChanged();
				}
			}
		}
		
		[Column(Storage="_RealTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> RealTime
		{
			get
			{
				return this._RealTime;
			}
			set
			{
				if ((this._RealTime != value))
				{
					this.OnRealTimeChanging(value);
					this.SendPropertyChanging();
					this._RealTime = value;
					this.SendPropertyChanged("RealTime");
					this.OnRealTimeChanged();
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this.OnRealGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RealGentaojian = value;
					this.SendPropertyChanged("RealGentaojian");
					this.OnRealGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinMaterialRepairDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinMaterialRepairDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_SrinMaterialRepairDetails", Storage="_Manufacturer", ThisKey="ManufactureID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.SrinMaterialRepairDetails.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairDetails.Add(this);
						this._ManufactureID = value.ManufacturerID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="SrinDetails_SrinMaterialRepairDetails", Storage="_SrinDetails", ThisKey="SrinDetailsID", OtherKey="SrinDetailsID", IsForeignKey=true)]
		public SrinDetails SrinDetails
		{
			get
			{
				return this._SrinDetails.Entity;
			}
			set
			{
				SrinDetails previousValue = this._SrinDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinDetails.Entity = null;
						previousValue.SrinMaterialRepairDetails.Remove(this);
					}
					this._SrinDetails.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairDetails.Add(this);
						this._SrinDetailsID = value.SrinDetailsID;
					}
					else
					{
						this._SrinDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinDetails");
				}
			}
		}
		
		[Association(Name="SrinRepairPlan_SrinMaterialRepairDetails", Storage="_SrinRepairPlan", ThisKey="SrinRepairPlanID", OtherKey="SrinRepairPlanID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SrinRepairPlan SrinRepairPlan
		{
			get
			{
				return this._SrinRepairPlan.Entity;
			}
			set
			{
				SrinRepairPlan previousValue = this._SrinRepairPlan.Entity;
				if (((previousValue != value) 
							|| (this._SrinRepairPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinRepairPlan.Entity = null;
						previousValue.SrinMaterialRepairDetails.Remove(this);
					}
					this._SrinRepairPlan.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialRepairDetails.Add(this);
						this._SrinRepairPlanID = value.SrinRepairPlanID;
					}
					else
					{
						this._SrinRepairPlanID = default(int);
					}
					this.SendPropertyChanged("SrinRepairPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinMaterialVerifyDetails")]
	public partial class SrinMaterialVerifyDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinMaterialVerifyDetailsID;
		
		private int _SrinVerifyTransferID;
		
		private int _SrinDetailsID;
		
		private System.DateTime _RetrieveTime;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private int _ManufactureID;
		
		private EntitySet<SrinInspectorVerifyDetails> _SrinInspectorVerifyDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<SrinDetails> _SrinDetails;
		
		private EntityRef<SrinVerifyTransfer> _SrinVerifyTransfer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinMaterialVerifyDetailsIDChanging(int value);
    partial void OnSrinMaterialVerifyDetailsIDChanged();
    partial void OnSrinVerifyTransferIDChanging(int value);
    partial void OnSrinVerifyTransferIDChanged();
    partial void OnSrinDetailsIDChanging(int value);
    partial void OnSrinDetailsIDChanged();
    partial void OnRetrieveTimeChanging(System.DateTime value);
    partial void OnRetrieveTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnManufactureIDChanging(int value);
    partial void OnManufactureIDChanged();
    #endregion
		
		public SrinMaterialVerifyDetails()
		{
			this._SrinInspectorVerifyDetails = new EntitySet<SrinInspectorVerifyDetails>(new Action<SrinInspectorVerifyDetails>(this.attach_SrinInspectorVerifyDetails), new Action<SrinInspectorVerifyDetails>(this.detach_SrinInspectorVerifyDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._SrinDetails = default(EntityRef<SrinDetails>);
			this._SrinVerifyTransfer = default(EntityRef<SrinVerifyTransfer>);
			OnCreated();
		}
		
		[Column(Storage="_SrinMaterialVerifyDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinMaterialVerifyDetailsID
		{
			get
			{
				return this._SrinMaterialVerifyDetailsID;
			}
			set
			{
				if ((this._SrinMaterialVerifyDetailsID != value))
				{
					this.OnSrinMaterialVerifyDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinMaterialVerifyDetailsID = value;
					this.SendPropertyChanged("SrinMaterialVerifyDetailsID");
					this.OnSrinMaterialVerifyDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinVerifyTransferID", DbType="Int NOT NULL")]
		public int SrinVerifyTransferID
		{
			get
			{
				return this._SrinVerifyTransferID;
			}
			set
			{
				if ((this._SrinVerifyTransferID != value))
				{
					if (this._SrinVerifyTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinVerifyTransferID = value;
					this.SendPropertyChanged("SrinVerifyTransferID");
					this.OnSrinVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinDetailsID", DbType="Int NOT NULL")]
		public int SrinDetailsID
		{
			get
			{
				return this._SrinDetailsID;
			}
			set
			{
				if ((this._SrinDetailsID != value))
				{
					if (this._SrinDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinDetailsID = value;
					this.SendPropertyChanged("SrinDetailsID");
					this.OnSrinDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_RetrieveTime", DbType="DateTime NOT NULL")]
		public System.DateTime RetrieveTime
		{
			get
			{
				return this._RetrieveTime;
			}
			set
			{
				if ((this._RetrieveTime != value))
				{
					this.OnRetrieveTimeChanging(value);
					this.SendPropertyChanging();
					this._RetrieveTime = value;
					this.SendPropertyChanged("RetrieveTime");
					this.OnRetrieveTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_ManufactureID", DbType="Int NOT NULL")]
		public int ManufactureID
		{
			get
			{
				return this._ManufactureID;
			}
			set
			{
				if ((this._ManufactureID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufactureIDChanging(value);
					this.SendPropertyChanging();
					this._ManufactureID = value;
					this.SendPropertyChanged("ManufactureID");
					this.OnManufactureIDChanged();
				}
			}
		}
		
		[Association(Name="SrinMaterialVerifyDetails_SrinInspectorVerifyDetails", Storage="_SrinInspectorVerifyDetails", ThisKey="SrinMaterialVerifyDetailsID", OtherKey="SrinMaterialVerifyDetailsID")]
		public EntitySet<SrinInspectorVerifyDetails> SrinInspectorVerifyDetails
		{
			get
			{
				return this._SrinInspectorVerifyDetails;
			}
			set
			{
				this._SrinInspectorVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinMaterialVerifyDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinMaterialVerifyDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialVerifyDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_SrinMaterialVerifyDetails", Storage="_Manufacturer", ThisKey="ManufactureID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.SrinMaterialVerifyDetails.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialVerifyDetails.Add(this);
						this._ManufactureID = value.ManufacturerID;
					}
					else
					{
						this._ManufactureID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="SrinDetails_SrinMaterialVerifyDetails", Storage="_SrinDetails", ThisKey="SrinDetailsID", OtherKey="SrinDetailsID", IsForeignKey=true)]
		public SrinDetails SrinDetails
		{
			get
			{
				return this._SrinDetails.Entity;
			}
			set
			{
				SrinDetails previousValue = this._SrinDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinDetails.Entity = null;
						previousValue.SrinMaterialVerifyDetails.Remove(this);
					}
					this._SrinDetails.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialVerifyDetails.Add(this);
						this._SrinDetailsID = value.SrinDetailsID;
					}
					else
					{
						this._SrinDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinDetails");
				}
			}
		}
		
		[Association(Name="SrinVerifyTransfer_SrinMaterialVerifyDetails", Storage="_SrinVerifyTransfer", ThisKey="SrinVerifyTransferID", OtherKey="SrinVerifyTransferID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SrinVerifyTransfer SrinVerifyTransfer
		{
			get
			{
				return this._SrinVerifyTransfer.Entity;
			}
			set
			{
				SrinVerifyTransfer previousValue = this._SrinVerifyTransfer.Entity;
				if (((previousValue != value) 
							|| (this._SrinVerifyTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinVerifyTransfer.Entity = null;
						previousValue.SrinMaterialVerifyDetails.Remove(this);
					}
					this._SrinVerifyTransfer.Entity = value;
					if ((value != null))
					{
						value.SrinMaterialVerifyDetails.Add(this);
						this._SrinVerifyTransferID = value.SrinVerifyTransferID;
					}
					else
					{
						this._SrinVerifyTransferID = default(int);
					}
					this.SendPropertyChanged("SrinVerifyTransfer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinInspectorVerifyDetails(SrinInspectorVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinMaterialVerifyDetails = this;
		}
		
		private void detach_SrinInspectorVerifyDetails(SrinInspectorVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinMaterialVerifyDetails = null;
		}
	}
	
	[Table(Name="dbo.SrinProduceVerifyTransfer")]
	public partial class SrinProduceVerifyTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinProduceVerifyTransferID;
		
		private int _SrinVerifyTransferID;
		
		private System.DateTime _VerifyTime;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private int _TaskID;
		
		private EntitySet<SrinInspectorVerifyTransfer> _SrinInspectorVerifyTransfer;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinVerifyTransfer> _SrinVerifyTransfer;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinProduceVerifyTransferIDChanging(int value);
    partial void OnSrinProduceVerifyTransferIDChanged();
    partial void OnSrinVerifyTransferIDChanging(int value);
    partial void OnSrinVerifyTransferIDChanged();
    partial void OnVerifyTimeChanging(System.DateTime value);
    partial void OnVerifyTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinProduceVerifyTransfer()
		{
			this._SrinInspectorVerifyTransfer = new EntitySet<SrinInspectorVerifyTransfer>(new Action<SrinInspectorVerifyTransfer>(this.attach_SrinInspectorVerifyTransfer), new Action<SrinInspectorVerifyTransfer>(this.detach_SrinInspectorVerifyTransfer));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinVerifyTransfer = default(EntityRef<SrinVerifyTransfer>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinProduceVerifyTransferID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinProduceVerifyTransferID
		{
			get
			{
				return this._SrinProduceVerifyTransferID;
			}
			set
			{
				if ((this._SrinProduceVerifyTransferID != value))
				{
					this.OnSrinProduceVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinProduceVerifyTransferID = value;
					this.SendPropertyChanged("SrinProduceVerifyTransferID");
					this.OnSrinProduceVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinVerifyTransferID", DbType="Int NOT NULL")]
		public int SrinVerifyTransferID
		{
			get
			{
				return this._SrinVerifyTransferID;
			}
			set
			{
				if ((this._SrinVerifyTransferID != value))
				{
					if (this._SrinVerifyTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinVerifyTransferID = value;
					this.SendPropertyChanged("SrinVerifyTransferID");
					this.OnSrinVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_VerifyTime", DbType="DateTime NOT NULL")]
		public System.DateTime VerifyTime
		{
			get
			{
				return this._VerifyTime;
			}
			set
			{
				if ((this._VerifyTime != value))
				{
					this.OnVerifyTimeChanging(value);
					this.SendPropertyChanging();
					this._VerifyTime = value;
					this.SendPropertyChanged("VerifyTime");
					this.OnVerifyTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinProduceVerifyTransfer_SrinInspectorVerifyTransfer", Storage="_SrinInspectorVerifyTransfer", ThisKey="SrinProduceVerifyTransferID", OtherKey="SrinProduceVerifyTransferID")]
		public EntitySet<SrinInspectorVerifyTransfer> SrinInspectorVerifyTransfer
		{
			get
			{
				return this._SrinInspectorVerifyTransfer;
			}
			set
			{
				this._SrinInspectorVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinProduceVerifyTransfer", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinProduceVerifyTransfer.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinProduceVerifyTransfer.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinVerifyTransfer_SrinProduceVerifyTransfer", Storage="_SrinVerifyTransfer", ThisKey="SrinVerifyTransferID", OtherKey="SrinVerifyTransferID", IsForeignKey=true)]
		public SrinVerifyTransfer SrinVerifyTransfer
		{
			get
			{
				return this._SrinVerifyTransfer.Entity;
			}
			set
			{
				SrinVerifyTransfer previousValue = this._SrinVerifyTransfer.Entity;
				if (((previousValue != value) 
							|| (this._SrinVerifyTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinVerifyTransfer.Entity = null;
						previousValue.SrinProduceVerifyTransfer.Remove(this);
					}
					this._SrinVerifyTransfer.Entity = value;
					if ((value != null))
					{
						value.SrinProduceVerifyTransfer.Add(this);
						this._SrinVerifyTransferID = value.SrinVerifyTransferID;
					}
					else
					{
						this._SrinVerifyTransferID = default(int);
					}
					this.SendPropertyChanged("SrinVerifyTransfer");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinProduceVerifyTransfer", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinProduceVerifyTransfer.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinProduceVerifyTransfer.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SrinProduceVerifyTransfer = this;
		}
		
		private void detach_SrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SrinProduceVerifyTransfer = null;
		}
	}
	
	[Table(Name="dbo.SrinQualifiedReceipt")]
	public partial class SrinQualifiedReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinQualifiedReceiptID;
		
		private int _SrinInspectorVerifyTransferID;
		
		private string _SrinQualifiedReceiptCode;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private System.Nullable<int> _TaskID;
		
		private string _Remark;
		
		private bool _NeedWriteOff;
		
		private EntitySet<SrinAChiefQReceiptConfirm> _SrinAChiefQReceiptConfirm;
		
		private EntitySet<SrinAssetQualifiedDetails> _SrinAssetQualifiedDetails;
		
		private EntitySet<SrinWriteOffDetails> _SrinWriteOffDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinInspectorVerifyTransfer> _SrinInspectorVerifyTransfer;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinQualifiedReceiptIDChanging(int value);
    partial void OnSrinQualifiedReceiptIDChanged();
    partial void OnSrinInspectorVerifyTransferIDChanging(int value);
    partial void OnSrinInspectorVerifyTransferIDChanged();
    partial void OnSrinQualifiedReceiptCodeChanging(string value);
    partial void OnSrinQualifiedReceiptCodeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnTaskIDChanging(System.Nullable<int> value);
    partial void OnTaskIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnNeedWriteOffChanging(bool value);
    partial void OnNeedWriteOffChanged();
    #endregion
		
		public SrinQualifiedReceipt()
		{
			this._SrinAChiefQReceiptConfirm = new EntitySet<SrinAChiefQReceiptConfirm>(new Action<SrinAChiefQReceiptConfirm>(this.attach_SrinAChiefQReceiptConfirm), new Action<SrinAChiefQReceiptConfirm>(this.detach_SrinAChiefQReceiptConfirm));
			this._SrinAssetQualifiedDetails = new EntitySet<SrinAssetQualifiedDetails>(new Action<SrinAssetQualifiedDetails>(this.attach_SrinAssetQualifiedDetails), new Action<SrinAssetQualifiedDetails>(this.detach_SrinAssetQualifiedDetails));
			this._SrinWriteOffDetails = new EntitySet<SrinWriteOffDetails>(new Action<SrinWriteOffDetails>(this.attach_SrinWriteOffDetails), new Action<SrinWriteOffDetails>(this.detach_SrinWriteOffDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinInspectorVerifyTransfer = default(EntityRef<SrinInspectorVerifyTransfer>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinQualifiedReceiptID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinQualifiedReceiptID
		{
			get
			{
				return this._SrinQualifiedReceiptID;
			}
			set
			{
				if ((this._SrinQualifiedReceiptID != value))
				{
					this.OnSrinQualifiedReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinQualifiedReceiptID = value;
					this.SendPropertyChanged("SrinQualifiedReceiptID");
					this.OnSrinQualifiedReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinInspectorVerifyTransferID", DbType="Int NOT NULL")]
		public int SrinInspectorVerifyTransferID
		{
			get
			{
				return this._SrinInspectorVerifyTransferID;
			}
			set
			{
				if ((this._SrinInspectorVerifyTransferID != value))
				{
					if (this._SrinInspectorVerifyTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinInspectorVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyTransferID = value;
					this.SendPropertyChanged("SrinInspectorVerifyTransferID");
					this.OnSrinInspectorVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinQualifiedReceiptCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SrinQualifiedReceiptCode
		{
			get
			{
				return this._SrinQualifiedReceiptCode;
			}
			set
			{
				if ((this._SrinQualifiedReceiptCode != value))
				{
					this.OnSrinQualifiedReceiptCodeChanging(value);
					this.SendPropertyChanging();
					this._SrinQualifiedReceiptCode = value;
					this.SendPropertyChanged("SrinQualifiedReceiptCode");
					this.OnSrinQualifiedReceiptCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int")]
		public System.Nullable<int> TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_NeedWriteOff", DbType="Bit NOT NULL")]
		public bool NeedWriteOff
		{
			get
			{
				return this._NeedWriteOff;
			}
			set
			{
				if ((this._NeedWriteOff != value))
				{
					this.OnNeedWriteOffChanging(value);
					this.SendPropertyChanging();
					this._NeedWriteOff = value;
					this.SendPropertyChanged("NeedWriteOff");
					this.OnNeedWriteOffChanged();
				}
			}
		}
		
		[Association(Name="SrinQualifiedReceipt_SrinAChiefQReceiptConfirm", Storage="_SrinAChiefQReceiptConfirm", ThisKey="SrinQualifiedReceiptID", OtherKey="SrinQualifiedReceiptID")]
		public EntitySet<SrinAChiefQReceiptConfirm> SrinAChiefQReceiptConfirm
		{
			get
			{
				return this._SrinAChiefQReceiptConfirm;
			}
			set
			{
				this._SrinAChiefQReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="SrinQualifiedReceipt_SrinAssetQualifiedDetails", Storage="_SrinAssetQualifiedDetails", ThisKey="SrinQualifiedReceiptID", OtherKey="SrinQualifiedReceiptID")]
		public EntitySet<SrinAssetQualifiedDetails> SrinAssetQualifiedDetails
		{
			get
			{
				return this._SrinAssetQualifiedDetails;
			}
			set
			{
				this._SrinAssetQualifiedDetails.Assign(value);
			}
		}
		
		[Association(Name="SrinQualifiedReceipt_SrinWriteOffDetails", Storage="_SrinWriteOffDetails", ThisKey="SrinQualifiedReceiptID", OtherKey="SrinQualifiedReceiptID")]
		public EntitySet<SrinWriteOffDetails> SrinWriteOffDetails
		{
			get
			{
				return this._SrinWriteOffDetails;
			}
			set
			{
				this._SrinWriteOffDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinQualifiedReceipt", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinQualifiedReceipt.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinQualifiedReceipt.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyTransfer_SrinQualifiedReceipt", Storage="_SrinInspectorVerifyTransfer", ThisKey="SrinInspectorVerifyTransferID", OtherKey="SrinInspectorVerifyTransferID", IsForeignKey=true)]
		public SrinInspectorVerifyTransfer SrinInspectorVerifyTransfer
		{
			get
			{
				return this._SrinInspectorVerifyTransfer.Entity;
			}
			set
			{
				SrinInspectorVerifyTransfer previousValue = this._SrinInspectorVerifyTransfer.Entity;
				if (((previousValue != value) 
							|| (this._SrinInspectorVerifyTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinInspectorVerifyTransfer.Entity = null;
						previousValue.SrinQualifiedReceipt.Remove(this);
					}
					this._SrinInspectorVerifyTransfer.Entity = value;
					if ((value != null))
					{
						value.SrinQualifiedReceipt.Add(this);
						this._SrinInspectorVerifyTransferID = value.SrinInspectorVerifyTransferID;
					}
					else
					{
						this._SrinInspectorVerifyTransferID = default(int);
					}
					this.SendPropertyChanged("SrinInspectorVerifyTransfer");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinQualifiedReceipt", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinQualifiedReceipt.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinQualifiedReceipt.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinQualifiedReceipt = this;
		}
		
		private void detach_SrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinQualifiedReceipt = null;
		}
		
		private void attach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinQualifiedReceipt = this;
		}
		
		private void detach_SrinAssetQualifiedDetails(SrinAssetQualifiedDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinQualifiedReceipt = null;
		}
		
		private void attach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinQualifiedReceipt = this;
		}
		
		private void detach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinQualifiedReceipt = null;
		}
	}
	
	[Table(Name="dbo.SrinReceipt")]
	public partial class SrinReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinReceiptID;
		
		private int _SrinStocktakingConfirmID;
		
		private string _SrinReceiptCode;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private System.Nullable<int> _TaskID;
		
		private string _Remark;
		
		private EntitySet<SrinAssetReceiptConfirm> _SrinAssetReceiptConfirm;
		
		private EntitySet<SrinDetails> _SrinDetails;
		
		private EntitySet<SrinRepairPlan> _SrinRepairPlan;
		
		private EntitySet<SrinVerifyTransfer> _SrinVerifyTransfer;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinStocktakingConfirm> _SrinStocktakingConfirm;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinReceiptIDChanging(int value);
    partial void OnSrinReceiptIDChanged();
    partial void OnSrinStocktakingConfirmIDChanging(int value);
    partial void OnSrinStocktakingConfirmIDChanged();
    partial void OnSrinReceiptCodeChanging(string value);
    partial void OnSrinReceiptCodeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnTaskIDChanging(System.Nullable<int> value);
    partial void OnTaskIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public SrinReceipt()
		{
			this._SrinAssetReceiptConfirm = new EntitySet<SrinAssetReceiptConfirm>(new Action<SrinAssetReceiptConfirm>(this.attach_SrinAssetReceiptConfirm), new Action<SrinAssetReceiptConfirm>(this.detach_SrinAssetReceiptConfirm));
			this._SrinDetails = new EntitySet<SrinDetails>(new Action<SrinDetails>(this.attach_SrinDetails), new Action<SrinDetails>(this.detach_SrinDetails));
			this._SrinRepairPlan = new EntitySet<SrinRepairPlan>(new Action<SrinRepairPlan>(this.attach_SrinRepairPlan), new Action<SrinRepairPlan>(this.detach_SrinRepairPlan));
			this._SrinVerifyTransfer = new EntitySet<SrinVerifyTransfer>(new Action<SrinVerifyTransfer>(this.attach_SrinVerifyTransfer), new Action<SrinVerifyTransfer>(this.detach_SrinVerifyTransfer));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinStocktakingConfirm = default(EntityRef<SrinStocktakingConfirm>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinReceiptID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinReceiptID
		{
			get
			{
				return this._SrinReceiptID;
			}
			set
			{
				if ((this._SrinReceiptID != value))
				{
					this.OnSrinReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinReceiptID = value;
					this.SendPropertyChanged("SrinReceiptID");
					this.OnSrinReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinStocktakingConfirmID", DbType="Int NOT NULL")]
		public int SrinStocktakingConfirmID
		{
			get
			{
				return this._SrinStocktakingConfirmID;
			}
			set
			{
				if ((this._SrinStocktakingConfirmID != value))
				{
					if (this._SrinStocktakingConfirm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinStocktakingConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingConfirmID = value;
					this.SendPropertyChanged("SrinStocktakingConfirmID");
					this.OnSrinStocktakingConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinReceiptCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SrinReceiptCode
		{
			get
			{
				return this._SrinReceiptCode;
			}
			set
			{
				if ((this._SrinReceiptCode != value))
				{
					this.OnSrinReceiptCodeChanging(value);
					this.SendPropertyChanging();
					this._SrinReceiptCode = value;
					this.SendPropertyChanged("SrinReceiptCode");
					this.OnSrinReceiptCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int")]
		public System.Nullable<int> TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="SrinReceipt_SrinAssetReceiptConfirm", Storage="_SrinAssetReceiptConfirm", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID")]
		public EntitySet<SrinAssetReceiptConfirm> SrinAssetReceiptConfirm
		{
			get
			{
				return this._SrinAssetReceiptConfirm;
			}
			set
			{
				this._SrinAssetReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="SrinReceipt_SrinDetails", Storage="_SrinDetails", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID")]
		public EntitySet<SrinDetails> SrinDetails
		{
			get
			{
				return this._SrinDetails;
			}
			set
			{
				this._SrinDetails.Assign(value);
			}
		}
		
		[Association(Name="SrinReceipt_SrinRepairPlan", Storage="_SrinRepairPlan", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID")]
		public EntitySet<SrinRepairPlan> SrinRepairPlan
		{
			get
			{
				return this._SrinRepairPlan;
			}
			set
			{
				this._SrinRepairPlan.Assign(value);
			}
		}
		
		[Association(Name="SrinReceipt_SrinVerifyTransfer", Storage="_SrinVerifyTransfer", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID")]
		public EntitySet<SrinVerifyTransfer> SrinVerifyTransfer
		{
			get
			{
				return this._SrinVerifyTransfer;
			}
			set
			{
				this._SrinVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinReceipt", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinReceipt.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinReceipt.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinStocktakingConfirm_SrinReceipt", Storage="_SrinStocktakingConfirm", ThisKey="SrinStocktakingConfirmID", OtherKey="SrinStocktakingConfirmID", IsForeignKey=true)]
		public SrinStocktakingConfirm SrinStocktakingConfirm
		{
			get
			{
				return this._SrinStocktakingConfirm.Entity;
			}
			set
			{
				SrinStocktakingConfirm previousValue = this._SrinStocktakingConfirm.Entity;
				if (((previousValue != value) 
							|| (this._SrinStocktakingConfirm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinStocktakingConfirm.Entity = null;
						previousValue.SrinReceipt.Remove(this);
					}
					this._SrinStocktakingConfirm.Entity = value;
					if ((value != null))
					{
						value.SrinReceipt.Add(this);
						this._SrinStocktakingConfirmID = value.SrinStocktakingConfirmID;
					}
					else
					{
						this._SrinStocktakingConfirmID = default(int);
					}
					this.SendPropertyChanged("SrinStocktakingConfirm");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinReceipt", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinReceipt.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinReceipt.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinAssetReceiptConfirm(SrinAssetReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = this;
		}
		
		private void detach_SrinAssetReceiptConfirm(SrinAssetReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = null;
		}
		
		private void attach_SrinDetails(SrinDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = this;
		}
		
		private void detach_SrinDetails(SrinDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = null;
		}
		
		private void attach_SrinRepairPlan(SrinRepairPlan entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = this;
		}
		
		private void detach_SrinRepairPlan(SrinRepairPlan entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = null;
		}
		
		private void attach_SrinVerifyTransfer(SrinVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = this;
		}
		
		private void detach_SrinVerifyTransfer(SrinVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SrinReceipt = null;
		}
	}
	
	[Table(Name="dbo.SrinRepairPlan")]
	public partial class SrinRepairPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinRepairPlanID;
		
		private int _SrinReceiptID;
		
		private string _SrinRepairPlanCode;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private int _TaskID;
		
		private EntitySet<SrinMaterialRepairAudit> _SrinMaterialRepairAudit;
		
		private EntitySet<SrinMaterialRepairDetails> _SrinMaterialRepairDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinReceipt> _SrinReceipt;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinRepairPlanIDChanging(int value);
    partial void OnSrinRepairPlanIDChanged();
    partial void OnSrinReceiptIDChanging(int value);
    partial void OnSrinReceiptIDChanged();
    partial void OnSrinRepairPlanCodeChanging(string value);
    partial void OnSrinRepairPlanCodeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinRepairPlan()
		{
			this._SrinMaterialRepairAudit = new EntitySet<SrinMaterialRepairAudit>(new Action<SrinMaterialRepairAudit>(this.attach_SrinMaterialRepairAudit), new Action<SrinMaterialRepairAudit>(this.detach_SrinMaterialRepairAudit));
			this._SrinMaterialRepairDetails = new EntitySet<SrinMaterialRepairDetails>(new Action<SrinMaterialRepairDetails>(this.attach_SrinMaterialRepairDetails), new Action<SrinMaterialRepairDetails>(this.detach_SrinMaterialRepairDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinReceipt = default(EntityRef<SrinReceipt>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinRepairPlanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinRepairPlanID
		{
			get
			{
				return this._SrinRepairPlanID;
			}
			set
			{
				if ((this._SrinRepairPlanID != value))
				{
					this.OnSrinRepairPlanIDChanging(value);
					this.SendPropertyChanging();
					this._SrinRepairPlanID = value;
					this.SendPropertyChanged("SrinRepairPlanID");
					this.OnSrinRepairPlanIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinReceiptID", DbType="Int NOT NULL")]
		public int SrinReceiptID
		{
			get
			{
				return this._SrinReceiptID;
			}
			set
			{
				if ((this._SrinReceiptID != value))
				{
					if (this._SrinReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinReceiptID = value;
					this.SendPropertyChanged("SrinReceiptID");
					this.OnSrinReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinRepairPlanCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SrinRepairPlanCode
		{
			get
			{
				return this._SrinRepairPlanCode;
			}
			set
			{
				if ((this._SrinRepairPlanCode != value))
				{
					this.OnSrinRepairPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._SrinRepairPlanCode = value;
					this.SendPropertyChanged("SrinRepairPlanCode");
					this.OnSrinRepairPlanCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinRepairPlan_SrinMaterialRepairAudit", Storage="_SrinMaterialRepairAudit", ThisKey="SrinRepairPlanID", OtherKey="SrinRepairPlanID")]
		public EntitySet<SrinMaterialRepairAudit> SrinMaterialRepairAudit
		{
			get
			{
				return this._SrinMaterialRepairAudit;
			}
			set
			{
				this._SrinMaterialRepairAudit.Assign(value);
			}
		}
		
		[Association(Name="SrinRepairPlan_SrinMaterialRepairDetails", Storage="_SrinMaterialRepairDetails", ThisKey="SrinRepairPlanID", OtherKey="SrinRepairPlanID")]
		public EntitySet<SrinMaterialRepairDetails> SrinMaterialRepairDetails
		{
			get
			{
				return this._SrinMaterialRepairDetails;
			}
			set
			{
				this._SrinMaterialRepairDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinRepairPlan", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinRepairPlan.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinRepairPlan.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinReceipt_SrinRepairPlan", Storage="_SrinReceipt", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID", IsForeignKey=true)]
		public SrinReceipt SrinReceipt
		{
			get
			{
				return this._SrinReceipt.Entity;
			}
			set
			{
				SrinReceipt previousValue = this._SrinReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinReceipt.Entity = null;
						previousValue.SrinRepairPlan.Remove(this);
					}
					this._SrinReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinRepairPlan.Add(this);
						this._SrinReceiptID = value.SrinReceiptID;
					}
					else
					{
						this._SrinReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinReceipt");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinRepairPlan", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinRepairPlan.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinRepairPlan.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinMaterialRepairAudit(SrinMaterialRepairAudit entity)
		{
			this.SendPropertyChanging();
			entity.SrinRepairPlan = this;
		}
		
		private void detach_SrinMaterialRepairAudit(SrinMaterialRepairAudit entity)
		{
			this.SendPropertyChanging();
			entity.SrinRepairPlan = null;
		}
		
		private void attach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinRepairPlan = this;
		}
		
		private void detach_SrinMaterialRepairDetails(SrinMaterialRepairDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinRepairPlan = null;
		}
	}
	
	[Table(Name="dbo.SrinRepairReport")]
	public partial class SrinRepairReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinRepairReportID;
		
		private int _SrinInspectorVerifyTransferID;
		
		private string _SrinRepairReportCode;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private int _TaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinInspectorVerifyTransfer> _SrinInspectorVerifyTransfer;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinRepairReportIDChanging(int value);
    partial void OnSrinRepairReportIDChanged();
    partial void OnSrinInspectorVerifyTransferIDChanging(int value);
    partial void OnSrinInspectorVerifyTransferIDChanged();
    partial void OnSrinRepairReportCodeChanging(string value);
    partial void OnSrinRepairReportCodeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinRepairReport()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinInspectorVerifyTransfer = default(EntityRef<SrinInspectorVerifyTransfer>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinRepairReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinRepairReportID
		{
			get
			{
				return this._SrinRepairReportID;
			}
			set
			{
				if ((this._SrinRepairReportID != value))
				{
					this.OnSrinRepairReportIDChanging(value);
					this.SendPropertyChanging();
					this._SrinRepairReportID = value;
					this.SendPropertyChanged("SrinRepairReportID");
					this.OnSrinRepairReportIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinInspectorVerifyTransferID", DbType="Int NOT NULL")]
		public int SrinInspectorVerifyTransferID
		{
			get
			{
				return this._SrinInspectorVerifyTransferID;
			}
			set
			{
				if ((this._SrinInspectorVerifyTransferID != value))
				{
					if (this._SrinInspectorVerifyTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinInspectorVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinInspectorVerifyTransferID = value;
					this.SendPropertyChanged("SrinInspectorVerifyTransferID");
					this.OnSrinInspectorVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinRepairReportCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SrinRepairReportCode
		{
			get
			{
				return this._SrinRepairReportCode;
			}
			set
			{
				if ((this._SrinRepairReportCode != value))
				{
					this.OnSrinRepairReportCodeChanging(value);
					this.SendPropertyChanging();
					this._SrinRepairReportCode = value;
					this.SendPropertyChanged("SrinRepairReportCode");
					this.OnSrinRepairReportCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinRepairReport", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinRepairReport.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinRepairReport.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinInspectorVerifyTransfer_SrinRepairReport", Storage="_SrinInspectorVerifyTransfer", ThisKey="SrinInspectorVerifyTransferID", OtherKey="SrinInspectorVerifyTransferID", IsForeignKey=true)]
		public SrinInspectorVerifyTransfer SrinInspectorVerifyTransfer
		{
			get
			{
				return this._SrinInspectorVerifyTransfer.Entity;
			}
			set
			{
				SrinInspectorVerifyTransfer previousValue = this._SrinInspectorVerifyTransfer.Entity;
				if (((previousValue != value) 
							|| (this._SrinInspectorVerifyTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinInspectorVerifyTransfer.Entity = null;
						previousValue.SrinRepairReport.Remove(this);
					}
					this._SrinInspectorVerifyTransfer.Entity = value;
					if ((value != null))
					{
						value.SrinRepairReport.Add(this);
						this._SrinInspectorVerifyTransferID = value.SrinInspectorVerifyTransferID;
					}
					else
					{
						this._SrinInspectorVerifyTransferID = default(int);
					}
					this.SendPropertyChanged("SrinInspectorVerifyTransfer");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinRepairReport", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinRepairReport.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinRepairReport.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SrinStocktaking")]
	public partial class SrinStocktaking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinStocktakingID;
		
		private int _SrinSubDocID;
		
		private string _StocktakingResult;
		
		private System.DateTime _StocktakingDate;
		
		private string _StocktakingProblem;
		
		private int _Creator;
		
		private int _TaskID;
		
		private EntitySet<SrinStocktakingConfirm> _SrinStocktakingConfirm;
		
		private EntitySet<SrinStocktakingDetails> _SrinStocktakingDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinSubDoc> _SrinSubDoc;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinStocktakingIDChanging(int value);
    partial void OnSrinStocktakingIDChanged();
    partial void OnSrinSubDocIDChanging(int value);
    partial void OnSrinSubDocIDChanged();
    partial void OnStocktakingResultChanging(string value);
    partial void OnStocktakingResultChanged();
    partial void OnStocktakingDateChanging(System.DateTime value);
    partial void OnStocktakingDateChanged();
    partial void OnStocktakingProblemChanging(string value);
    partial void OnStocktakingProblemChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinStocktaking()
		{
			this._SrinStocktakingConfirm = new EntitySet<SrinStocktakingConfirm>(new Action<SrinStocktakingConfirm>(this.attach_SrinStocktakingConfirm), new Action<SrinStocktakingConfirm>(this.detach_SrinStocktakingConfirm));
			this._SrinStocktakingDetails = new EntitySet<SrinStocktakingDetails>(new Action<SrinStocktakingDetails>(this.attach_SrinStocktakingDetails), new Action<SrinStocktakingDetails>(this.detach_SrinStocktakingDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinSubDoc = default(EntityRef<SrinSubDoc>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinStocktakingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinStocktakingID
		{
			get
			{
				return this._SrinStocktakingID;
			}
			set
			{
				if ((this._SrinStocktakingID != value))
				{
					this.OnSrinStocktakingIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingID = value;
					this.SendPropertyChanged("SrinStocktakingID");
					this.OnSrinStocktakingIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinSubDocID", DbType="Int NOT NULL")]
		public int SrinSubDocID
		{
			get
			{
				return this._SrinSubDocID;
			}
			set
			{
				if ((this._SrinSubDocID != value))
				{
					if (this._SrinSubDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinSubDocIDChanging(value);
					this.SendPropertyChanging();
					this._SrinSubDocID = value;
					this.SendPropertyChanged("SrinSubDocID");
					this.OnSrinSubDocIDChanged();
				}
			}
		}
		
		[Column(Storage="_StocktakingResult", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string StocktakingResult
		{
			get
			{
				return this._StocktakingResult;
			}
			set
			{
				if ((this._StocktakingResult != value))
				{
					this.OnStocktakingResultChanging(value);
					this.SendPropertyChanging();
					this._StocktakingResult = value;
					this.SendPropertyChanged("StocktakingResult");
					this.OnStocktakingResultChanged();
				}
			}
		}
		
		[Column(Storage="_StocktakingDate", DbType="DateTime NOT NULL")]
		public System.DateTime StocktakingDate
		{
			get
			{
				return this._StocktakingDate;
			}
			set
			{
				if ((this._StocktakingDate != value))
				{
					this.OnStocktakingDateChanging(value);
					this.SendPropertyChanging();
					this._StocktakingDate = value;
					this.SendPropertyChanged("StocktakingDate");
					this.OnStocktakingDateChanged();
				}
			}
		}
		
		[Column(Storage="_StocktakingProblem", DbType="NVarChar(MAX)")]
		public string StocktakingProblem
		{
			get
			{
				return this._StocktakingProblem;
			}
			set
			{
				if ((this._StocktakingProblem != value))
				{
					this.OnStocktakingProblemChanging(value);
					this.SendPropertyChanging();
					this._StocktakingProblem = value;
					this.SendPropertyChanged("StocktakingProblem");
					this.OnStocktakingProblemChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinStocktaking_SrinStocktakingConfirm", Storage="_SrinStocktakingConfirm", ThisKey="SrinStocktakingID", OtherKey="SrinStocktakingID")]
		public EntitySet<SrinStocktakingConfirm> SrinStocktakingConfirm
		{
			get
			{
				return this._SrinStocktakingConfirm;
			}
			set
			{
				this._SrinStocktakingConfirm.Assign(value);
			}
		}
		
		[Association(Name="SrinStocktaking_SrinStocktakingDetails", Storage="_SrinStocktakingDetails", ThisKey="SrinStocktakingID", OtherKey="SrinStocktakingID")]
		public EntitySet<SrinStocktakingDetails> SrinStocktakingDetails
		{
			get
			{
				return this._SrinStocktakingDetails;
			}
			set
			{
				this._SrinStocktakingDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinStocktaking", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinStocktaking.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinStocktaking.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinSubDoc_SrinStocktaking", Storage="_SrinSubDoc", ThisKey="SrinSubDocID", OtherKey="SrinSubDocID", IsForeignKey=true)]
		public SrinSubDoc SrinSubDoc
		{
			get
			{
				return this._SrinSubDoc.Entity;
			}
			set
			{
				SrinSubDoc previousValue = this._SrinSubDoc.Entity;
				if (((previousValue != value) 
							|| (this._SrinSubDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinSubDoc.Entity = null;
						previousValue.SrinStocktaking.Remove(this);
					}
					this._SrinSubDoc.Entity = value;
					if ((value != null))
					{
						value.SrinStocktaking.Add(this);
						this._SrinSubDocID = value.SrinSubDocID;
					}
					else
					{
						this._SrinSubDocID = default(int);
					}
					this.SendPropertyChanged("SrinSubDoc");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinStocktaking", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinStocktaking.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinStocktaking.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinStocktakingConfirm(SrinStocktakingConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktaking = this;
		}
		
		private void detach_SrinStocktakingConfirm(SrinStocktakingConfirm entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktaking = null;
		}
		
		private void attach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktaking = this;
		}
		
		private void detach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktaking = null;
		}
	}
	
	[Table(Name="dbo.SrinStocktakingConfirm")]
	public partial class SrinStocktakingConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinStocktakingConfirmID;
		
		private int _SrinStocktakingID;
		
		private int _MaterialChief;
		
		private System.DateTime _ConfirmTime;
		
		private int _TaskID;
		
		private EntitySet<SrinReceipt> _SrinReceipt;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinStocktaking> _SrinStocktaking;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinStocktakingConfirmIDChanging(int value);
    partial void OnSrinStocktakingConfirmIDChanged();
    partial void OnSrinStocktakingIDChanging(int value);
    partial void OnSrinStocktakingIDChanged();
    partial void OnMaterialChiefChanging(int value);
    partial void OnMaterialChiefChanged();
    partial void OnConfirmTimeChanging(System.DateTime value);
    partial void OnConfirmTimeChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinStocktakingConfirm()
		{
			this._SrinReceipt = new EntitySet<SrinReceipt>(new Action<SrinReceipt>(this.attach_SrinReceipt), new Action<SrinReceipt>(this.detach_SrinReceipt));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinStocktaking = default(EntityRef<SrinStocktaking>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinStocktakingConfirmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinStocktakingConfirmID
		{
			get
			{
				return this._SrinStocktakingConfirmID;
			}
			set
			{
				if ((this._SrinStocktakingConfirmID != value))
				{
					this.OnSrinStocktakingConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingConfirmID = value;
					this.SendPropertyChanged("SrinStocktakingConfirmID");
					this.OnSrinStocktakingConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinStocktakingID", DbType="Int NOT NULL")]
		public int SrinStocktakingID
		{
			get
			{
				return this._SrinStocktakingID;
			}
			set
			{
				if ((this._SrinStocktakingID != value))
				{
					if (this._SrinStocktaking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinStocktakingIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingID = value;
					this.SendPropertyChanged("SrinStocktakingID");
					this.OnSrinStocktakingIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialChief", DbType="Int NOT NULL")]
		public int MaterialChief
		{
			get
			{
				return this._MaterialChief;
			}
			set
			{
				if ((this._MaterialChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialChiefChanging(value);
					this.SendPropertyChanging();
					this._MaterialChief = value;
					this.SendPropertyChanged("MaterialChief");
					this.OnMaterialChiefChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinStocktakingConfirm_SrinReceipt", Storage="_SrinReceipt", ThisKey="SrinStocktakingConfirmID", OtherKey="SrinStocktakingConfirmID")]
		public EntitySet<SrinReceipt> SrinReceipt
		{
			get
			{
				return this._SrinReceipt;
			}
			set
			{
				this._SrinReceipt.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinStocktakingConfirm", Storage="_EmpInfo", ThisKey="MaterialChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinStocktakingConfirm.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingConfirm.Add(this);
						this._MaterialChief = value.EmpID;
					}
					else
					{
						this._MaterialChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinStocktaking_SrinStocktakingConfirm", Storage="_SrinStocktaking", ThisKey="SrinStocktakingID", OtherKey="SrinStocktakingID", IsForeignKey=true)]
		public SrinStocktaking SrinStocktaking
		{
			get
			{
				return this._SrinStocktaking.Entity;
			}
			set
			{
				SrinStocktaking previousValue = this._SrinStocktaking.Entity;
				if (((previousValue != value) 
							|| (this._SrinStocktaking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinStocktaking.Entity = null;
						previousValue.SrinStocktakingConfirm.Remove(this);
					}
					this._SrinStocktaking.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingConfirm.Add(this);
						this._SrinStocktakingID = value.SrinStocktakingID;
					}
					else
					{
						this._SrinStocktakingID = default(int);
					}
					this.SendPropertyChanged("SrinStocktaking");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinStocktakingConfirm", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinStocktakingConfirm.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingConfirm.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinReceipt(SrinReceipt entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktakingConfirm = this;
		}
		
		private void detach_SrinReceipt(SrinReceipt entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktakingConfirm = null;
		}
	}
	
	[Table(Name="dbo.SrinStocktakingDetails")]
	public partial class SrinStocktakingDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinStocktakingDetailsID;
		
		private int _SrinSubDetailsID;
		
		private int _SrinStocktakingID;
		
		private System.Nullable<int> _StorageID;
		
		private System.Nullable<int> _PileID;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private EntitySet<SrinDetails> _SrinDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<SrinStocktaking> _SrinStocktaking;
		
		private EntityRef<SrinSubDetails> _SrinSubDetails;
		
		private EntityRef<StorageInfo> _StorageInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinStocktakingDetailsIDChanging(int value);
    partial void OnSrinStocktakingDetailsIDChanged();
    partial void OnSrinSubDetailsIDChanging(int value);
    partial void OnSrinSubDetailsIDChanged();
    partial void OnSrinStocktakingIDChanging(int value);
    partial void OnSrinStocktakingIDChanged();
    partial void OnStorageIDChanging(System.Nullable<int> value);
    partial void OnStorageIDChanged();
    partial void OnPileIDChanging(System.Nullable<int> value);
    partial void OnPileIDChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public SrinStocktakingDetails()
		{
			this._SrinDetails = new EntitySet<SrinDetails>(new Action<SrinDetails>(this.attach_SrinDetails), new Action<SrinDetails>(this.detach_SrinDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._SrinStocktaking = default(EntityRef<SrinStocktaking>);
			this._SrinSubDetails = default(EntityRef<SrinSubDetails>);
			this._StorageInfo = default(EntityRef<StorageInfo>);
			OnCreated();
		}
		
		[Column(Storage="_SrinStocktakingDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinStocktakingDetailsID
		{
			get
			{
				return this._SrinStocktakingDetailsID;
			}
			set
			{
				if ((this._SrinStocktakingDetailsID != value))
				{
					this.OnSrinStocktakingDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingDetailsID = value;
					this.SendPropertyChanged("SrinStocktakingDetailsID");
					this.OnSrinStocktakingDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinSubDetailsID", DbType="Int NOT NULL")]
		public int SrinSubDetailsID
		{
			get
			{
				return this._SrinSubDetailsID;
			}
			set
			{
				if ((this._SrinSubDetailsID != value))
				{
					if (this._SrinSubDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinSubDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinSubDetailsID = value;
					this.SendPropertyChanged("SrinSubDetailsID");
					this.OnSrinSubDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinStocktakingID", DbType="Int NOT NULL")]
		public int SrinStocktakingID
		{
			get
			{
				return this._SrinStocktakingID;
			}
			set
			{
				if ((this._SrinStocktakingID != value))
				{
					if (this._SrinStocktaking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinStocktakingIDChanging(value);
					this.SendPropertyChanging();
					this._SrinStocktakingID = value;
					this.SendPropertyChanged("SrinStocktakingID");
					this.OnSrinStocktakingIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int")]
		public System.Nullable<int> StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					if (this._StorageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int")]
		public System.Nullable<int> PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="SrinStocktakingDetails_SrinDetails", Storage="_SrinDetails", ThisKey="SrinStocktakingDetailsID", OtherKey="SrinStocktakingDetailsID")]
		public EntitySet<SrinDetails> SrinDetails
		{
			get
			{
				return this._SrinDetails;
			}
			set
			{
				this._SrinDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinStocktakingDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinStocktakingDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_SrinStocktakingDetails", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.SrinStocktakingDetails.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingDetails.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="SrinStocktaking_SrinStocktakingDetails", Storage="_SrinStocktaking", ThisKey="SrinStocktakingID", OtherKey="SrinStocktakingID", IsForeignKey=true)]
		public SrinStocktaking SrinStocktaking
		{
			get
			{
				return this._SrinStocktaking.Entity;
			}
			set
			{
				SrinStocktaking previousValue = this._SrinStocktaking.Entity;
				if (((previousValue != value) 
							|| (this._SrinStocktaking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinStocktaking.Entity = null;
						previousValue.SrinStocktakingDetails.Remove(this);
					}
					this._SrinStocktaking.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingDetails.Add(this);
						this._SrinStocktakingID = value.SrinStocktakingID;
					}
					else
					{
						this._SrinStocktakingID = default(int);
					}
					this.SendPropertyChanged("SrinStocktaking");
				}
			}
		}
		
		[Association(Name="SrinSubDetails_SrinStocktakingDetails", Storage="_SrinSubDetails", ThisKey="SrinSubDetailsID", OtherKey="SrinSubDetailsID", IsForeignKey=true)]
		public SrinSubDetails SrinSubDetails
		{
			get
			{
				return this._SrinSubDetails.Entity;
			}
			set
			{
				SrinSubDetails previousValue = this._SrinSubDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinSubDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinSubDetails.Entity = null;
						previousValue.SrinStocktakingDetails.Remove(this);
					}
					this._SrinSubDetails.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingDetails.Add(this);
						this._SrinSubDetailsID = value.SrinSubDetailsID;
					}
					else
					{
						this._SrinSubDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinSubDetails");
				}
			}
		}
		
		[Association(Name="StorageInfo_SrinStocktakingDetails", Storage="_StorageInfo", ThisKey="StorageID", OtherKey="StorageID", IsForeignKey=true)]
		public StorageInfo StorageInfo
		{
			get
			{
				return this._StorageInfo.Entity;
			}
			set
			{
				StorageInfo previousValue = this._StorageInfo.Entity;
				if (((previousValue != value) 
							|| (this._StorageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInfo.Entity = null;
						previousValue.SrinStocktakingDetails.Remove(this);
					}
					this._StorageInfo.Entity = value;
					if ((value != null))
					{
						value.SrinStocktakingDetails.Add(this);
						this._StorageID = value.StorageID;
					}
					else
					{
						this._StorageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("StorageInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinDetails(SrinDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktakingDetails = this;
		}
		
		private void detach_SrinDetails(SrinDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinStocktakingDetails = null;
		}
	}
	
	[Table(Name="dbo.SrinSubDetails")]
	public partial class SrinSubDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinSubDetailsID;
		
		private int _SrinSubDocID;
		
		private int _MaterialID;
		
		private System.Nullable<decimal> _TotleGentaojian;
		
		private System.Nullable<decimal> _TotleMetre;
		
		private System.Nullable<decimal> _TotleTon;
		
		private string _RetrieveCode;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private EntitySet<SrinStocktakingDetails> _SrinStocktakingDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<SrinSubDoc> _SrinSubDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinSubDetailsIDChanging(int value);
    partial void OnSrinSubDetailsIDChanged();
    partial void OnSrinSubDocIDChanging(int value);
    partial void OnSrinSubDocIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnTotleGentaojianChanging(System.Nullable<decimal> value);
    partial void OnTotleGentaojianChanged();
    partial void OnTotleMetreChanging(System.Nullable<decimal> value);
    partial void OnTotleMetreChanged();
    partial void OnTotleTonChanging(System.Nullable<decimal> value);
    partial void OnTotleTonChanged();
    partial void OnRetrieveCodeChanging(string value);
    partial void OnRetrieveCodeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public SrinSubDetails()
		{
			this._SrinStocktakingDetails = new EntitySet<SrinStocktakingDetails>(new Action<SrinStocktakingDetails>(this.attach_SrinStocktakingDetails), new Action<SrinStocktakingDetails>(this.detach_SrinStocktakingDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._SrinSubDoc = default(EntityRef<SrinSubDoc>);
			OnCreated();
		}
		
		[Column(Storage="_SrinSubDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinSubDetailsID
		{
			get
			{
				return this._SrinSubDetailsID;
			}
			set
			{
				if ((this._SrinSubDetailsID != value))
				{
					this.OnSrinSubDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinSubDetailsID = value;
					this.SendPropertyChanged("SrinSubDetailsID");
					this.OnSrinSubDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinSubDocID", DbType="Int NOT NULL")]
		public int SrinSubDocID
		{
			get
			{
				return this._SrinSubDocID;
			}
			set
			{
				if ((this._SrinSubDocID != value))
				{
					if (this._SrinSubDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinSubDocIDChanging(value);
					this.SendPropertyChanging();
					this._SrinSubDocID = value;
					this.SendPropertyChanged("SrinSubDocID");
					this.OnSrinSubDocIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_TotleGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotleGentaojian
		{
			get
			{
				return this._TotleGentaojian;
			}
			set
			{
				if ((this._TotleGentaojian != value))
				{
					this.OnTotleGentaojianChanging(value);
					this.SendPropertyChanging();
					this._TotleGentaojian = value;
					this.SendPropertyChanged("TotleGentaojian");
					this.OnTotleGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_TotleMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotleMetre
		{
			get
			{
				return this._TotleMetre;
			}
			set
			{
				if ((this._TotleMetre != value))
				{
					this.OnTotleMetreChanging(value);
					this.SendPropertyChanging();
					this._TotleMetre = value;
					this.SendPropertyChanged("TotleMetre");
					this.OnTotleMetreChanged();
				}
			}
		}
		
		[Column(Storage="_TotleTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotleTon
		{
			get
			{
				return this._TotleTon;
			}
			set
			{
				if ((this._TotleTon != value))
				{
					this.OnTotleTonChanging(value);
					this.SendPropertyChanging();
					this._TotleTon = value;
					this.SendPropertyChanged("TotleTon");
					this.OnTotleTonChanged();
				}
			}
		}
		
		[Column(Storage="_RetrieveCode", DbType="NVarChar(50)")]
		public string RetrieveCode
		{
			get
			{
				return this._RetrieveCode;
			}
			set
			{
				if ((this._RetrieveCode != value))
				{
					this.OnRetrieveCodeChanging(value);
					this.SendPropertyChanging();
					this._RetrieveCode = value;
					this.SendPropertyChanged("RetrieveCode");
					this.OnRetrieveCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="SrinSubDetails_SrinStocktakingDetails", Storage="_SrinStocktakingDetails", ThisKey="SrinSubDetailsID", OtherKey="SrinSubDetailsID")]
		public EntitySet<SrinStocktakingDetails> SrinStocktakingDetails
		{
			get
			{
				return this._SrinStocktakingDetails;
			}
			set
			{
				this._SrinStocktakingDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinSubDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinSubDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinSubDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="MaterialInfo_SrinSubDetails", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.SrinSubDetails.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.SrinSubDetails.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="SrinSubDoc_SrinSubDetails", Storage="_SrinSubDoc", ThisKey="SrinSubDocID", OtherKey="SrinSubDocID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SrinSubDoc SrinSubDoc
		{
			get
			{
				return this._SrinSubDoc.Entity;
			}
			set
			{
				SrinSubDoc previousValue = this._SrinSubDoc.Entity;
				if (((previousValue != value) 
							|| (this._SrinSubDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinSubDoc.Entity = null;
						previousValue.SrinSubDetails.Remove(this);
					}
					this._SrinSubDoc.Entity = value;
					if ((value != null))
					{
						value.SrinSubDetails.Add(this);
						this._SrinSubDocID = value.SrinSubDocID;
					}
					else
					{
						this._SrinSubDocID = default(int);
					}
					this.SendPropertyChanged("SrinSubDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinSubDetails = this;
		}
		
		private void detach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinSubDetails = null;
		}
	}
	
	[Table(Name="dbo.SrinSubDoc")]
	public partial class SrinSubDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinSubDocID;
		
		private int _Project;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private int _Taker;
		
		private string _Remark;
		
		private EntitySet<SrinStocktaking> _SrinStocktaking;
		
		private EntitySet<SrinSubDetails> _SrinSubDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinSubDocIDChanging(int value);
    partial void OnSrinSubDocIDChanged();
    partial void OnProjectChanging(int value);
    partial void OnProjectChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnTakerChanging(int value);
    partial void OnTakerChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public SrinSubDoc()
		{
			this._SrinStocktaking = new EntitySet<SrinStocktaking>(new Action<SrinStocktaking>(this.attach_SrinStocktaking), new Action<SrinStocktaking>(this.detach_SrinStocktaking));
			this._SrinSubDetails = new EntitySet<SrinSubDetails>(new Action<SrinSubDetails>(this.attach_SrinSubDetails), new Action<SrinSubDetails>(this.detach_SrinSubDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_SrinSubDocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinSubDocID
		{
			get
			{
				return this._SrinSubDocID;
			}
			set
			{
				if ((this._SrinSubDocID != value))
				{
					this.OnSrinSubDocIDChanging(value);
					this.SendPropertyChanging();
					this._SrinSubDocID = value;
					this.SendPropertyChanged("SrinSubDocID");
					this.OnSrinSubDocIDChanged();
				}
			}
		}
		
		[Column(Storage="_Project", DbType="Int NOT NULL")]
		public int Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Taker", DbType="Int NOT NULL")]
		public int Taker
		{
			get
			{
				return this._Taker;
			}
			set
			{
				if ((this._Taker != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTakerChanging(value);
					this.SendPropertyChanging();
					this._Taker = value;
					this.SendPropertyChanged("Taker");
					this.OnTakerChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="SrinSubDoc_SrinStocktaking", Storage="_SrinStocktaking", ThisKey="SrinSubDocID", OtherKey="SrinSubDocID")]
		public EntitySet<SrinStocktaking> SrinStocktaking
		{
			get
			{
				return this._SrinStocktaking;
			}
			set
			{
				this._SrinStocktaking.Assign(value);
			}
		}
		
		[Association(Name="SrinSubDoc_SrinSubDetails", Storage="_SrinSubDetails", ThisKey="SrinSubDocID", OtherKey="SrinSubDocID")]
		public EntitySet<SrinSubDetails> SrinSubDetails
		{
			get
			{
				return this._SrinSubDetails;
			}
			set
			{
				this._SrinSubDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinSubDoc", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinSubDoc.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinSubDoc.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_SrinSubDoc", Storage="_ProjectInfo", ThisKey="Project", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.SrinSubDoc.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.SrinSubDoc.Add(this);
						this._Project = value.ProjectID;
					}
					else
					{
						this._Project = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinSubDoc1", Storage="_EmpInfo1", ThisKey="Taker", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.SrinSubDoc1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.SrinSubDoc1.Add(this);
						this._Taker = value.EmpID;
					}
					else
					{
						this._Taker = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinStocktaking(SrinStocktaking entity)
		{
			this.SendPropertyChanging();
			entity.SrinSubDoc = this;
		}
		
		private void detach_SrinStocktaking(SrinStocktaking entity)
		{
			this.SendPropertyChanging();
			entity.SrinSubDoc = null;
		}
		
		private void attach_SrinSubDetails(SrinSubDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinSubDoc = this;
		}
		
		private void detach_SrinSubDetails(SrinSubDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinSubDoc = null;
		}
	}
	
	[Table(Name="dbo.SrinVerifyTransfer")]
	public partial class SrinVerifyTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinVerifyTransferID;
		
		private int _SrinReceiptID;
		
		private string _SrinVerifyTransferCode;
		
		private bool _ReadyWorkIsFinished;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private int _TaskID;
		
		private EntitySet<SrinMaterialVerifyDetails> _SrinMaterialVerifyDetails;
		
		private EntitySet<SrinProduceVerifyTransfer> _SrinProduceVerifyTransfer;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinReceipt> _SrinReceipt;
		
		private EntityRef<TaskStorageIn> _TaskStorageIn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinVerifyTransferIDChanging(int value);
    partial void OnSrinVerifyTransferIDChanged();
    partial void OnSrinReceiptIDChanging(int value);
    partial void OnSrinReceiptIDChanged();
    partial void OnSrinVerifyTransferCodeChanging(string value);
    partial void OnSrinVerifyTransferCodeChanged();
    partial void OnReadyWorkIsFinishedChanging(bool value);
    partial void OnReadyWorkIsFinishedChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public SrinVerifyTransfer()
		{
			this._SrinMaterialVerifyDetails = new EntitySet<SrinMaterialVerifyDetails>(new Action<SrinMaterialVerifyDetails>(this.attach_SrinMaterialVerifyDetails), new Action<SrinMaterialVerifyDetails>(this.detach_SrinMaterialVerifyDetails));
			this._SrinProduceVerifyTransfer = new EntitySet<SrinProduceVerifyTransfer>(new Action<SrinProduceVerifyTransfer>(this.attach_SrinProduceVerifyTransfer), new Action<SrinProduceVerifyTransfer>(this.detach_SrinProduceVerifyTransfer));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinReceipt = default(EntityRef<SrinReceipt>);
			this._TaskStorageIn = default(EntityRef<TaskStorageIn>);
			OnCreated();
		}
		
		[Column(Storage="_SrinVerifyTransferID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinVerifyTransferID
		{
			get
			{
				return this._SrinVerifyTransferID;
			}
			set
			{
				if ((this._SrinVerifyTransferID != value))
				{
					this.OnSrinVerifyTransferIDChanging(value);
					this.SendPropertyChanging();
					this._SrinVerifyTransferID = value;
					this.SendPropertyChanged("SrinVerifyTransferID");
					this.OnSrinVerifyTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinReceiptID", DbType="Int NOT NULL")]
		public int SrinReceiptID
		{
			get
			{
				return this._SrinReceiptID;
			}
			set
			{
				if ((this._SrinReceiptID != value))
				{
					if (this._SrinReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinReceiptID = value;
					this.SendPropertyChanged("SrinReceiptID");
					this.OnSrinReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinVerifyTransferCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SrinVerifyTransferCode
		{
			get
			{
				return this._SrinVerifyTransferCode;
			}
			set
			{
				if ((this._SrinVerifyTransferCode != value))
				{
					this.OnSrinVerifyTransferCodeChanging(value);
					this.SendPropertyChanging();
					this._SrinVerifyTransferCode = value;
					this.SendPropertyChanged("SrinVerifyTransferCode");
					this.OnSrinVerifyTransferCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReadyWorkIsFinished", DbType="Bit NOT NULL")]
		public bool ReadyWorkIsFinished
		{
			get
			{
				return this._ReadyWorkIsFinished;
			}
			set
			{
				if ((this._ReadyWorkIsFinished != value))
				{
					this.OnReadyWorkIsFinishedChanging(value);
					this.SendPropertyChanging();
					this._ReadyWorkIsFinished = value;
					this.SendPropertyChanged("ReadyWorkIsFinished");
					this.OnReadyWorkIsFinishedChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._TaskStorageIn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="SrinVerifyTransfer_SrinMaterialVerifyDetails", Storage="_SrinMaterialVerifyDetails", ThisKey="SrinVerifyTransferID", OtherKey="SrinVerifyTransferID")]
		public EntitySet<SrinMaterialVerifyDetails> SrinMaterialVerifyDetails
		{
			get
			{
				return this._SrinMaterialVerifyDetails;
			}
			set
			{
				this._SrinMaterialVerifyDetails.Assign(value);
			}
		}
		
		[Association(Name="SrinVerifyTransfer_SrinProduceVerifyTransfer", Storage="_SrinProduceVerifyTransfer", ThisKey="SrinVerifyTransferID", OtherKey="SrinVerifyTransferID")]
		public EntitySet<SrinProduceVerifyTransfer> SrinProduceVerifyTransfer
		{
			get
			{
				return this._SrinProduceVerifyTransfer;
			}
			set
			{
				this._SrinProduceVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_SrinVerifyTransfer", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinVerifyTransfer.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinVerifyTransfer.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinReceipt_SrinVerifyTransfer", Storage="_SrinReceipt", ThisKey="SrinReceiptID", OtherKey="SrinReceiptID", IsForeignKey=true)]
		public SrinReceipt SrinReceipt
		{
			get
			{
				return this._SrinReceipt.Entity;
			}
			set
			{
				SrinReceipt previousValue = this._SrinReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinReceipt.Entity = null;
						previousValue.SrinVerifyTransfer.Remove(this);
					}
					this._SrinReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinVerifyTransfer.Add(this);
						this._SrinReceiptID = value.SrinReceiptID;
					}
					else
					{
						this._SrinReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinReceipt");
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinVerifyTransfer", Storage="_TaskStorageIn", ThisKey="TaskID", OtherKey="TaskStorageID", IsForeignKey=true)]
		public TaskStorageIn TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn.Entity;
			}
			set
			{
				TaskStorageIn previousValue = this._TaskStorageIn.Entity;
				if (((previousValue != value) 
							|| (this._TaskStorageIn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStorageIn.Entity = null;
						previousValue.SrinVerifyTransfer.Remove(this);
					}
					this._TaskStorageIn.Entity = value;
					if ((value != null))
					{
						value.SrinVerifyTransfer.Add(this);
						this._TaskID = value.TaskStorageID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("TaskStorageIn");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinVerifyTransfer = this;
		}
		
		private void detach_SrinMaterialVerifyDetails(SrinMaterialVerifyDetails entity)
		{
			this.SendPropertyChanging();
			entity.SrinVerifyTransfer = null;
		}
		
		private void attach_SrinProduceVerifyTransfer(SrinProduceVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SrinVerifyTransfer = this;
		}
		
		private void detach_SrinProduceVerifyTransfer(SrinProduceVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SrinVerifyTransfer = null;
		}
	}
	
	[Table(Name="dbo.SrinWriteOffDetails")]
	public partial class SrinWriteOffDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SrinWriteOffDetailsID;
		
		private int _SrinQualifiedReceiptID;
		
		private int _StorageOutRealDetailsID;
		
		private int _SrinAssetQualifiedDetailsID;
		
		private decimal _Gentaojian;
		
		private decimal _Metre;
		
		private decimal _Ton;
		
		private decimal _Amount;
		
		private string _Remark;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<SrinAssetQualifiedDetails> _SrinAssetQualifiedDetails;
		
		private EntityRef<SrinQualifiedReceipt> _SrinQualifiedReceipt;
		
		private EntityRef<StorageOutRealDetails> _StorageOutRealDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSrinWriteOffDetailsIDChanging(int value);
    partial void OnSrinWriteOffDetailsIDChanged();
    partial void OnSrinQualifiedReceiptIDChanging(int value);
    partial void OnSrinQualifiedReceiptIDChanged();
    partial void OnStorageOutRealDetailsIDChanging(int value);
    partial void OnStorageOutRealDetailsIDChanged();
    partial void OnSrinAssetQualifiedDetailsIDChanging(int value);
    partial void OnSrinAssetQualifiedDetailsIDChanged();
    partial void OnGentaojianChanging(decimal value);
    partial void OnGentaojianChanged();
    partial void OnMetreChanging(decimal value);
    partial void OnMetreChanged();
    partial void OnTonChanging(decimal value);
    partial void OnTonChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    #endregion
		
		public SrinWriteOffDetails()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._SrinAssetQualifiedDetails = default(EntityRef<SrinAssetQualifiedDetails>);
			this._SrinQualifiedReceipt = default(EntityRef<SrinQualifiedReceipt>);
			this._StorageOutRealDetails = default(EntityRef<StorageOutRealDetails>);
			OnCreated();
		}
		
		[Column(Storage="_SrinWriteOffDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SrinWriteOffDetailsID
		{
			get
			{
				return this._SrinWriteOffDetailsID;
			}
			set
			{
				if ((this._SrinWriteOffDetailsID != value))
				{
					this.OnSrinWriteOffDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinWriteOffDetailsID = value;
					this.SendPropertyChanged("SrinWriteOffDetailsID");
					this.OnSrinWriteOffDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinQualifiedReceiptID", DbType="Int NOT NULL")]
		public int SrinQualifiedReceiptID
		{
			get
			{
				return this._SrinQualifiedReceiptID;
			}
			set
			{
				if ((this._SrinQualifiedReceiptID != value))
				{
					if (this._SrinQualifiedReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinQualifiedReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._SrinQualifiedReceiptID = value;
					this.SendPropertyChanged("SrinQualifiedReceiptID");
					this.OnSrinQualifiedReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutRealDetailsID", DbType="Int NOT NULL")]
		public int StorageOutRealDetailsID
		{
			get
			{
				return this._StorageOutRealDetailsID;
			}
			set
			{
				if ((this._StorageOutRealDetailsID != value))
				{
					if (this._StorageOutRealDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutRealDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutRealDetailsID = value;
					this.SendPropertyChanged("StorageOutRealDetailsID");
					this.OnStorageOutRealDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrinAssetQualifiedDetailsID", DbType="Int NOT NULL")]
		public int SrinAssetQualifiedDetailsID
		{
			get
			{
				return this._SrinAssetQualifiedDetailsID;
			}
			set
			{
				if ((this._SrinAssetQualifiedDetailsID != value))
				{
					if (this._SrinAssetQualifiedDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSrinAssetQualifiedDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SrinAssetQualifiedDetailsID = value;
					this.SendPropertyChanged("SrinAssetQualifiedDetailsID");
					this.OnSrinAssetQualifiedDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_Metre", DbType="Decimal(18,2) NOT NULL")]
		public decimal Metre
		{
			get
			{
				return this._Metre;
			}
			set
			{
				if ((this._Metre != value))
				{
					this.OnMetreChanging(value);
					this.SendPropertyChanging();
					this._Metre = value;
					this.SendPropertyChanged("Metre");
					this.OnMetreChanged();
				}
			}
		}
		
		[Column(Storage="_Ton", DbType="Decimal(18,2) NOT NULL")]
		public decimal Ton
		{
			get
			{
				return this._Ton;
			}
			set
			{
				if ((this._Ton != value))
				{
					this.OnTonChanging(value);
					this.SendPropertyChanging();
					this._Ton = value;
					this.SendPropertyChanged("Ton");
					this.OnTonChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_SrinWriteOffDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.SrinWriteOffDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.SrinWriteOffDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="SrinAssetQualifiedDetails_SrinWriteOffDetails", Storage="_SrinAssetQualifiedDetails", ThisKey="SrinAssetQualifiedDetailsID", OtherKey="SrinAssetQualifiedDetailsID", IsForeignKey=true)]
		public SrinAssetQualifiedDetails SrinAssetQualifiedDetails
		{
			get
			{
				return this._SrinAssetQualifiedDetails.Entity;
			}
			set
			{
				SrinAssetQualifiedDetails previousValue = this._SrinAssetQualifiedDetails.Entity;
				if (((previousValue != value) 
							|| (this._SrinAssetQualifiedDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinAssetQualifiedDetails.Entity = null;
						previousValue.SrinWriteOffDetails.Remove(this);
					}
					this._SrinAssetQualifiedDetails.Entity = value;
					if ((value != null))
					{
						value.SrinWriteOffDetails.Add(this);
						this._SrinAssetQualifiedDetailsID = value.SrinAssetQualifiedDetailsID;
					}
					else
					{
						this._SrinAssetQualifiedDetailsID = default(int);
					}
					this.SendPropertyChanged("SrinAssetQualifiedDetails");
				}
			}
		}
		
		[Association(Name="SrinQualifiedReceipt_SrinWriteOffDetails", Storage="_SrinQualifiedReceipt", ThisKey="SrinQualifiedReceiptID", OtherKey="SrinQualifiedReceiptID", IsForeignKey=true)]
		public SrinQualifiedReceipt SrinQualifiedReceipt
		{
			get
			{
				return this._SrinQualifiedReceipt.Entity;
			}
			set
			{
				SrinQualifiedReceipt previousValue = this._SrinQualifiedReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SrinQualifiedReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SrinQualifiedReceipt.Entity = null;
						previousValue.SrinWriteOffDetails.Remove(this);
					}
					this._SrinQualifiedReceipt.Entity = value;
					if ((value != null))
					{
						value.SrinWriteOffDetails.Add(this);
						this._SrinQualifiedReceiptID = value.SrinQualifiedReceiptID;
					}
					else
					{
						this._SrinQualifiedReceiptID = default(int);
					}
					this.SendPropertyChanged("SrinQualifiedReceipt");
				}
			}
		}
		
		[Association(Name="StorageOutRealDetails_SrinWriteOffDetails", Storage="_StorageOutRealDetails", ThisKey="StorageOutRealDetailsID", OtherKey="StorageOutRealDetailsID", IsForeignKey=true)]
		public StorageOutRealDetails StorageOutRealDetails
		{
			get
			{
				return this._StorageOutRealDetails.Entity;
			}
			set
			{
				StorageOutRealDetails previousValue = this._StorageOutRealDetails.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutRealDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutRealDetails.Entity = null;
						previousValue.SrinWriteOffDetails.Remove(this);
					}
					this._StorageOutRealDetails.Entity = value;
					if ((value != null))
					{
						value.SrinWriteOffDetails.Add(this);
						this._StorageOutRealDetailsID = value.StorageOutRealDetailsID;
					}
					else
					{
						this._StorageOutRealDetailsID = default(int);
					}
					this.SendPropertyChanged("StorageOutRealDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StockOnline")]
	public partial class StockOnline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockOnlineID;
		
		private System.Nullable<int> _StorageInID;
		
		private string _StorageInType;
		
		private string _ReceivingTypeName;
		
		private string _StorageInCode;
		
		private string _BillCode;
		
		private int _MaterialID;
		
		private string _MaterialCode;
		
		private System.Nullable<decimal> _OfflineGentaojian;
		
		private System.Nullable<decimal> _OfflineMetre;
		
		private System.Nullable<decimal> _OfflineTon;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.Nullable<int> _ExpectedProject;
		
		private string _Remark;
		
		private string _BatchIndex;
		
		private int _ManufacturerID;
		
		private System.Nullable<int> _SupplierID;
		
		private int _StorageID;
		
		private int _PileID;
		
		private System.Nullable<int> _MaterialsManager;
		
		private System.Nullable<int> _AssetsManager;
		
		private System.DateTime _StorageTime;
		
		private string _OrderNum;
		
		private string _CertificateNum;
		
		private string _OnlineCode;
		
		private string _OnlineUnit;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private System.Nullable<decimal> _CurQuantity;
		
		private decimal _OnlineUnitPrice;
		
		private System.Nullable<decimal> _OnlineTotal;
		
		private System.Nullable<System.DateTime> _OnlineDate;
		
		private System.Nullable<int> _Creator;
		
		private System.DateTime _CreateTime;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<EmpInfo> _EmpInfo2;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<StorageInfo> _StorageInfo;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockOnlineIDChanging(int value);
    partial void OnStockOnlineIDChanged();
    partial void OnStorageInIDChanging(System.Nullable<int> value);
    partial void OnStorageInIDChanged();
    partial void OnStorageInTypeChanging(string value);
    partial void OnStorageInTypeChanged();
    partial void OnReceivingTypeNameChanging(string value);
    partial void OnReceivingTypeNameChanged();
    partial void OnStorageInCodeChanging(string value);
    partial void OnStorageInCodeChanged();
    partial void OnBillCodeChanging(string value);
    partial void OnBillCodeChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnOfflineGentaojianChanging(System.Nullable<decimal> value);
    partial void OnOfflineGentaojianChanged();
    partial void OnOfflineMetreChanging(System.Nullable<decimal> value);
    partial void OnOfflineMetreChanged();
    partial void OnOfflineTonChanging(System.Nullable<decimal> value);
    partial void OnOfflineTonChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnExpectedProjectChanging(System.Nullable<int> value);
    partial void OnExpectedProjectChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnBatchIndexChanging(string value);
    partial void OnBatchIndexChanged();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    partial void OnStorageIDChanging(int value);
    partial void OnStorageIDChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnMaterialsManagerChanging(System.Nullable<int> value);
    partial void OnMaterialsManagerChanged();
    partial void OnAssetsManagerChanging(System.Nullable<int> value);
    partial void OnAssetsManagerChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnOrderNumChanging(string value);
    partial void OnOrderNumChanged();
    partial void OnCertificateNumChanging(string value);
    partial void OnCertificateNumChanged();
    partial void OnOnlineCodeChanging(string value);
    partial void OnOnlineCodeChanged();
    partial void OnOnlineUnitChanging(string value);
    partial void OnOnlineUnitChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnCurQuantityChanging(System.Nullable<decimal> value);
    partial void OnCurQuantityChanged();
    partial void OnOnlineUnitPriceChanging(decimal value);
    partial void OnOnlineUnitPriceChanged();
    partial void OnOnlineTotalChanging(System.Nullable<decimal> value);
    partial void OnOnlineTotalChanged();
    partial void OnOnlineDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOnlineDateChanged();
    partial void OnCreatorChanging(System.Nullable<int> value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public StockOnline()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._EmpInfo2 = default(EntityRef<EmpInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._StorageInfo = default(EntityRef<StorageInfo>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StockOnlineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockOnlineID
		{
			get
			{
				return this._StockOnlineID;
			}
			set
			{
				if ((this._StockOnlineID != value))
				{
					this.OnStockOnlineIDChanging(value);
					this.SendPropertyChanging();
					this._StockOnlineID = value;
					this.SendPropertyChanged("StockOnlineID");
					this.OnStockOnlineIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInID", DbType="Int")]
		public System.Nullable<int> StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInType", DbType="NVarChar(50)")]
		public string StorageInType
		{
			get
			{
				return this._StorageInType;
			}
			set
			{
				if ((this._StorageInType != value))
				{
					this.OnStorageInTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageInType = value;
					this.SendPropertyChanged("StorageInType");
					this.OnStorageInTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeName", DbType="NVarChar(50)")]
		public string ReceivingTypeName
		{
			get
			{
				return this._ReceivingTypeName;
			}
			set
			{
				if ((this._ReceivingTypeName != value))
				{
					this.OnReceivingTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTypeName = value;
					this.SendPropertyChanged("ReceivingTypeName");
					this.OnReceivingTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50)")]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this.OnStorageInCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageInCode = value;
					this.SendPropertyChanged("StorageInCode");
					this.OnStorageInCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50)")]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this.OnBillCodeChanging(value);
					this.SendPropertyChanging();
					this._BillCode = value;
					this.SendPropertyChanged("BillCode");
					this.OnBillCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[Column(Storage="_OfflineGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OfflineGentaojian
		{
			get
			{
				return this._OfflineGentaojian;
			}
			set
			{
				if ((this._OfflineGentaojian != value))
				{
					this.OnOfflineGentaojianChanging(value);
					this.SendPropertyChanging();
					this._OfflineGentaojian = value;
					this.SendPropertyChanged("OfflineGentaojian");
					this.OnOfflineGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_OfflineMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OfflineMetre
		{
			get
			{
				return this._OfflineMetre;
			}
			set
			{
				if ((this._OfflineMetre != value))
				{
					this.OnOfflineMetreChanging(value);
					this.SendPropertyChanging();
					this._OfflineMetre = value;
					this.SendPropertyChanged("OfflineMetre");
					this.OnOfflineMetreChanged();
				}
			}
		}
		
		[Column(Storage="_OfflineTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OfflineTon
		{
			get
			{
				return this._OfflineTon;
			}
			set
			{
				if ((this._OfflineTon != value))
				{
					this.OnOfflineTonChanging(value);
					this.SendPropertyChanging();
					this._OfflineTon = value;
					this.SendPropertyChanged("OfflineTon");
					this.OnOfflineTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedProject", DbType="Int")]
		public System.Nullable<int> ExpectedProject
		{
			get
			{
				return this._ExpectedProject;
			}
			set
			{
				if ((this._ExpectedProject != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpectedProjectChanging(value);
					this.SendPropertyChanging();
					this._ExpectedProject = value;
					this.SendPropertyChanged("ExpectedProject");
					this.OnExpectedProjectChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this.OnBatchIndexChanging(value);
					this.SendPropertyChanging();
					this._BatchIndex = value;
					this.SendPropertyChanged("BatchIndex");
					this.OnBatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					if (this._StorageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsManager", DbType="Int")]
		public System.Nullable<int> MaterialsManager
		{
			get
			{
				return this._MaterialsManager;
			}
			set
			{
				if ((this._MaterialsManager != value))
				{
					if (this._EmpInfo2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsManagerChanging(value);
					this.SendPropertyChanging();
					this._MaterialsManager = value;
					this.SendPropertyChanged("MaterialsManager");
					this.OnMaterialsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_AssetsManager", DbType="Int")]
		public System.Nullable<int> AssetsManager
		{
			get
			{
				return this._AssetsManager;
			}
			set
			{
				if ((this._AssetsManager != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetsManagerChanging(value);
					this.SendPropertyChanging();
					this._AssetsManager = value;
					this.SendPropertyChanged("AssetsManager");
					this.OnAssetsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNum", DbType="NVarChar(50)")]
		public string OrderNum
		{
			get
			{
				return this._OrderNum;
			}
			set
			{
				if ((this._OrderNum != value))
				{
					this.OnOrderNumChanging(value);
					this.SendPropertyChanging();
					this._OrderNum = value;
					this.SendPropertyChanged("OrderNum");
					this.OnOrderNumChanged();
				}
			}
		}
		
		[Column(Storage="_CertificateNum", DbType="NVarChar(50)")]
		public string CertificateNum
		{
			get
			{
				return this._CertificateNum;
			}
			set
			{
				if ((this._CertificateNum != value))
				{
					this.OnCertificateNumChanging(value);
					this.SendPropertyChanging();
					this._CertificateNum = value;
					this.SendPropertyChanged("CertificateNum");
					this.OnCertificateNumChanged();
				}
			}
		}
		
		[Column(Storage="_OnlineCode", DbType="NVarChar(50)")]
		public string OnlineCode
		{
			get
			{
				return this._OnlineCode;
			}
			set
			{
				if ((this._OnlineCode != value))
				{
					this.OnOnlineCodeChanging(value);
					this.SendPropertyChanging();
					this._OnlineCode = value;
					this.SendPropertyChanged("OnlineCode");
					this.OnOnlineCodeChanged();
				}
			}
		}
		
		[Column(Storage="_OnlineUnit", DbType="NVarChar(50)")]
		public string OnlineUnit
		{
			get
			{
				return this._OnlineUnit;
			}
			set
			{
				if ((this._OnlineUnit != value))
				{
					this.OnOnlineUnitChanging(value);
					this.SendPropertyChanging();
					this._OnlineUnit = value;
					this.SendPropertyChanged("OnlineUnit");
					this.OnOnlineUnitChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurQuantity", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CurQuantity
		{
			get
			{
				return this._CurQuantity;
			}
			set
			{
				if ((this._CurQuantity != value))
				{
					this.OnCurQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurQuantity = value;
					this.SendPropertyChanged("CurQuantity");
					this.OnCurQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_OnlineUnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal OnlineUnitPrice
		{
			get
			{
				return this._OnlineUnitPrice;
			}
			set
			{
				if ((this._OnlineUnitPrice != value))
				{
					this.OnOnlineUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._OnlineUnitPrice = value;
					this.SendPropertyChanged("OnlineUnitPrice");
					this.OnOnlineUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_OnlineTotal", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OnlineTotal
		{
			get
			{
				return this._OnlineTotal;
			}
			set
			{
				if ((this._OnlineTotal != value))
				{
					this.OnOnlineTotalChanging(value);
					this.SendPropertyChanging();
					this._OnlineTotal = value;
					this.SendPropertyChanged("OnlineTotal");
					this.OnOnlineTotalChanged();
				}
			}
		}
		
		[Column(Storage="_OnlineDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OnlineDate
		{
			get
			{
				return this._OnlineDate;
			}
			set
			{
				if ((this._OnlineDate != value))
				{
					this.OnOnlineDateChanging(value);
					this.SendPropertyChanging();
					this._OnlineDate = value;
					this.SendPropertyChanged("OnlineDate");
					this.OnOnlineDateChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int")]
		public System.Nullable<int> Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StockOnline", Storage="_EmpInfo", ThisKey="AssetsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._AssetsManager = value.EmpID;
					}
					else
					{
						this._AssetsManager = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StockOnline1", Storage="_EmpInfo1", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.StockOnline1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.StockOnline1.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		[Association(Name="ProjectInfo_StockOnline", Storage="_ProjectInfo", ThisKey="ExpectedProject", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._ExpectedProject = value.ProjectID;
					}
					else
					{
						this._ExpectedProject = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_StockOnline", Storage="_Manufacturer", ThisKey="ManufacturerID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._ManufacturerID = value.ManufacturerID;
					}
					else
					{
						this._ManufacturerID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="MaterialInfo_StockOnline", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StockOnline2", Storage="_EmpInfo2", ThisKey="MaterialsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo2
		{
			get
			{
				return this._EmpInfo2.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo2.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo2.Entity = null;
						previousValue.StockOnline2.Remove(this);
					}
					this._EmpInfo2.Entity = value;
					if ((value != null))
					{
						value.StockOnline2.Add(this);
						this._MaterialsManager = value.EmpID;
					}
					else
					{
						this._MaterialsManager = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo2");
				}
			}
		}
		
		[Association(Name="PileInfo_StockOnline", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="StorageInfo_StockOnline", Storage="_StorageInfo", ThisKey="StorageID", OtherKey="StorageID", IsForeignKey=true)]
		public StorageInfo StorageInfo
		{
			get
			{
				return this._StorageInfo.Entity;
			}
			set
			{
				StorageInfo previousValue = this._StorageInfo.Entity;
				if (((previousValue != value) 
							|| (this._StorageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInfo.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._StorageInfo.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._StorageID = value.StorageID;
					}
					else
					{
						this._StorageID = default(int);
					}
					this.SendPropertyChanged("StorageInfo");
				}
			}
		}
		
		[Association(Name="SupplierInfo_StockOnline", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.StockOnline.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.StockOnline.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StockTransfer")]
	public partial class StockTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockTransferID;
		
		private string _StockTransferNum;
		
		private System.DateTime _CreateTime;
		
		private int _Creater;
		
		private string _Remark;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockTransferIDChanging(int value);
    partial void OnStockTransferIDChanged();
    partial void OnStockTransferNumChanging(string value);
    partial void OnStockTransferNumChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreaterChanging(int value);
    partial void OnCreaterChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StockTransfer()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StockTransferID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockTransferID
		{
			get
			{
				return this._StockTransferID;
			}
			set
			{
				if ((this._StockTransferID != value))
				{
					this.OnStockTransferIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferID = value;
					this.SendPropertyChanged("StockTransferID");
					this.OnStockTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_StockTransferNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StockTransferNum
		{
			get
			{
				return this._StockTransferNum;
			}
			set
			{
				if ((this._StockTransferNum != value))
				{
					this.OnStockTransferNumChanging(value);
					this.SendPropertyChanging();
					this._StockTransferNum = value;
					this.SendPropertyChanged("StockTransferNum");
					this.OnStockTransferNumChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creater", DbType="Int NOT NULL")]
		public int Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StockTransfer", Storage="_EmpInfo", ThisKey="Creater", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StockTransfer.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StockTransfer.Add(this);
						this._Creater = value.EmpID;
					}
					else
					{
						this._Creater = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StockTransferDetail")]
	public partial class StockTransferDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockTransferDetailID;
		
		private int _StockTransferID;
		
		private string _DetailType;
		
		private int _StocksID;
		
		private string _StocksStatus;
		
		private int _TargetPile;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private string _Remark;
		
		private EntityRef<PileInfo> _PileInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockTransferDetailIDChanging(int value);
    partial void OnStockTransferDetailIDChanged();
    partial void OnStockTransferIDChanging(int value);
    partial void OnStockTransferIDChanged();
    partial void OnDetailTypeChanging(string value);
    partial void OnDetailTypeChanged();
    partial void OnStocksIDChanging(int value);
    partial void OnStocksIDChanged();
    partial void OnStocksStatusChanging(string value);
    partial void OnStocksStatusChanged();
    partial void OnTargetPileChanging(int value);
    partial void OnTargetPileChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StockTransferDetail()
		{
			this._PileInfo = default(EntityRef<PileInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StockTransferDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockTransferDetailID
		{
			get
			{
				return this._StockTransferDetailID;
			}
			set
			{
				if ((this._StockTransferDetailID != value))
				{
					this.OnStockTransferDetailIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferDetailID = value;
					this.SendPropertyChanged("StockTransferDetailID");
					this.OnStockTransferDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_StockTransferID", DbType="Int NOT NULL")]
		public int StockTransferID
		{
			get
			{
				return this._StockTransferID;
			}
			set
			{
				if ((this._StockTransferID != value))
				{
					this.OnStockTransferIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferID = value;
					this.SendPropertyChanged("StockTransferID");
					this.OnStockTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_DetailType", DbType="NVarChar(50)")]
		public string DetailType
		{
			get
			{
				return this._DetailType;
			}
			set
			{
				if ((this._DetailType != value))
				{
					this.OnDetailTypeChanging(value);
					this.SendPropertyChanging();
					this._DetailType = value;
					this.SendPropertyChanged("DetailType");
					this.OnDetailTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this.OnStocksIDChanging(value);
					this.SendPropertyChanging();
					this._StocksID = value;
					this.SendPropertyChanged("StocksID");
					this.OnStocksIDChanged();
				}
			}
		}
		
		[Column(Storage="_StocksStatus", DbType="NVarChar(50)")]
		public string StocksStatus
		{
			get
			{
				return this._StocksStatus;
			}
			set
			{
				if ((this._StocksStatus != value))
				{
					this.OnStocksStatusChanging(value);
					this.SendPropertyChanging();
					this._StocksStatus = value;
					this.SendPropertyChanged("StocksStatus");
					this.OnStocksStatusChanged();
				}
			}
		}
		
		[Column(Storage="_TargetPile", DbType="Int NOT NULL")]
		public int TargetPile
		{
			get
			{
				return this._TargetPile;
			}
			set
			{
				if ((this._TargetPile != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetPileChanging(value);
					this.SendPropertyChanging();
					this._TargetPile = value;
					this.SendPropertyChanged("TargetPile");
					this.OnTargetPileChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="PileInfo_StockTransferDetail", Storage="_PileInfo", ThisKey="TargetPile", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.StockTransferDetail.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.StockTransferDetail.Add(this);
						this._TargetPile = value.PileID;
					}
					else
					{
						this._TargetPile = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StockTransferTask")]
	public partial class StockTransferTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockTransferTaskID;
		
		private int _StockTransferID;
		
		private System.Nullable<int> _TaskCreaterID;
		
		private System.Nullable<int> _TaskTargetID;
		
		private string _TaskInType;
		
		private string _TaskTitle;
		
		private System.Nullable<System.DateTime> _AcceptTime;
		
		private string _AuditOpinion;
		
		private string _AuditStatus;
		
		private string _TaskState;
		
		private string _TaskDispose;
		
		private string _TaskType;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockTransferTaskIDChanging(int value);
    partial void OnStockTransferTaskIDChanged();
    partial void OnStockTransferIDChanging(int value);
    partial void OnStockTransferIDChanged();
    partial void OnTaskCreaterIDChanging(System.Nullable<int> value);
    partial void OnTaskCreaterIDChanged();
    partial void OnTaskTargetIDChanging(System.Nullable<int> value);
    partial void OnTaskTargetIDChanged();
    partial void OnTaskInTypeChanging(string value);
    partial void OnTaskInTypeChanged();
    partial void OnTaskTitleChanging(string value);
    partial void OnTaskTitleChanged();
    partial void OnAcceptTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptTimeChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnTaskStateChanging(string value);
    partial void OnTaskStateChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnTaskTypeChanging(string value);
    partial void OnTaskTypeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StockTransferTask()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StockTransferTaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockTransferTaskID
		{
			get
			{
				return this._StockTransferTaskID;
			}
			set
			{
				if ((this._StockTransferTaskID != value))
				{
					this.OnStockTransferTaskIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferTaskID = value;
					this.SendPropertyChanged("StockTransferTaskID");
					this.OnStockTransferTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_StockTransferID", DbType="Int NOT NULL")]
		public int StockTransferID
		{
			get
			{
				return this._StockTransferID;
			}
			set
			{
				if ((this._StockTransferID != value))
				{
					this.OnStockTransferIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferID = value;
					this.SendPropertyChanged("StockTransferID");
					this.OnStockTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskCreaterID", DbType="Int")]
		public System.Nullable<int> TaskCreaterID
		{
			get
			{
				return this._TaskCreaterID;
			}
			set
			{
				if ((this._TaskCreaterID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskCreaterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskCreaterID = value;
					this.SendPropertyChanged("TaskCreaterID");
					this.OnTaskCreaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTargetID", DbType="Int")]
		public System.Nullable<int> TaskTargetID
		{
			get
			{
				return this._TaskTargetID;
			}
			set
			{
				if ((this._TaskTargetID != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTargetID = value;
					this.SendPropertyChanged("TaskTargetID");
					this.OnTaskTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskInType", DbType="NVarChar(50)")]
		public string TaskInType
		{
			get
			{
				return this._TaskInType;
			}
			set
			{
				if ((this._TaskInType != value))
				{
					this.OnTaskInTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskInType = value;
					this.SendPropertyChanged("TaskInType");
					this.OnTaskInTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskTitle
		{
			get
			{
				return this._TaskTitle;
			}
			set
			{
				if ((this._TaskTitle != value))
				{
					this.OnTaskTitleChanging(value);
					this.SendPropertyChanging();
					this._TaskTitle = value;
					this.SendPropertyChanged("TaskTitle");
					this.OnTaskTitleChanged();
				}
			}
		}
		
		[Column(Storage="_AcceptTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptTime
		{
			get
			{
				return this._AcceptTime;
			}
			set
			{
				if ((this._AcceptTime != value))
				{
					this.OnAcceptTimeChanging(value);
					this.SendPropertyChanging();
					this._AcceptTime = value;
					this.SendPropertyChanged("AcceptTime");
					this.OnAcceptTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(50)")]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_TaskState", DbType="NVarChar(50)")]
		public string TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="NVarChar(50)")]
		public string TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask", Storage="_EmpInfo", ThisKey="TaskCreaterID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StockTransferTask.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StockTransferTask.Add(this);
						this._TaskCreaterID = value.EmpID;
					}
					else
					{
						this._TaskCreaterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask1", Storage="_EmpInfo1", ThisKey="TaskTargetID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.StockTransferTask1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.StockTransferTask1.Add(this);
						this._TaskTargetID = value.EmpID;
					}
					else
					{
						this._TaskTargetID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StorageCommitOutAssetAudit")]
	public partial class StorageCommitOutAssetAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageCommitOutAssetAuditID;
		
		private int _StorageCommitOutNoticeID;
		
		private int _StorageCommitOutProduceAuditID;
		
		private string _AuditStatus;
		
		private string _AuditOpinion;
		
		private System.DateTime _AuditTime;
		
		private int _AssetChief;
		
		private int _TaskID;
		
		private EntitySet<StorageCommitOutDirectorConfirm> _StorageCommitOutDirectorConfirm;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageCommitOutNotice> _StorageCommitOutNotice;
		
		private EntityRef<StorageCommitOutProduceAudit> _StorageCommitOutProduceAudit;
		
		private EntityRef<StorageOutTask> _StorageOutTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageCommitOutAssetAuditIDChanging(int value);
    partial void OnStorageCommitOutAssetAuditIDChanged();
    partial void OnStorageCommitOutNoticeIDChanging(int value);
    partial void OnStorageCommitOutNoticeIDChanged();
    partial void OnStorageCommitOutProduceAuditIDChanging(int value);
    partial void OnStorageCommitOutProduceAuditIDChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditTimeChanging(System.DateTime value);
    partial void OnAuditTimeChanged();
    partial void OnAssetChiefChanging(int value);
    partial void OnAssetChiefChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public StorageCommitOutAssetAudit()
		{
			this._StorageCommitOutDirectorConfirm = new EntitySet<StorageCommitOutDirectorConfirm>(new Action<StorageCommitOutDirectorConfirm>(this.attach_StorageCommitOutDirectorConfirm), new Action<StorageCommitOutDirectorConfirm>(this.detach_StorageCommitOutDirectorConfirm));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageCommitOutNotice = default(EntityRef<StorageCommitOutNotice>);
			this._StorageCommitOutProduceAudit = default(EntityRef<StorageCommitOutProduceAudit>);
			this._StorageOutTask = default(EntityRef<StorageOutTask>);
			OnCreated();
		}
		
		[Column(Storage="_StorageCommitOutAssetAuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageCommitOutAssetAuditID
		{
			get
			{
				return this._StorageCommitOutAssetAuditID;
			}
			set
			{
				if ((this._StorageCommitOutAssetAuditID != value))
				{
					this.OnStorageCommitOutAssetAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutAssetAuditID = value;
					this.SendPropertyChanged("StorageCommitOutAssetAuditID");
					this.OnStorageCommitOutAssetAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeID", DbType="Int NOT NULL")]
		public int StorageCommitOutNoticeID
		{
			get
			{
				return this._StorageCommitOutNoticeID;
			}
			set
			{
				if ((this._StorageCommitOutNoticeID != value))
				{
					if (this._StorageCommitOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeID = value;
					this.SendPropertyChanged("StorageCommitOutNoticeID");
					this.OnStorageCommitOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutProduceAuditID", DbType="Int NOT NULL")]
		public int StorageCommitOutProduceAuditID
		{
			get
			{
				return this._StorageCommitOutProduceAuditID;
			}
			set
			{
				if ((this._StorageCommitOutProduceAuditID != value))
				{
					if (this._StorageCommitOutProduceAudit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutProduceAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutProduceAuditID = value;
					this.SendPropertyChanged("StorageCommitOutProduceAuditID");
					this.OnStorageCommitOutProduceAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTime", DbType="DateTime NOT NULL")]
		public System.DateTime AuditTime
		{
			get
			{
				return this._AuditTime;
			}
			set
			{
				if ((this._AuditTime != value))
				{
					this.OnAuditTimeChanging(value);
					this.SendPropertyChanging();
					this._AuditTime = value;
					this.SendPropertyChanged("AuditTime");
					this.OnAuditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AssetChief", DbType="Int NOT NULL")]
		public int AssetChief
		{
			get
			{
				return this._AssetChief;
			}
			set
			{
				if ((this._AssetChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetChiefChanging(value);
					this.SendPropertyChanging();
					this._AssetChief = value;
					this.SendPropertyChanged("AssetChief");
					this.OnAssetChiefChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._StorageOutTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="StorageCommitOutAssetAudit_StorageCommitOutDirectorConfirm", Storage="_StorageCommitOutDirectorConfirm", ThisKey="StorageCommitOutAssetAuditID", OtherKey="StorageCommitOutAssetAuditID")]
		public EntitySet<StorageCommitOutDirectorConfirm> StorageCommitOutDirectorConfirm
		{
			get
			{
				return this._StorageCommitOutDirectorConfirm;
			}
			set
			{
				this._StorageCommitOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutAssetAudit", Storage="_EmpInfo", ThisKey="AssetChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageCommitOutAssetAudit.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutAssetAudit.Add(this);
						this._AssetChief = value.EmpID;
					}
					else
					{
						this._AssetChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutAssetAudit", Storage="_StorageCommitOutNotice", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID", IsForeignKey=true)]
		public StorageCommitOutNotice StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice.Entity;
			}
			set
			{
				StorageCommitOutNotice previousValue = this._StorageCommitOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutNotice.Entity = null;
						previousValue.StorageCommitOutAssetAudit.Remove(this);
					}
					this._StorageCommitOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutAssetAudit.Add(this);
						this._StorageCommitOutNoticeID = value.StorageCommitOutNoticeID;
					}
					else
					{
						this._StorageCommitOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutNotice");
				}
			}
		}
		
		[Association(Name="StorageCommitOutProduceAudit_StorageCommitOutAssetAudit", Storage="_StorageCommitOutProduceAudit", ThisKey="StorageCommitOutProduceAuditID", OtherKey="StorageCommitOutProduceAuditID", IsForeignKey=true)]
		public StorageCommitOutProduceAudit StorageCommitOutProduceAudit
		{
			get
			{
				return this._StorageCommitOutProduceAudit.Entity;
			}
			set
			{
				StorageCommitOutProduceAudit previousValue = this._StorageCommitOutProduceAudit.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutProduceAudit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutProduceAudit.Entity = null;
						previousValue.StorageCommitOutAssetAudit.Remove(this);
					}
					this._StorageCommitOutProduceAudit.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutAssetAudit.Add(this);
						this._StorageCommitOutProduceAuditID = value.StorageCommitOutProduceAuditID;
					}
					else
					{
						this._StorageCommitOutProduceAuditID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutProduceAudit");
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageCommitOutAssetAudit", Storage="_StorageOutTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public StorageOutTask StorageOutTask
		{
			get
			{
				return this._StorageOutTask.Entity;
			}
			set
			{
				StorageOutTask previousValue = this._StorageOutTask.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutTask.Entity = null;
						previousValue.StorageCommitOutAssetAudit.Remove(this);
					}
					this._StorageOutTask.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutAssetAudit.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("StorageOutTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutAssetAudit = this;
		}
		
		private void detach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutAssetAudit = null;
		}
	}
	
	[Table(Name="dbo.StorageCommitOutDetails")]
	public partial class StorageCommitOutDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageCommitOutDetailsID;
		
		private int _StorageCommitOutNoticeID;
		
		private System.Nullable<decimal> _Gentaojian;
		
		private System.Nullable<decimal> _Metre;
		
		private System.Nullable<decimal> _Ton;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private int _MaterialID;
		
		private EntitySet<StorageCommitOutRealDetails> _StorageCommitOutRealDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<StorageCommitOutNotice> _StorageCommitOutNotice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageCommitOutDetailsIDChanging(int value);
    partial void OnStorageCommitOutDetailsIDChanged();
    partial void OnStorageCommitOutNoticeIDChanging(int value);
    partial void OnStorageCommitOutNoticeIDChanged();
    partial void OnGentaojianChanging(System.Nullable<decimal> value);
    partial void OnGentaojianChanged();
    partial void OnMetreChanging(System.Nullable<decimal> value);
    partial void OnMetreChanged();
    partial void OnTonChanging(System.Nullable<decimal> value);
    partial void OnTonChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    #endregion
		
		public StorageCommitOutDetails()
		{
			this._StorageCommitOutRealDetails = new EntitySet<StorageCommitOutRealDetails>(new Action<StorageCommitOutRealDetails>(this.attach_StorageCommitOutRealDetails), new Action<StorageCommitOutRealDetails>(this.detach_StorageCommitOutRealDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._StorageCommitOutNotice = default(EntityRef<StorageCommitOutNotice>);
			OnCreated();
		}
		
		[Column(Storage="_StorageCommitOutDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageCommitOutDetailsID
		{
			get
			{
				return this._StorageCommitOutDetailsID;
			}
			set
			{
				if ((this._StorageCommitOutDetailsID != value))
				{
					this.OnStorageCommitOutDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutDetailsID = value;
					this.SendPropertyChanged("StorageCommitOutDetailsID");
					this.OnStorageCommitOutDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeID", DbType="Int NOT NULL")]
		public int StorageCommitOutNoticeID
		{
			get
			{
				return this._StorageCommitOutNoticeID;
			}
			set
			{
				if ((this._StorageCommitOutNoticeID != value))
				{
					if (this._StorageCommitOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeID = value;
					this.SendPropertyChanged("StorageCommitOutNoticeID");
					this.OnStorageCommitOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_Metre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Metre
		{
			get
			{
				return this._Metre;
			}
			set
			{
				if ((this._Metre != value))
				{
					this.OnMetreChanging(value);
					this.SendPropertyChanging();
					this._Metre = value;
					this.SendPropertyChanged("Metre");
					this.OnMetreChanged();
				}
			}
		}
		
		[Column(Storage="_Ton", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Ton
		{
			get
			{
				return this._Ton;
			}
			set
			{
				if ((this._Ton != value))
				{
					this.OnTonChanging(value);
					this.SendPropertyChanging();
					this._Ton = value;
					this.SendPropertyChanged("Ton");
					this.OnTonChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Association(Name="StorageCommitOutDetails_StorageCommitOutRealDetails", Storage="_StorageCommitOutRealDetails", ThisKey="StorageCommitOutDetailsID", OtherKey="StorageCommitOutDetailsID")]
		public EntitySet<StorageCommitOutRealDetails> StorageCommitOutRealDetails
		{
			get
			{
				return this._StorageCommitOutRealDetails;
			}
			set
			{
				this._StorageCommitOutRealDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageCommitOutDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="MaterialInfo_StorageCommitOutDetails", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.StorageCommitOutDetails.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDetails.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutDetails", Storage="_StorageCommitOutNotice", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StorageCommitOutNotice StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice.Entity;
			}
			set
			{
				StorageCommitOutNotice previousValue = this._StorageCommitOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutNotice.Entity = null;
						previousValue.StorageCommitOutDetails.Remove(this);
					}
					this._StorageCommitOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDetails.Add(this);
						this._StorageCommitOutNoticeID = value.StorageCommitOutNoticeID;
					}
					else
					{
						this._StorageCommitOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutNotice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageCommitOutRealDetails(StorageCommitOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutDetails = this;
		}
		
		private void detach_StorageCommitOutRealDetails(StorageCommitOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutDetails = null;
		}
	}
	
	[Table(Name="dbo.StorageCommitOutDirectorConfirm")]
	public partial class StorageCommitOutDirectorConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageCommitOutDirectorConfirmID;
		
		private int _StorageCommitOutNoticeID;
		
		private int _StorageCommitOutAssetAuditID;
		
		private System.DateTime _ConfirmTime;
		
		private int _Director;
		
		private int _TaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageCommitOutAssetAudit> _StorageCommitOutAssetAudit;
		
		private EntityRef<StorageCommitOutNotice> _StorageCommitOutNotice;
		
		private EntityRef<StorageOutTask> _StorageOutTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageCommitOutDirectorConfirmIDChanging(int value);
    partial void OnStorageCommitOutDirectorConfirmIDChanged();
    partial void OnStorageCommitOutNoticeIDChanging(int value);
    partial void OnStorageCommitOutNoticeIDChanged();
    partial void OnStorageCommitOutAssetAuditIDChanging(int value);
    partial void OnStorageCommitOutAssetAuditIDChanged();
    partial void OnConfirmTimeChanging(System.DateTime value);
    partial void OnConfirmTimeChanged();
    partial void OnDirectorChanging(int value);
    partial void OnDirectorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public StorageCommitOutDirectorConfirm()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageCommitOutAssetAudit = default(EntityRef<StorageCommitOutAssetAudit>);
			this._StorageCommitOutNotice = default(EntityRef<StorageCommitOutNotice>);
			this._StorageOutTask = default(EntityRef<StorageOutTask>);
			OnCreated();
		}
		
		[Column(Storage="_StorageCommitOutDirectorConfirmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageCommitOutDirectorConfirmID
		{
			get
			{
				return this._StorageCommitOutDirectorConfirmID;
			}
			set
			{
				if ((this._StorageCommitOutDirectorConfirmID != value))
				{
					this.OnStorageCommitOutDirectorConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutDirectorConfirmID = value;
					this.SendPropertyChanged("StorageCommitOutDirectorConfirmID");
					this.OnStorageCommitOutDirectorConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeID", DbType="Int NOT NULL")]
		public int StorageCommitOutNoticeID
		{
			get
			{
				return this._StorageCommitOutNoticeID;
			}
			set
			{
				if ((this._StorageCommitOutNoticeID != value))
				{
					if (this._StorageCommitOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeID = value;
					this.SendPropertyChanged("StorageCommitOutNoticeID");
					this.OnStorageCommitOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutAssetAuditID", DbType="Int NOT NULL")]
		public int StorageCommitOutAssetAuditID
		{
			get
			{
				return this._StorageCommitOutAssetAuditID;
			}
			set
			{
				if ((this._StorageCommitOutAssetAuditID != value))
				{
					if (this._StorageCommitOutAssetAudit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutAssetAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutAssetAuditID = value;
					this.SendPropertyChanged("StorageCommitOutAssetAuditID");
					this.OnStorageCommitOutAssetAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Director", DbType="Int NOT NULL")]
		public int Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._StorageOutTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutDirectorConfirm", Storage="_EmpInfo", ThisKey="Director", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageCommitOutDirectorConfirm.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDirectorConfirm.Add(this);
						this._Director = value.EmpID;
					}
					else
					{
						this._Director = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageCommitOutAssetAudit_StorageCommitOutDirectorConfirm", Storage="_StorageCommitOutAssetAudit", ThisKey="StorageCommitOutAssetAuditID", OtherKey="StorageCommitOutAssetAuditID", IsForeignKey=true)]
		public StorageCommitOutAssetAudit StorageCommitOutAssetAudit
		{
			get
			{
				return this._StorageCommitOutAssetAudit.Entity;
			}
			set
			{
				StorageCommitOutAssetAudit previousValue = this._StorageCommitOutAssetAudit.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutAssetAudit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutAssetAudit.Entity = null;
						previousValue.StorageCommitOutDirectorConfirm.Remove(this);
					}
					this._StorageCommitOutAssetAudit.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDirectorConfirm.Add(this);
						this._StorageCommitOutAssetAuditID = value.StorageCommitOutAssetAuditID;
					}
					else
					{
						this._StorageCommitOutAssetAuditID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutAssetAudit");
				}
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutDirectorConfirm", Storage="_StorageCommitOutNotice", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID", IsForeignKey=true)]
		public StorageCommitOutNotice StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice.Entity;
			}
			set
			{
				StorageCommitOutNotice previousValue = this._StorageCommitOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutNotice.Entity = null;
						previousValue.StorageCommitOutDirectorConfirm.Remove(this);
					}
					this._StorageCommitOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDirectorConfirm.Add(this);
						this._StorageCommitOutNoticeID = value.StorageCommitOutNoticeID;
					}
					else
					{
						this._StorageCommitOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutNotice");
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageCommitOutDirectorConfirm", Storage="_StorageOutTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public StorageOutTask StorageOutTask
		{
			get
			{
				return this._StorageOutTask.Entity;
			}
			set
			{
				StorageOutTask previousValue = this._StorageOutTask.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutTask.Entity = null;
						previousValue.StorageCommitOutDirectorConfirm.Remove(this);
					}
					this._StorageOutTask.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutDirectorConfirm.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("StorageOutTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StorageCommitOutNotice")]
	public partial class StorageCommitOutNotice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageCommitOutNoticeID;
		
		private string _StorageCommitOutNoticeCode;
		
		private int _Receiver;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageCommitOutAssetAudit> _StorageCommitOutAssetAudit;
		
		private EntitySet<StorageCommitOutDetails> _StorageCommitOutDetails;
		
		private EntitySet<StorageCommitOutDirectorConfirm> _StorageCommitOutDirectorConfirm;
		
		private EntitySet<StorageCommitOutProduceAudit> _StorageCommitOutProduceAudit;
		
		private EntitySet<StorageCommitOutRealDetails> _StorageCommitOutRealDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<BusinessUnitInfo> _BusinessUnitInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageCommitOutNoticeIDChanging(int value);
    partial void OnStorageCommitOutNoticeIDChanged();
    partial void OnStorageCommitOutNoticeCodeChanging(string value);
    partial void OnStorageCommitOutNoticeCodeChanged();
    partial void OnReceiverChanging(int value);
    partial void OnReceiverChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageCommitOutNotice()
		{
			this._StorageCommitOutAssetAudit = new EntitySet<StorageCommitOutAssetAudit>(new Action<StorageCommitOutAssetAudit>(this.attach_StorageCommitOutAssetAudit), new Action<StorageCommitOutAssetAudit>(this.detach_StorageCommitOutAssetAudit));
			this._StorageCommitOutDetails = new EntitySet<StorageCommitOutDetails>(new Action<StorageCommitOutDetails>(this.attach_StorageCommitOutDetails), new Action<StorageCommitOutDetails>(this.detach_StorageCommitOutDetails));
			this._StorageCommitOutDirectorConfirm = new EntitySet<StorageCommitOutDirectorConfirm>(new Action<StorageCommitOutDirectorConfirm>(this.attach_StorageCommitOutDirectorConfirm), new Action<StorageCommitOutDirectorConfirm>(this.detach_StorageCommitOutDirectorConfirm));
			this._StorageCommitOutProduceAudit = new EntitySet<StorageCommitOutProduceAudit>(new Action<StorageCommitOutProduceAudit>(this.attach_StorageCommitOutProduceAudit), new Action<StorageCommitOutProduceAudit>(this.detach_StorageCommitOutProduceAudit));
			this._StorageCommitOutRealDetails = new EntitySet<StorageCommitOutRealDetails>(new Action<StorageCommitOutRealDetails>(this.attach_StorageCommitOutRealDetails), new Action<StorageCommitOutRealDetails>(this.detach_StorageCommitOutRealDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._BusinessUnitInfo = default(EntityRef<BusinessUnitInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageCommitOutNoticeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageCommitOutNoticeID
		{
			get
			{
				return this._StorageCommitOutNoticeID;
			}
			set
			{
				if ((this._StorageCommitOutNoticeID != value))
				{
					this.OnStorageCommitOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeID = value;
					this.SendPropertyChanged("StorageCommitOutNoticeID");
					this.OnStorageCommitOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageCommitOutNoticeCode
		{
			get
			{
				return this._StorageCommitOutNoticeCode;
			}
			set
			{
				if ((this._StorageCommitOutNoticeCode != value))
				{
					this.OnStorageCommitOutNoticeCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeCode = value;
					this.SendPropertyChanged("StorageCommitOutNoticeCode");
					this.OnStorageCommitOutNoticeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Receiver", DbType="Int NOT NULL")]
		public int Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					if (this._BusinessUnitInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutAssetAudit", Storage="_StorageCommitOutAssetAudit", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID")]
		public EntitySet<StorageCommitOutAssetAudit> StorageCommitOutAssetAudit
		{
			get
			{
				return this._StorageCommitOutAssetAudit;
			}
			set
			{
				this._StorageCommitOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutDetails", Storage="_StorageCommitOutDetails", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID")]
		public EntitySet<StorageCommitOutDetails> StorageCommitOutDetails
		{
			get
			{
				return this._StorageCommitOutDetails;
			}
			set
			{
				this._StorageCommitOutDetails.Assign(value);
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutDirectorConfirm", Storage="_StorageCommitOutDirectorConfirm", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID")]
		public EntitySet<StorageCommitOutDirectorConfirm> StorageCommitOutDirectorConfirm
		{
			get
			{
				return this._StorageCommitOutDirectorConfirm;
			}
			set
			{
				this._StorageCommitOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutProduceAudit", Storage="_StorageCommitOutProduceAudit", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID")]
		public EntitySet<StorageCommitOutProduceAudit> StorageCommitOutProduceAudit
		{
			get
			{
				return this._StorageCommitOutProduceAudit;
			}
			set
			{
				this._StorageCommitOutProduceAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutRealDetails", Storage="_StorageCommitOutRealDetails", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID")]
		public EntitySet<StorageCommitOutRealDetails> StorageCommitOutRealDetails
		{
			get
			{
				return this._StorageCommitOutRealDetails;
			}
			set
			{
				this._StorageCommitOutRealDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutNotice", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageCommitOutNotice.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutNotice.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="BusinessUnitInfo_StorageCommitOutNotice", Storage="_BusinessUnitInfo", ThisKey="Receiver", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BusinessUnitInfo BusinessUnitInfo
		{
			get
			{
				return this._BusinessUnitInfo.Entity;
			}
			set
			{
				BusinessUnitInfo previousValue = this._BusinessUnitInfo.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnitInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnitInfo.Entity = null;
						previousValue.StorageCommitOutNotice.Remove(this);
					}
					this._BusinessUnitInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutNotice.Add(this);
						this._Receiver = value.BusinessUnitID;
					}
					else
					{
						this._Receiver = default(int);
					}
					this.SendPropertyChanged("BusinessUnitInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = this;
		}
		
		private void detach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = null;
		}
		
		private void attach_StorageCommitOutDetails(StorageCommitOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = this;
		}
		
		private void detach_StorageCommitOutDetails(StorageCommitOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = null;
		}
		
		private void attach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = this;
		}
		
		private void detach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = null;
		}
		
		private void attach_StorageCommitOutProduceAudit(StorageCommitOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = this;
		}
		
		private void detach_StorageCommitOutProduceAudit(StorageCommitOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = null;
		}
		
		private void attach_StorageCommitOutRealDetails(StorageCommitOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = this;
		}
		
		private void detach_StorageCommitOutRealDetails(StorageCommitOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutNotice = null;
		}
	}
	
	[Table(Name="dbo.StorageCommitOutProduceAudit")]
	public partial class StorageCommitOutProduceAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageCommitOutProduceAuditID;
		
		private int _StorageCommitOutNoticeID;
		
		private string _AuditStatus;
		
		private string _AuditOpinion;
		
		private System.DateTime _AuditTime;
		
		private int _ProduceChief;
		
		private int _TaskID;
		
		private EntitySet<StorageCommitOutAssetAudit> _StorageCommitOutAssetAudit;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageCommitOutNotice> _StorageCommitOutNotice;
		
		private EntityRef<StorageOutTask> _StorageOutTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageCommitOutProduceAuditIDChanging(int value);
    partial void OnStorageCommitOutProduceAuditIDChanged();
    partial void OnStorageCommitOutNoticeIDChanging(int value);
    partial void OnStorageCommitOutNoticeIDChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditTimeChanging(System.DateTime value);
    partial void OnAuditTimeChanged();
    partial void OnProduceChiefChanging(int value);
    partial void OnProduceChiefChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public StorageCommitOutProduceAudit()
		{
			this._StorageCommitOutAssetAudit = new EntitySet<StorageCommitOutAssetAudit>(new Action<StorageCommitOutAssetAudit>(this.attach_StorageCommitOutAssetAudit), new Action<StorageCommitOutAssetAudit>(this.detach_StorageCommitOutAssetAudit));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageCommitOutNotice = default(EntityRef<StorageCommitOutNotice>);
			this._StorageOutTask = default(EntityRef<StorageOutTask>);
			OnCreated();
		}
		
		[Column(Storage="_StorageCommitOutProduceAuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageCommitOutProduceAuditID
		{
			get
			{
				return this._StorageCommitOutProduceAuditID;
			}
			set
			{
				if ((this._StorageCommitOutProduceAuditID != value))
				{
					this.OnStorageCommitOutProduceAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutProduceAuditID = value;
					this.SendPropertyChanged("StorageCommitOutProduceAuditID");
					this.OnStorageCommitOutProduceAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeID", DbType="Int NOT NULL")]
		public int StorageCommitOutNoticeID
		{
			get
			{
				return this._StorageCommitOutNoticeID;
			}
			set
			{
				if ((this._StorageCommitOutNoticeID != value))
				{
					if (this._StorageCommitOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeID = value;
					this.SendPropertyChanged("StorageCommitOutNoticeID");
					this.OnStorageCommitOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTime", DbType="DateTime NOT NULL")]
		public System.DateTime AuditTime
		{
			get
			{
				return this._AuditTime;
			}
			set
			{
				if ((this._AuditTime != value))
				{
					this.OnAuditTimeChanging(value);
					this.SendPropertyChanging();
					this._AuditTime = value;
					this.SendPropertyChanged("AuditTime");
					this.OnAuditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ProduceChief", DbType="Int NOT NULL")]
		public int ProduceChief
		{
			get
			{
				return this._ProduceChief;
			}
			set
			{
				if ((this._ProduceChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduceChiefChanging(value);
					this.SendPropertyChanging();
					this._ProduceChief = value;
					this.SendPropertyChanged("ProduceChief");
					this.OnProduceChiefChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._StorageOutTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="StorageCommitOutProduceAudit_StorageCommitOutAssetAudit", Storage="_StorageCommitOutAssetAudit", ThisKey="StorageCommitOutProduceAuditID", OtherKey="StorageCommitOutProduceAuditID")]
		public EntitySet<StorageCommitOutAssetAudit> StorageCommitOutAssetAudit
		{
			get
			{
				return this._StorageCommitOutAssetAudit;
			}
			set
			{
				this._StorageCommitOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutProduceAudit", Storage="_EmpInfo", ThisKey="ProduceChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageCommitOutProduceAudit.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutProduceAudit.Add(this);
						this._ProduceChief = value.EmpID;
					}
					else
					{
						this._ProduceChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutProduceAudit", Storage="_StorageCommitOutNotice", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID", IsForeignKey=true)]
		public StorageCommitOutNotice StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice.Entity;
			}
			set
			{
				StorageCommitOutNotice previousValue = this._StorageCommitOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutNotice.Entity = null;
						previousValue.StorageCommitOutProduceAudit.Remove(this);
					}
					this._StorageCommitOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutProduceAudit.Add(this);
						this._StorageCommitOutNoticeID = value.StorageCommitOutNoticeID;
					}
					else
					{
						this._StorageCommitOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutNotice");
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageCommitOutProduceAudit", Storage="_StorageOutTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public StorageOutTask StorageOutTask
		{
			get
			{
				return this._StorageOutTask.Entity;
			}
			set
			{
				StorageOutTask previousValue = this._StorageOutTask.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutTask.Entity = null;
						previousValue.StorageCommitOutProduceAudit.Remove(this);
					}
					this._StorageOutTask.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutProduceAudit.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("StorageOutTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutProduceAudit = this;
		}
		
		private void detach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageCommitOutProduceAudit = null;
		}
	}
	
	[Table(Name="dbo.StorageCommitOutRealDetails")]
	public partial class StorageCommitOutRealDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageCommitOutRealDetailsID;
		
		private int _StorageCommitOutNoticeID;
		
		private int _StocksID;
		
		private decimal _RealGentaojian;
		
		private decimal _RealMetre;
		
		private decimal _RealTon;
		
		private decimal _RealAmount;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private int _StorageCommitOutDetailsID;
		
		private string _MaterialStatus;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageCommitOutDetails> _StorageCommitOutDetails;
		
		private EntityRef<StorageCommitOutNotice> _StorageCommitOutNotice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageCommitOutRealDetailsIDChanging(int value);
    partial void OnStorageCommitOutRealDetailsIDChanged();
    partial void OnStorageCommitOutNoticeIDChanging(int value);
    partial void OnStorageCommitOutNoticeIDChanged();
    partial void OnStocksIDChanging(int value);
    partial void OnStocksIDChanged();
    partial void OnRealGentaojianChanging(decimal value);
    partial void OnRealGentaojianChanged();
    partial void OnRealMetreChanging(decimal value);
    partial void OnRealMetreChanged();
    partial void OnRealTonChanging(decimal value);
    partial void OnRealTonChanged();
    partial void OnRealAmountChanging(decimal value);
    partial void OnRealAmountChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnStorageCommitOutDetailsIDChanging(int value);
    partial void OnStorageCommitOutDetailsIDChanged();
    partial void OnMaterialStatusChanging(string value);
    partial void OnMaterialStatusChanged();
    #endregion
		
		public StorageCommitOutRealDetails()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageCommitOutDetails = default(EntityRef<StorageCommitOutDetails>);
			this._StorageCommitOutNotice = default(EntityRef<StorageCommitOutNotice>);
			OnCreated();
		}
		
		[Column(Storage="_StorageCommitOutRealDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageCommitOutRealDetailsID
		{
			get
			{
				return this._StorageCommitOutRealDetailsID;
			}
			set
			{
				if ((this._StorageCommitOutRealDetailsID != value))
				{
					this.OnStorageCommitOutRealDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutRealDetailsID = value;
					this.SendPropertyChanged("StorageCommitOutRealDetailsID");
					this.OnStorageCommitOutRealDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeID", DbType="Int NOT NULL")]
		public int StorageCommitOutNoticeID
		{
			get
			{
				return this._StorageCommitOutNoticeID;
			}
			set
			{
				if ((this._StorageCommitOutNoticeID != value))
				{
					if (this._StorageCommitOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutNoticeID = value;
					this.SendPropertyChanged("StorageCommitOutNoticeID");
					this.OnStorageCommitOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this.OnStocksIDChanging(value);
					this.SendPropertyChanging();
					this._StocksID = value;
					this.SendPropertyChanged("StocksID");
					this.OnStocksIDChanged();
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this.OnRealGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RealGentaojian = value;
					this.SendPropertyChanged("RealGentaojian");
					this.OnRealGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this.OnRealMetreChanging(value);
					this.SendPropertyChanging();
					this._RealMetre = value;
					this.SendPropertyChanged("RealMetre");
					this.OnRealMetreChanged();
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this.OnRealTonChanging(value);
					this.SendPropertyChanging();
					this._RealTon = value;
					this.SendPropertyChanged("RealTon");
					this.OnRealTonChanged();
				}
			}
		}
		
		[Column(Storage="_RealAmount", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealAmount
		{
			get
			{
				return this._RealAmount;
			}
			set
			{
				if ((this._RealAmount != value))
				{
					this.OnRealAmountChanging(value);
					this.SendPropertyChanging();
					this._RealAmount = value;
					this.SendPropertyChanged("RealAmount");
					this.OnRealAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutDetailsID", DbType="Int NOT NULL")]
		public int StorageCommitOutDetailsID
		{
			get
			{
				return this._StorageCommitOutDetailsID;
			}
			set
			{
				if ((this._StorageCommitOutDetailsID != value))
				{
					if (this._StorageCommitOutDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageCommitOutDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageCommitOutDetailsID = value;
					this.SendPropertyChanged("StorageCommitOutDetailsID");
					this.OnStorageCommitOutDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MaterialStatus
		{
			get
			{
				return this._MaterialStatus;
			}
			set
			{
				if ((this._MaterialStatus != value))
				{
					this.OnMaterialStatusChanging(value);
					this.SendPropertyChanging();
					this._MaterialStatus = value;
					this.SendPropertyChanged("MaterialStatus");
					this.OnMaterialStatusChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageCommitOutRealDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageCommitOutRealDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutRealDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageCommitOutDetails_StorageCommitOutRealDetails", Storage="_StorageCommitOutDetails", ThisKey="StorageCommitOutDetailsID", OtherKey="StorageCommitOutDetailsID", IsForeignKey=true)]
		public StorageCommitOutDetails StorageCommitOutDetails
		{
			get
			{
				return this._StorageCommitOutDetails.Entity;
			}
			set
			{
				StorageCommitOutDetails previousValue = this._StorageCommitOutDetails.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutDetails.Entity = null;
						previousValue.StorageCommitOutRealDetails.Remove(this);
					}
					this._StorageCommitOutDetails.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutRealDetails.Add(this);
						this._StorageCommitOutDetailsID = value.StorageCommitOutDetailsID;
					}
					else
					{
						this._StorageCommitOutDetailsID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutDetails");
				}
			}
		}
		
		[Association(Name="StorageCommitOutNotice_StorageCommitOutRealDetails", Storage="_StorageCommitOutNotice", ThisKey="StorageCommitOutNoticeID", OtherKey="StorageCommitOutNoticeID", IsForeignKey=true)]
		public StorageCommitOutNotice StorageCommitOutNotice
		{
			get
			{
				return this._StorageCommitOutNotice.Entity;
			}
			set
			{
				StorageCommitOutNotice previousValue = this._StorageCommitOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageCommitOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageCommitOutNotice.Entity = null;
						previousValue.StorageCommitOutRealDetails.Remove(this);
					}
					this._StorageCommitOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageCommitOutRealDetails.Add(this);
						this._StorageCommitOutNoticeID = value.StorageCommitOutNoticeID;
					}
					else
					{
						this._StorageCommitOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageCommitOutNotice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StorageDirector")]
	public partial class StorageDirector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInDirectorID;
		
		private int _HeadID;
		
		private string _Approve;
		
		private string _ApproveIdea;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageInHead> _StorageInHead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInDirectorIDChanging(int value);
    partial void OnStorageInDirectorIDChanged();
    partial void OnHeadIDChanging(int value);
    partial void OnHeadIDChanged();
    partial void OnApproveChanging(string value);
    partial void OnApproveChanged();
    partial void OnApproveIdeaChanging(string value);
    partial void OnApproveIdeaChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageDirector()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageInHead = default(EntityRef<StorageInHead>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInDirectorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInDirectorID
		{
			get
			{
				return this._StorageInDirectorID;
			}
			set
			{
				if ((this._StorageInDirectorID != value))
				{
					this.OnStorageInDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInDirectorID = value;
					this.SendPropertyChanged("StorageInDirectorID");
					this.OnStorageInDirectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeadID", DbType="Int NOT NULL")]
		public int HeadID
		{
			get
			{
				return this._HeadID;
			}
			set
			{
				if ((this._HeadID != value))
				{
					if (this._StorageInHead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadIDChanging(value);
					this.SendPropertyChanging();
					this._HeadID = value;
					this.SendPropertyChanged("HeadID");
					this.OnHeadIDChanged();
				}
			}
		}
		
		[Column(Storage="_Approve", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this.OnApproveChanging(value);
					this.SendPropertyChanging();
					this._Approve = value;
					this.SendPropertyChanged("Approve");
					this.OnApproveChanged();
				}
			}
		}
		
		[Column(Storage="_ApproveIdea", DbType="NVarChar(200)")]
		public string ApproveIdea
		{
			get
			{
				return this._ApproveIdea;
			}
			set
			{
				if ((this._ApproveIdea != value))
				{
					this.OnApproveIdeaChanging(value);
					this.SendPropertyChanging();
					this._ApproveIdea = value;
					this.SendPropertyChanged("ApproveIdea");
					this.OnApproveIdeaChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageDirector", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageDirector.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageDirector.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageInHead_StorageDirector", Storage="_StorageInHead", ThisKey="HeadID", OtherKey="StorageInHeadID", IsForeignKey=true)]
		public StorageInHead StorageInHead
		{
			get
			{
				return this._StorageInHead.Entity;
			}
			set
			{
				StorageInHead previousValue = this._StorageInHead.Entity;
				if (((previousValue != value) 
							|| (this._StorageInHead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInHead.Entity = null;
						previousValue.StorageDirector.Remove(this);
					}
					this._StorageInHead.Entity = value;
					if ((value != null))
					{
						value.StorageDirector.Add(this);
						this._HeadID = value.StorageInHeadID;
					}
					else
					{
						this._HeadID = default(int);
					}
					this.SendPropertyChanged("StorageInHead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StorageInAssets")]
	public partial class StorageInAssets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInAssetsID;
		
		private int _TestID;
		
		private string _BillCode;
		
		private string _financeCode;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private string _MaterialsAttribute;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageInHead> _StorageInHead;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageInTest> _StorageInTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInAssetsIDChanging(int value);
    partial void OnStorageInAssetsIDChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnBillCodeChanging(string value);
    partial void OnBillCodeChanged();
    partial void OnfinanceCodeChanging(string value);
    partial void OnfinanceCodeChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnMaterialsAttributeChanging(string value);
    partial void OnMaterialsAttributeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageInAssets()
		{
			this._StorageInHead = new EntitySet<StorageInHead>(new Action<StorageInHead>(this.attach_StorageInHead), new Action<StorageInHead>(this.detach_StorageInHead));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageInTest = default(EntityRef<StorageInTest>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInAssetsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInAssetsID
		{
			get
			{
				return this._StorageInAssetsID;
			}
			set
			{
				if ((this._StorageInAssetsID != value))
				{
					this.OnStorageInAssetsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInAssetsID = value;
					this.SendPropertyChanged("StorageInAssetsID");
					this.OnStorageInAssetsIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._StorageInTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this.OnBillCodeChanging(value);
					this.SendPropertyChanging();
					this._BillCode = value;
					this.SendPropertyChanged("BillCode");
					this.OnBillCodeChanged();
				}
			}
		}
		
		[Column(Storage="_financeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string financeCode
		{
			get
			{
				return this._financeCode;
			}
			set
			{
				if ((this._financeCode != value))
				{
					this.OnfinanceCodeChanging(value);
					this.SendPropertyChanging();
					this._financeCode = value;
					this.SendPropertyChanged("financeCode");
					this.OnfinanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsAttribute", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialsAttribute
		{
			get
			{
				return this._MaterialsAttribute;
			}
			set
			{
				if ((this._MaterialsAttribute != value))
				{
					this.OnMaterialsAttributeChanging(value);
					this.SendPropertyChanging();
					this._MaterialsAttribute = value;
					this.SendPropertyChanged("MaterialsAttribute");
					this.OnMaterialsAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageInAssets_StorageInHead", Storage="_StorageInHead", ThisKey="StorageInAssetsID", OtherKey="AssetsID")]
		public EntitySet<StorageInHead> StorageInHead
		{
			get
			{
				return this._StorageInHead;
			}
			set
			{
				this._StorageInHead.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInAssets", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInAssets.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInAssets.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageInTest_StorageInAssets", Storage="_StorageInTest", ThisKey="TestID", OtherKey="StorageInTestID", IsForeignKey=true)]
		public StorageInTest StorageInTest
		{
			get
			{
				return this._StorageInTest.Entity;
			}
			set
			{
				StorageInTest previousValue = this._StorageInTest.Entity;
				if (((previousValue != value) 
							|| (this._StorageInTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInTest.Entity = null;
						previousValue.StorageInAssets.Remove(this);
					}
					this._StorageInTest.Entity = value;
					if ((value != null))
					{
						value.StorageInAssets.Add(this);
						this._TestID = value.StorageInTestID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("StorageInTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageInHead(StorageInHead entity)
		{
			this.SendPropertyChanging();
			entity.StorageInAssets = this;
		}
		
		private void detach_StorageInHead(StorageInHead entity)
		{
			this.SendPropertyChanging();
			entity.StorageInAssets = null;
		}
	}
	
	[Table(Name="dbo.StorageInfo")]
	public partial class StorageInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageID;
		
		private string _StorageName;
		
		private string _StorageCode;
		
		private int _EmpID;
		
		private string _Remark;
		
		private EntitySet<AwaitScrap> _AwaitScrap;
		
		private EntitySet<PileInfo> _PileInfo;
		
		private EntitySet<QualifiedStocks> _QualifiedStocks;
		
		private EntitySet<SrinStocktakingDetails> _SrinStocktakingDetails;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageIDChanging(int value);
    partial void OnStorageIDChanged();
    partial void OnStorageNameChanging(string value);
    partial void OnStorageNameChanged();
    partial void OnStorageCodeChanging(string value);
    partial void OnStorageCodeChanged();
    partial void OnEmpIDChanging(int value);
    partial void OnEmpIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageInfo()
		{
			this._AwaitScrap = new EntitySet<AwaitScrap>(new Action<AwaitScrap>(this.attach_AwaitScrap), new Action<AwaitScrap>(this.detach_AwaitScrap));
			this._PileInfo = new EntitySet<PileInfo>(new Action<PileInfo>(this.attach_PileInfo), new Action<PileInfo>(this.detach_PileInfo));
			this._QualifiedStocks = new EntitySet<QualifiedStocks>(new Action<QualifiedStocks>(this.attach_QualifiedStocks), new Action<QualifiedStocks>(this.detach_QualifiedStocks));
			this._SrinStocktakingDetails = new EntitySet<SrinStocktakingDetails>(new Action<SrinStocktakingDetails>(this.attach_SrinStocktakingDetails), new Action<SrinStocktakingDetails>(this.detach_SrinStocktakingDetails));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageName
		{
			get
			{
				return this._StorageName;
			}
			set
			{
				if ((this._StorageName != value))
				{
					this.OnStorageNameChanging(value);
					this.SendPropertyChanging();
					this._StorageName = value;
					this.SendPropertyChanged("StorageName");
					this.OnStorageNameChanged();
				}
			}
		}
		
		[Column(Storage="_StorageCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageCode
		{
			get
			{
				return this._StorageCode;
			}
			set
			{
				if ((this._StorageCode != value))
				{
					this.OnStorageCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageCode = value;
					this.SendPropertyChanged("StorageCode");
					this.OnStorageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EmpID", DbType="Int NOT NULL")]
		public int EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageInfo_AwaitScrap", Storage="_AwaitScrap", ThisKey="StorageID", OtherKey="StorageID")]
		public EntitySet<AwaitScrap> AwaitScrap
		{
			get
			{
				return this._AwaitScrap;
			}
			set
			{
				this._AwaitScrap.Assign(value);
			}
		}
		
		[Association(Name="StorageInfo_PileInfo", Storage="_PileInfo", ThisKey="StorageID", OtherKey="StorageID")]
		public EntitySet<PileInfo> PileInfo
		{
			get
			{
				return this._PileInfo;
			}
			set
			{
				this._PileInfo.Assign(value);
			}
		}
		
		[Association(Name="StorageInfo_QualifiedStocks", Storage="_QualifiedStocks", ThisKey="StorageID", OtherKey="StorageID")]
		public EntitySet<QualifiedStocks> QualifiedStocks
		{
			get
			{
				return this._QualifiedStocks;
			}
			set
			{
				this._QualifiedStocks.Assign(value);
			}
		}
		
		[Association(Name="StorageInfo_SrinStocktakingDetails", Storage="_SrinStocktakingDetails", ThisKey="StorageID", OtherKey="StorageID")]
		public EntitySet<SrinStocktakingDetails> SrinStocktakingDetails
		{
			get
			{
				return this._SrinStocktakingDetails;
			}
			set
			{
				this._SrinStocktakingDetails.Assign(value);
			}
		}
		
		[Association(Name="StorageInfo_StockOnline", Storage="_StockOnline", ThisKey="StorageID", OtherKey="StorageID")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="StorageInfo_TableOfStocks", Storage="_TableOfStocks", ThisKey="StorageID", OtherKey="StorageID")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInfo", Storage="_EmpInfo", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInfo.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInfo.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = this;
		}
		
		private void detach_AwaitScrap(AwaitScrap entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = null;
		}
		
		private void attach_PileInfo(PileInfo entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = this;
		}
		
		private void detach_PileInfo(PileInfo entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = null;
		}
		
		private void attach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = this;
		}
		
		private void detach_QualifiedStocks(QualifiedStocks entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = null;
		}
		
		private void attach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = this;
		}
		
		private void detach_SrinStocktakingDetails(SrinStocktakingDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.StorageInfo = null;
		}
	}
	
	[Table(Name="dbo.StorageInHead")]
	public partial class StorageInHead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInHeadID;
		
		private int _AssetsID;
		
		private string _Auditing;
		
		private string _Auditingidea;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageDirector> _StorageDirector;
		
		private EntityRef<StorageInAssets> _StorageInAssets;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInHeadIDChanging(int value);
    partial void OnStorageInHeadIDChanged();
    partial void OnAssetsIDChanging(int value);
    partial void OnAssetsIDChanged();
    partial void OnAuditingChanging(string value);
    partial void OnAuditingChanged();
    partial void OnAuditingideaChanging(string value);
    partial void OnAuditingideaChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageInHead()
		{
			this._StorageDirector = new EntitySet<StorageDirector>(new Action<StorageDirector>(this.attach_StorageDirector), new Action<StorageDirector>(this.detach_StorageDirector));
			this._StorageInAssets = default(EntityRef<StorageInAssets>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInHeadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInHeadID
		{
			get
			{
				return this._StorageInHeadID;
			}
			set
			{
				if ((this._StorageInHeadID != value))
				{
					this.OnStorageInHeadIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInHeadID = value;
					this.SendPropertyChanged("StorageInHeadID");
					this.OnStorageInHeadIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssetsID", DbType="Int NOT NULL")]
		public int AssetsID
		{
			get
			{
				return this._AssetsID;
			}
			set
			{
				if ((this._AssetsID != value))
				{
					if (this._StorageInAssets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetsIDChanging(value);
					this.SendPropertyChanging();
					this._AssetsID = value;
					this.SendPropertyChanged("AssetsID");
					this.OnAssetsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditing", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Auditing
		{
			get
			{
				return this._Auditing;
			}
			set
			{
				if ((this._Auditing != value))
				{
					this.OnAuditingChanging(value);
					this.SendPropertyChanging();
					this._Auditing = value;
					this.SendPropertyChanged("Auditing");
					this.OnAuditingChanged();
				}
			}
		}
		
		[Column(Storage="_Auditingidea", DbType="NVarChar(200)")]
		public string Auditingidea
		{
			get
			{
				return this._Auditingidea;
			}
			set
			{
				if ((this._Auditingidea != value))
				{
					this.OnAuditingideaChanging(value);
					this.SendPropertyChanging();
					this._Auditingidea = value;
					this.SendPropertyChanged("Auditingidea");
					this.OnAuditingideaChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageInHead_StorageDirector", Storage="_StorageDirector", ThisKey="StorageInHeadID", OtherKey="HeadID")]
		public EntitySet<StorageDirector> StorageDirector
		{
			get
			{
				return this._StorageDirector;
			}
			set
			{
				this._StorageDirector.Assign(value);
			}
		}
		
		[Association(Name="StorageInAssets_StorageInHead", Storage="_StorageInAssets", ThisKey="AssetsID", OtherKey="StorageInAssetsID", IsForeignKey=true)]
		public StorageInAssets StorageInAssets
		{
			get
			{
				return this._StorageInAssets.Entity;
			}
			set
			{
				StorageInAssets previousValue = this._StorageInAssets.Entity;
				if (((previousValue != value) 
							|| (this._StorageInAssets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInAssets.Entity = null;
						previousValue.StorageInHead.Remove(this);
					}
					this._StorageInAssets.Entity = value;
					if ((value != null))
					{
						value.StorageInHead.Add(this);
						this._AssetsID = value.StorageInAssetsID;
					}
					else
					{
						this._AssetsID = default(int);
					}
					this.SendPropertyChanged("StorageInAssets");
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageInHead", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInHead.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInHead.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageDirector(StorageDirector entity)
		{
			this.SendPropertyChanging();
			entity.StorageInHead = this;
		}
		
		private void detach_StorageDirector(StorageDirector entity)
		{
			this.SendPropertyChanging();
			entity.StorageInHead = null;
		}
	}
	
	[Table(Name="dbo.StorageInMain")]
	public partial class StorageInMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInID;
		
		private string _StorageInCode;
		
		private System.Nullable<int> _ReceivingType;
		
		private string _Remark;
		
		private string _StorageInQualifiedNum;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private EntitySet<StorageProduce> _StorageProduce;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<ReceivingTypeInfo> _ReceivingTypeInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInIDChanging(int value);
    partial void OnStorageInIDChanged();
    partial void OnStorageInCodeChanging(string value);
    partial void OnStorageInCodeChanged();
    partial void OnReceivingTypeChanging(System.Nullable<int> value);
    partial void OnReceivingTypeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnStorageInQualifiedNumChanging(string value);
    partial void OnStorageInQualifiedNumChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public StorageInMain()
		{
			this._StorageProduce = new EntitySet<StorageProduce>(new Action<StorageProduce>(this.attach_StorageProduce), new Action<StorageProduce>(this.detach_StorageProduce));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._ReceivingTypeInfo = default(EntityRef<ReceivingTypeInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this.OnStorageInCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageInCode = value;
					this.SendPropertyChanged("StorageInCode");
					this.OnStorageInCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingType", DbType="Int")]
		public System.Nullable<int> ReceivingType
		{
			get
			{
				return this._ReceivingType;
			}
			set
			{
				if ((this._ReceivingType != value))
				{
					if (this._ReceivingTypeInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceivingTypeChanging(value);
					this.SendPropertyChanging();
					this._ReceivingType = value;
					this.SendPropertyChanged("ReceivingType");
					this.OnReceivingTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInQualifiedNum", DbType="NVarChar(50)")]
		public string StorageInQualifiedNum
		{
			get
			{
				return this._StorageInQualifiedNum;
			}
			set
			{
				if ((this._StorageInQualifiedNum != value))
				{
					this.OnStorageInQualifiedNumChanging(value);
					this.SendPropertyChanging();
					this._StorageInQualifiedNum = value;
					this.SendPropertyChanged("StorageInQualifiedNum");
					this.OnStorageInQualifiedNumChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="StorageInMain_StorageProduce", Storage="_StorageProduce", ThisKey="StorageInID", OtherKey="StorageInID")]
		public EntitySet<StorageProduce> StorageProduce
		{
			get
			{
				return this._StorageProduce;
			}
			set
			{
				this._StorageProduce.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInMain", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInMain.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInMain.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="ReceivingTypeInfo_StorageInMain", Storage="_ReceivingTypeInfo", ThisKey="ReceivingType", OtherKey="ReceivingTypeID", IsForeignKey=true)]
		public ReceivingTypeInfo ReceivingTypeInfo
		{
			get
			{
				return this._ReceivingTypeInfo.Entity;
			}
			set
			{
				ReceivingTypeInfo previousValue = this._ReceivingTypeInfo.Entity;
				if (((previousValue != value) 
							|| (this._ReceivingTypeInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReceivingTypeInfo.Entity = null;
						previousValue.StorageInMain.Remove(this);
					}
					this._ReceivingTypeInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInMain.Add(this);
						this._ReceivingType = value.ReceivingTypeID;
					}
					else
					{
						this._ReceivingType = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReceivingTypeInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.StorageInMain = this;
		}
		
		private void detach_StorageProduce(StorageProduce entity)
		{
			this.SendPropertyChanging();
			entity.StorageInMain = null;
		}
	}
	
	[Table(Name="dbo.StorageInMaterials")]
	public partial class StorageInMaterials : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInMaterialsID;
		
		private int _ProduceID;
		
		private System.Nullable<decimal> _RealGentaojian;
		
		private System.Nullable<decimal> _RealMetre;
		
		private System.Nullable<decimal> _RealTon;
		
		private int _ManufacturerID;
		
		private string _IsManufacturer;
		
		private int _SupplierID;
		
		private string _Supplier;
		
		private string _Data;
		
		private string _Standard;
		
		private string _Parts;
		
		private string _Appearance;
		
		private int _PileID;
		
		private int _Creator;
		
		private System.DateTime _StorageTime;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageInMaterialsLeader> _StorageInMaterialsLeader;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<StorageProduce> _StorageProduce;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInMaterialsIDChanging(int value);
    partial void OnStorageInMaterialsIDChanged();
    partial void OnProduceIDChanging(int value);
    partial void OnProduceIDChanged();
    partial void OnRealGentaojianChanging(System.Nullable<decimal> value);
    partial void OnRealGentaojianChanged();
    partial void OnRealMetreChanging(System.Nullable<decimal> value);
    partial void OnRealMetreChanged();
    partial void OnRealTonChanging(System.Nullable<decimal> value);
    partial void OnRealTonChanged();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnIsManufacturerChanging(string value);
    partial void OnIsManufacturerChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierChanging(string value);
    partial void OnSupplierChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnStandardChanging(string value);
    partial void OnStandardChanged();
    partial void OnPartsChanging(string value);
    partial void OnPartsChanged();
    partial void OnAppearanceChanging(string value);
    partial void OnAppearanceChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageInMaterials()
		{
			this._StorageInMaterialsLeader = new EntitySet<StorageInMaterialsLeader>(new Action<StorageInMaterialsLeader>(this.attach_StorageInMaterialsLeader), new Action<StorageInMaterialsLeader>(this.detach_StorageInMaterialsLeader));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._StorageProduce = default(EntityRef<StorageProduce>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInMaterialsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInMaterialsID
		{
			get
			{
				return this._StorageInMaterialsID;
			}
			set
			{
				if ((this._StorageInMaterialsID != value))
				{
					this.OnStorageInMaterialsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInMaterialsID = value;
					this.SendPropertyChanged("StorageInMaterialsID");
					this.OnStorageInMaterialsIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProduceID", DbType="Int NOT NULL")]
		public int ProduceID
		{
			get
			{
				return this._ProduceID;
			}
			set
			{
				if ((this._ProduceID != value))
				{
					if (this._StorageProduce.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduceIDChanging(value);
					this.SendPropertyChanging();
					this._ProduceID = value;
					this.SendPropertyChanged("ProduceID");
					this.OnProduceIDChanged();
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this.OnRealGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RealGentaojian = value;
					this.SendPropertyChanged("RealGentaojian");
					this.OnRealGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this.OnRealMetreChanging(value);
					this.SendPropertyChanging();
					this._RealMetre = value;
					this.SendPropertyChanged("RealMetre");
					this.OnRealMetreChanged();
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this.OnRealTonChanging(value);
					this.SendPropertyChanging();
					this._RealTon = value;
					this.SendPropertyChanged("RealTon");
					this.OnRealTonChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsManufacturer", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string IsManufacturer
		{
			get
			{
				return this._IsManufacturer;
			}
			set
			{
				if ((this._IsManufacturer != value))
				{
					this.OnIsManufacturerChanging(value);
					this.SendPropertyChanging();
					this._IsManufacturer = value;
					this.SendPropertyChanged("IsManufacturer");
					this.OnIsManufacturerChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Supplier
		{
			get
			{
				return this._Supplier;
			}
			set
			{
				if ((this._Supplier != value))
				{
					this.OnSupplierChanging(value);
					this.SendPropertyChanging();
					this._Supplier = value;
					this.SendPropertyChanged("Supplier");
					this.OnSupplierChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Standard", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Standard
		{
			get
			{
				return this._Standard;
			}
			set
			{
				if ((this._Standard != value))
				{
					this.OnStandardChanging(value);
					this.SendPropertyChanging();
					this._Standard = value;
					this.SendPropertyChanged("Standard");
					this.OnStandardChanged();
				}
			}
		}
		
		[Column(Storage="_Parts", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Parts
		{
			get
			{
				return this._Parts;
			}
			set
			{
				if ((this._Parts != value))
				{
					this.OnPartsChanging(value);
					this.SendPropertyChanging();
					this._Parts = value;
					this.SendPropertyChanged("Parts");
					this.OnPartsChanged();
				}
			}
		}
		
		[Column(Storage="_Appearance", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Appearance
		{
			get
			{
				return this._Appearance;
			}
			set
			{
				if ((this._Appearance != value))
				{
					this.OnAppearanceChanging(value);
					this.SendPropertyChanging();
					this._Appearance = value;
					this.SendPropertyChanged("Appearance");
					this.OnAppearanceChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageInMaterials_StorageInMaterialsLeader", Storage="_StorageInMaterialsLeader", ThisKey="StorageInMaterialsID", OtherKey="MaterialsID")]
		public EntitySet<StorageInMaterialsLeader> StorageInMaterialsLeader
		{
			get
			{
				return this._StorageInMaterialsLeader;
			}
			set
			{
				this._StorageInMaterialsLeader.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInMaterials", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInMaterials.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterials.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_StorageInMaterials", Storage="_Manufacturer", ThisKey="ManufacturerID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.StorageInMaterials.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterials.Add(this);
						this._ManufacturerID = value.ManufacturerID;
					}
					else
					{
						this._ManufacturerID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="PileInfo_StorageInMaterials", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.StorageInMaterials.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterials.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="StorageProduce_StorageInMaterials", Storage="_StorageProduce", ThisKey="ProduceID", OtherKey="StorageInProduceID", IsForeignKey=true)]
		public StorageProduce StorageProduce
		{
			get
			{
				return this._StorageProduce.Entity;
			}
			set
			{
				StorageProduce previousValue = this._StorageProduce.Entity;
				if (((previousValue != value) 
							|| (this._StorageProduce.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageProduce.Entity = null;
						previousValue.StorageInMaterials.Remove(this);
					}
					this._StorageProduce.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterials.Add(this);
						this._ProduceID = value.StorageInProduceID;
					}
					else
					{
						this._ProduceID = default(int);
					}
					this.SendPropertyChanged("StorageProduce");
				}
			}
		}
		
		[Association(Name="SupplierInfo_StorageInMaterials", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.StorageInMaterials.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterials.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageInMaterialsLeader(StorageInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.StorageInMaterials = this;
		}
		
		private void detach_StorageInMaterialsLeader(StorageInMaterialsLeader entity)
		{
			this.SendPropertyChanging();
			entity.StorageInMaterials = null;
		}
	}
	
	[Table(Name="dbo.StorageInMaterialsLeader")]
	public partial class StorageInMaterialsLeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialsLeaderID;
		
		private int _MaterialsID;
		
		private string _Auditing;
		
		private string _Auditingidea;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageInTest> _StorageInTest;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageInMaterials> _StorageInMaterials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialsLeaderIDChanging(int value);
    partial void OnMaterialsLeaderIDChanged();
    partial void OnMaterialsIDChanging(int value);
    partial void OnMaterialsIDChanged();
    partial void OnAuditingChanging(string value);
    partial void OnAuditingChanged();
    partial void OnAuditingideaChanging(string value);
    partial void OnAuditingideaChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageInMaterialsLeader()
		{
			this._StorageInTest = new EntitySet<StorageInTest>(new Action<StorageInTest>(this.attach_StorageInTest), new Action<StorageInTest>(this.detach_StorageInTest));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageInMaterials = default(EntityRef<StorageInMaterials>);
			OnCreated();
		}
		
		[Column(Storage="_MaterialsLeaderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialsLeaderID
		{
			get
			{
				return this._MaterialsLeaderID;
			}
			set
			{
				if ((this._MaterialsLeaderID != value))
				{
					this.OnMaterialsLeaderIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialsLeaderID = value;
					this.SendPropertyChanged("MaterialsLeaderID");
					this.OnMaterialsLeaderIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsID", DbType="Int NOT NULL")]
		public int MaterialsID
		{
			get
			{
				return this._MaterialsID;
			}
			set
			{
				if ((this._MaterialsID != value))
				{
					if (this._StorageInMaterials.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialsID = value;
					this.SendPropertyChanged("MaterialsID");
					this.OnMaterialsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditing", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Auditing
		{
			get
			{
				return this._Auditing;
			}
			set
			{
				if ((this._Auditing != value))
				{
					this.OnAuditingChanging(value);
					this.SendPropertyChanging();
					this._Auditing = value;
					this.SendPropertyChanged("Auditing");
					this.OnAuditingChanged();
				}
			}
		}
		
		[Column(Storage="_Auditingidea", DbType="NVarChar(200)")]
		public string Auditingidea
		{
			get
			{
				return this._Auditingidea;
			}
			set
			{
				if ((this._Auditingidea != value))
				{
					this.OnAuditingideaChanging(value);
					this.SendPropertyChanging();
					this._Auditingidea = value;
					this.SendPropertyChanged("Auditingidea");
					this.OnAuditingideaChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageInMaterialsLeader_StorageInTest", Storage="_StorageInTest", ThisKey="MaterialsLeaderID", OtherKey="MaterialsLeaderID")]
		public EntitySet<StorageInTest> StorageInTest
		{
			get
			{
				return this._StorageInTest;
			}
			set
			{
				this._StorageInTest.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInMaterialsLeader", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInMaterialsLeader.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterialsLeader.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageInMaterials_StorageInMaterialsLeader", Storage="_StorageInMaterials", ThisKey="MaterialsID", OtherKey="StorageInMaterialsID", IsForeignKey=true)]
		public StorageInMaterials StorageInMaterials
		{
			get
			{
				return this._StorageInMaterials.Entity;
			}
			set
			{
				StorageInMaterials previousValue = this._StorageInMaterials.Entity;
				if (((previousValue != value) 
							|| (this._StorageInMaterials.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInMaterials.Entity = null;
						previousValue.StorageInMaterialsLeader.Remove(this);
					}
					this._StorageInMaterials.Entity = value;
					if ((value != null))
					{
						value.StorageInMaterialsLeader.Add(this);
						this._MaterialsID = value.StorageInMaterialsID;
					}
					else
					{
						this._MaterialsID = default(int);
					}
					this.SendPropertyChanged("StorageInMaterials");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageInTest(StorageInTest entity)
		{
			this.SendPropertyChanging();
			entity.StorageInMaterialsLeader = this;
		}
		
		private void detach_StorageInTest(StorageInTest entity)
		{
			this.SendPropertyChanging();
			entity.StorageInMaterialsLeader = null;
		}
	}
	
	[Table(Name="dbo.StorageInTest")]
	public partial class StorageInTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInTestID;
		
		private int _MaterialsLeaderID;
		
		private System.Nullable<decimal> _TestGentaojian;
		
		private System.Nullable<decimal> _TestMetre;
		
		private System.Nullable<decimal> _TestTon;
		
		private System.Nullable<decimal> _FailedGentaojian;
		
		private System.Nullable<decimal> _FailedMetre;
		
		private System.Nullable<decimal> _FailedTon;
		
		private string _InspectionReportNum;
		
		private string _FileNameStr;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageInAssets> _StorageInAssets;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageInMaterialsLeader> _StorageInMaterialsLeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInTestIDChanging(int value);
    partial void OnStorageInTestIDChanged();
    partial void OnMaterialsLeaderIDChanging(int value);
    partial void OnMaterialsLeaderIDChanged();
    partial void OnTestGentaojianChanging(System.Nullable<decimal> value);
    partial void OnTestGentaojianChanged();
    partial void OnTestMetreChanging(System.Nullable<decimal> value);
    partial void OnTestMetreChanged();
    partial void OnTestTonChanging(System.Nullable<decimal> value);
    partial void OnTestTonChanged();
    partial void OnFailedGentaojianChanging(System.Nullable<decimal> value);
    partial void OnFailedGentaojianChanged();
    partial void OnFailedMetreChanging(System.Nullable<decimal> value);
    partial void OnFailedMetreChanged();
    partial void OnFailedTonChanging(System.Nullable<decimal> value);
    partial void OnFailedTonChanged();
    partial void OnInspectionReportNumChanging(string value);
    partial void OnInspectionReportNumChanged();
    partial void OnFileNameStrChanging(string value);
    partial void OnFileNameStrChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageInTest()
		{
			this._StorageInAssets = new EntitySet<StorageInAssets>(new Action<StorageInAssets>(this.attach_StorageInAssets), new Action<StorageInAssets>(this.detach_StorageInAssets));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageInMaterialsLeader = default(EntityRef<StorageInMaterialsLeader>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInTestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInTestID
		{
			get
			{
				return this._StorageInTestID;
			}
			set
			{
				if ((this._StorageInTestID != value))
				{
					this.OnStorageInTestIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInTestID = value;
					this.SendPropertyChanged("StorageInTestID");
					this.OnStorageInTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsLeaderID", DbType="Int NOT NULL")]
		public int MaterialsLeaderID
		{
			get
			{
				return this._MaterialsLeaderID;
			}
			set
			{
				if ((this._MaterialsLeaderID != value))
				{
					if (this._StorageInMaterialsLeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsLeaderIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialsLeaderID = value;
					this.SendPropertyChanged("MaterialsLeaderID");
					this.OnMaterialsLeaderIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestGentaojian
		{
			get
			{
				return this._TestGentaojian;
			}
			set
			{
				if ((this._TestGentaojian != value))
				{
					this.OnTestGentaojianChanging(value);
					this.SendPropertyChanging();
					this._TestGentaojian = value;
					this.SendPropertyChanged("TestGentaojian");
					this.OnTestGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_TestMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestMetre
		{
			get
			{
				return this._TestMetre;
			}
			set
			{
				if ((this._TestMetre != value))
				{
					this.OnTestMetreChanging(value);
					this.SendPropertyChanging();
					this._TestMetre = value;
					this.SendPropertyChanged("TestMetre");
					this.OnTestMetreChanged();
				}
			}
		}
		
		[Column(Storage="_TestTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestTon
		{
			get
			{
				return this._TestTon;
			}
			set
			{
				if ((this._TestTon != value))
				{
					this.OnTestTonChanging(value);
					this.SendPropertyChanging();
					this._TestTon = value;
					this.SendPropertyChanged("TestTon");
					this.OnTestTonChanged();
				}
			}
		}
		
		[Column(Storage="_FailedGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailedGentaojian
		{
			get
			{
				return this._FailedGentaojian;
			}
			set
			{
				if ((this._FailedGentaojian != value))
				{
					this.OnFailedGentaojianChanging(value);
					this.SendPropertyChanging();
					this._FailedGentaojian = value;
					this.SendPropertyChanged("FailedGentaojian");
					this.OnFailedGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_FailedMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailedMetre
		{
			get
			{
				return this._FailedMetre;
			}
			set
			{
				if ((this._FailedMetre != value))
				{
					this.OnFailedMetreChanging(value);
					this.SendPropertyChanging();
					this._FailedMetre = value;
					this.SendPropertyChanged("FailedMetre");
					this.OnFailedMetreChanged();
				}
			}
		}
		
		[Column(Storage="_FailedTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailedTon
		{
			get
			{
				return this._FailedTon;
			}
			set
			{
				if ((this._FailedTon != value))
				{
					this.OnFailedTonChanging(value);
					this.SendPropertyChanging();
					this._FailedTon = value;
					this.SendPropertyChanged("FailedTon");
					this.OnFailedTonChanged();
				}
			}
		}
		
		[Column(Storage="_InspectionReportNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InspectionReportNum
		{
			get
			{
				return this._InspectionReportNum;
			}
			set
			{
				if ((this._InspectionReportNum != value))
				{
					this.OnInspectionReportNumChanging(value);
					this.SendPropertyChanging();
					this._InspectionReportNum = value;
					this.SendPropertyChanged("InspectionReportNum");
					this.OnInspectionReportNumChanged();
				}
			}
		}
		
		[Column(Storage="_FileNameStr", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileNameStr
		{
			get
			{
				return this._FileNameStr;
			}
			set
			{
				if ((this._FileNameStr != value))
				{
					this.OnFileNameStrChanging(value);
					this.SendPropertyChanging();
					this._FileNameStr = value;
					this.SendPropertyChanged("FileNameStr");
					this.OnFileNameStrChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageInTest_StorageInAssets", Storage="_StorageInAssets", ThisKey="StorageInTestID", OtherKey="TestID")]
		public EntitySet<StorageInAssets> StorageInAssets
		{
			get
			{
				return this._StorageInAssets;
			}
			set
			{
				this._StorageInAssets.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageInTest", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageInTest.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageInTest.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageInMaterialsLeader_StorageInTest", Storage="_StorageInMaterialsLeader", ThisKey="MaterialsLeaderID", OtherKey="MaterialsLeaderID", IsForeignKey=true)]
		public StorageInMaterialsLeader StorageInMaterialsLeader
		{
			get
			{
				return this._StorageInMaterialsLeader.Entity;
			}
			set
			{
				StorageInMaterialsLeader previousValue = this._StorageInMaterialsLeader.Entity;
				if (((previousValue != value) 
							|| (this._StorageInMaterialsLeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInMaterialsLeader.Entity = null;
						previousValue.StorageInTest.Remove(this);
					}
					this._StorageInMaterialsLeader.Entity = value;
					if ((value != null))
					{
						value.StorageInTest.Add(this);
						this._MaterialsLeaderID = value.MaterialsLeaderID;
					}
					else
					{
						this._MaterialsLeaderID = default(int);
					}
					this.SendPropertyChanged("StorageInMaterialsLeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageInAssets(StorageInAssets entity)
		{
			this.SendPropertyChanging();
			entity.StorageInTest = this;
		}
		
		private void detach_StorageInAssets(StorageInAssets entity)
		{
			this.SendPropertyChanging();
			entity.StorageInTest = null;
		}
	}
	
	[Table(Name="dbo.StorageOutAssetAudit")]
	public partial class StorageOutAssetAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageOutAssetAuditID;
		
		private int _StorageOutNoticeID;
		
		private int _StorageOutProduceAuditID;
		
		private string _AuditStatus;
		
		private string _AuditOpinion;
		
		private System.DateTime _AuditTime;
		
		private int _AssetChief;
		
		private int _TaskID;
		
		private EntitySet<StorageOutDirectorConfirm> _StorageOutDirectorConfirm;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageOutNotice> _StorageOutNotice;
		
		private EntityRef<StorageOutProduceAudit> _StorageOutProduceAudit;
		
		private EntityRef<StorageOutTask> _StorageOutTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageOutAssetAuditIDChanging(int value);
    partial void OnStorageOutAssetAuditIDChanged();
    partial void OnStorageOutNoticeIDChanging(int value);
    partial void OnStorageOutNoticeIDChanged();
    partial void OnStorageOutProduceAuditIDChanging(int value);
    partial void OnStorageOutProduceAuditIDChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditTimeChanging(System.DateTime value);
    partial void OnAuditTimeChanged();
    partial void OnAssetChiefChanging(int value);
    partial void OnAssetChiefChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public StorageOutAssetAudit()
		{
			this._StorageOutDirectorConfirm = new EntitySet<StorageOutDirectorConfirm>(new Action<StorageOutDirectorConfirm>(this.attach_StorageOutDirectorConfirm), new Action<StorageOutDirectorConfirm>(this.detach_StorageOutDirectorConfirm));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageOutNotice = default(EntityRef<StorageOutNotice>);
			this._StorageOutProduceAudit = default(EntityRef<StorageOutProduceAudit>);
			this._StorageOutTask = default(EntityRef<StorageOutTask>);
			OnCreated();
		}
		
		[Column(Storage="_StorageOutAssetAuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageOutAssetAuditID
		{
			get
			{
				return this._StorageOutAssetAuditID;
			}
			set
			{
				if ((this._StorageOutAssetAuditID != value))
				{
					this.OnStorageOutAssetAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutAssetAuditID = value;
					this.SendPropertyChanged("StorageOutAssetAuditID");
					this.OnStorageOutAssetAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					if (this._StorageOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeID = value;
					this.SendPropertyChanged("StorageOutNoticeID");
					this.OnStorageOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutProduceAuditID", DbType="Int NOT NULL")]
		public int StorageOutProduceAuditID
		{
			get
			{
				return this._StorageOutProduceAuditID;
			}
			set
			{
				if ((this._StorageOutProduceAuditID != value))
				{
					if (this._StorageOutProduceAudit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutProduceAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutProduceAuditID = value;
					this.SendPropertyChanged("StorageOutProduceAuditID");
					this.OnStorageOutProduceAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTime", DbType="DateTime NOT NULL")]
		public System.DateTime AuditTime
		{
			get
			{
				return this._AuditTime;
			}
			set
			{
				if ((this._AuditTime != value))
				{
					this.OnAuditTimeChanging(value);
					this.SendPropertyChanging();
					this._AuditTime = value;
					this.SendPropertyChanged("AuditTime");
					this.OnAuditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AssetChief", DbType="Int NOT NULL")]
		public int AssetChief
		{
			get
			{
				return this._AssetChief;
			}
			set
			{
				if ((this._AssetChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetChiefChanging(value);
					this.SendPropertyChanging();
					this._AssetChief = value;
					this.SendPropertyChanged("AssetChief");
					this.OnAssetChiefChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._StorageOutTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="StorageOutAssetAudit_StorageOutDirectorConfirm", Storage="_StorageOutDirectorConfirm", ThisKey="StorageOutAssetAuditID", OtherKey="StorageOutAssetAuditID")]
		public EntitySet<StorageOutDirectorConfirm> StorageOutDirectorConfirm
		{
			get
			{
				return this._StorageOutDirectorConfirm;
			}
			set
			{
				this._StorageOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutAssetAudit", Storage="_EmpInfo", ThisKey="AssetChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutAssetAudit.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutAssetAudit.Add(this);
						this._AssetChief = value.EmpID;
					}
					else
					{
						this._AssetChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutAssetAudit", Storage="_StorageOutNotice", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID", IsForeignKey=true)]
		public StorageOutNotice StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice.Entity;
			}
			set
			{
				StorageOutNotice previousValue = this._StorageOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutNotice.Entity = null;
						previousValue.StorageOutAssetAudit.Remove(this);
					}
					this._StorageOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageOutAssetAudit.Add(this);
						this._StorageOutNoticeID = value.StorageOutNoticeID;
					}
					else
					{
						this._StorageOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageOutNotice");
				}
			}
		}
		
		[Association(Name="StorageOutProduceAudit_StorageOutAssetAudit", Storage="_StorageOutProduceAudit", ThisKey="StorageOutProduceAuditID", OtherKey="StorageOutProduceAuditID", IsForeignKey=true)]
		public StorageOutProduceAudit StorageOutProduceAudit
		{
			get
			{
				return this._StorageOutProduceAudit.Entity;
			}
			set
			{
				StorageOutProduceAudit previousValue = this._StorageOutProduceAudit.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutProduceAudit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutProduceAudit.Entity = null;
						previousValue.StorageOutAssetAudit.Remove(this);
					}
					this._StorageOutProduceAudit.Entity = value;
					if ((value != null))
					{
						value.StorageOutAssetAudit.Add(this);
						this._StorageOutProduceAuditID = value.StorageOutProduceAuditID;
					}
					else
					{
						this._StorageOutProduceAuditID = default(int);
					}
					this.SendPropertyChanged("StorageOutProduceAudit");
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageOutAssetAudit", Storage="_StorageOutTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public StorageOutTask StorageOutTask
		{
			get
			{
				return this._StorageOutTask.Entity;
			}
			set
			{
				StorageOutTask previousValue = this._StorageOutTask.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutTask.Entity = null;
						previousValue.StorageOutAssetAudit.Remove(this);
					}
					this._StorageOutTask.Entity = value;
					if ((value != null))
					{
						value.StorageOutAssetAudit.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("StorageOutTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutAssetAudit = this;
		}
		
		private void detach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutAssetAudit = null;
		}
	}
	
	[Table(Name="dbo.StorageOutDetails")]
	public partial class StorageOutDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageOutDetailsID;
		
		private int _StorageOutNoticeID;
		
		private int _MaterialID;
		
		private System.Nullable<decimal> _Gentaojian;
		
		private System.Nullable<decimal> _Metre;
		
		private System.Nullable<decimal> _Ton;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private EntitySet<StorageOutRealDetails> _StorageOutRealDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<StorageOutNotice> _StorageOutNotice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageOutDetailsIDChanging(int value);
    partial void OnStorageOutDetailsIDChanged();
    partial void OnStorageOutNoticeIDChanging(int value);
    partial void OnStorageOutNoticeIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnGentaojianChanging(System.Nullable<decimal> value);
    partial void OnGentaojianChanged();
    partial void OnMetreChanging(System.Nullable<decimal> value);
    partial void OnMetreChanged();
    partial void OnTonChanging(System.Nullable<decimal> value);
    partial void OnTonChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageOutDetails()
		{
			this._StorageOutRealDetails = new EntitySet<StorageOutRealDetails>(new Action<StorageOutRealDetails>(this.attach_StorageOutRealDetails), new Action<StorageOutRealDetails>(this.detach_StorageOutRealDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._StorageOutNotice = default(EntityRef<StorageOutNotice>);
			OnCreated();
		}
		
		[Column(Storage="_StorageOutDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageOutDetailsID
		{
			get
			{
				return this._StorageOutDetailsID;
			}
			set
			{
				if ((this._StorageOutDetailsID != value))
				{
					this.OnStorageOutDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutDetailsID = value;
					this.SendPropertyChanged("StorageOutDetailsID");
					this.OnStorageOutDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					if (this._StorageOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeID = value;
					this.SendPropertyChanged("StorageOutNoticeID");
					this.OnStorageOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this.OnGentaojianChanging(value);
					this.SendPropertyChanging();
					this._Gentaojian = value;
					this.SendPropertyChanged("Gentaojian");
					this.OnGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_Metre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Metre
		{
			get
			{
				return this._Metre;
			}
			set
			{
				if ((this._Metre != value))
				{
					this.OnMetreChanging(value);
					this.SendPropertyChanging();
					this._Metre = value;
					this.SendPropertyChanged("Metre");
					this.OnMetreChanged();
				}
			}
		}
		
		[Column(Storage="_Ton", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Ton
		{
			get
			{
				return this._Ton;
			}
			set
			{
				if ((this._Ton != value))
				{
					this.OnTonChanging(value);
					this.SendPropertyChanging();
					this._Ton = value;
					this.SendPropertyChanged("Ton");
					this.OnTonChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageOutDetails_StorageOutRealDetails", Storage="_StorageOutRealDetails", ThisKey="StorageOutDetailsID", OtherKey="StorageOutDetailsID")]
		public EntitySet<StorageOutRealDetails> StorageOutRealDetails
		{
			get
			{
				return this._StorageOutRealDetails;
			}
			set
			{
				this._StorageOutRealDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="MaterialInfo_StorageOutDetails", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.StorageOutDetails.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutDetails.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutDetails", Storage="_StorageOutNotice", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StorageOutNotice StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice.Entity;
			}
			set
			{
				StorageOutNotice previousValue = this._StorageOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutNotice.Entity = null;
						previousValue.StorageOutDetails.Remove(this);
					}
					this._StorageOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageOutDetails.Add(this);
						this._StorageOutNoticeID = value.StorageOutNoticeID;
					}
					else
					{
						this._StorageOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageOutNotice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageOutRealDetails(StorageOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutDetails = this;
		}
		
		private void detach_StorageOutRealDetails(StorageOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutDetails = null;
		}
	}
	
	[Table(Name="dbo.StorageOutDirectorConfirm")]
	public partial class StorageOutDirectorConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageOutDirectorConfirmID;
		
		private int _StorageOutNoticeID;
		
		private int _StorageOutAssetAuditID;
		
		private System.DateTime _ConfirmTime;
		
		private int _Director;
		
		private int _TaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageOutAssetAudit> _StorageOutAssetAudit;
		
		private EntityRef<StorageOutNotice> _StorageOutNotice;
		
		private EntityRef<StorageOutTask> _StorageOutTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageOutDirectorConfirmIDChanging(int value);
    partial void OnStorageOutDirectorConfirmIDChanged();
    partial void OnStorageOutNoticeIDChanging(int value);
    partial void OnStorageOutNoticeIDChanged();
    partial void OnStorageOutAssetAuditIDChanging(int value);
    partial void OnStorageOutAssetAuditIDChanged();
    partial void OnConfirmTimeChanging(System.DateTime value);
    partial void OnConfirmTimeChanged();
    partial void OnDirectorChanging(int value);
    partial void OnDirectorChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public StorageOutDirectorConfirm()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageOutAssetAudit = default(EntityRef<StorageOutAssetAudit>);
			this._StorageOutNotice = default(EntityRef<StorageOutNotice>);
			this._StorageOutTask = default(EntityRef<StorageOutTask>);
			OnCreated();
		}
		
		[Column(Storage="_StorageOutDirectorConfirmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageOutDirectorConfirmID
		{
			get
			{
				return this._StorageOutDirectorConfirmID;
			}
			set
			{
				if ((this._StorageOutDirectorConfirmID != value))
				{
					this.OnStorageOutDirectorConfirmIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutDirectorConfirmID = value;
					this.SendPropertyChanged("StorageOutDirectorConfirmID");
					this.OnStorageOutDirectorConfirmIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					if (this._StorageOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeID = value;
					this.SendPropertyChanged("StorageOutNoticeID");
					this.OnStorageOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutAssetAuditID", DbType="Int NOT NULL")]
		public int StorageOutAssetAuditID
		{
			get
			{
				return this._StorageOutAssetAuditID;
			}
			set
			{
				if ((this._StorageOutAssetAuditID != value))
				{
					if (this._StorageOutAssetAudit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutAssetAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutAssetAuditID = value;
					this.SendPropertyChanged("StorageOutAssetAuditID");
					this.OnStorageOutAssetAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this.OnConfirmTimeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmTime = value;
					this.SendPropertyChanged("ConfirmTime");
					this.OnConfirmTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Director", DbType="Int NOT NULL")]
		public int Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._StorageOutTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageOutDirectorConfirm", Storage="_EmpInfo", ThisKey="Director", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutDirectorConfirm.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutDirectorConfirm.Add(this);
						this._Director = value.EmpID;
					}
					else
					{
						this._Director = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageOutAssetAudit_StorageOutDirectorConfirm", Storage="_StorageOutAssetAudit", ThisKey="StorageOutAssetAuditID", OtherKey="StorageOutAssetAuditID", IsForeignKey=true)]
		public StorageOutAssetAudit StorageOutAssetAudit
		{
			get
			{
				return this._StorageOutAssetAudit.Entity;
			}
			set
			{
				StorageOutAssetAudit previousValue = this._StorageOutAssetAudit.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutAssetAudit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutAssetAudit.Entity = null;
						previousValue.StorageOutDirectorConfirm.Remove(this);
					}
					this._StorageOutAssetAudit.Entity = value;
					if ((value != null))
					{
						value.StorageOutDirectorConfirm.Add(this);
						this._StorageOutAssetAuditID = value.StorageOutAssetAuditID;
					}
					else
					{
						this._StorageOutAssetAuditID = default(int);
					}
					this.SendPropertyChanged("StorageOutAssetAudit");
				}
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutDirectorConfirm", Storage="_StorageOutNotice", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID", IsForeignKey=true)]
		public StorageOutNotice StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice.Entity;
			}
			set
			{
				StorageOutNotice previousValue = this._StorageOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutNotice.Entity = null;
						previousValue.StorageOutDirectorConfirm.Remove(this);
					}
					this._StorageOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageOutDirectorConfirm.Add(this);
						this._StorageOutNoticeID = value.StorageOutNoticeID;
					}
					else
					{
						this._StorageOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageOutNotice");
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageOutDirectorConfirm", Storage="_StorageOutTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public StorageOutTask StorageOutTask
		{
			get
			{
				return this._StorageOutTask.Entity;
			}
			set
			{
				StorageOutTask previousValue = this._StorageOutTask.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutTask.Entity = null;
						previousValue.StorageOutDirectorConfirm.Remove(this);
					}
					this._StorageOutTask.Entity = value;
					if ((value != null))
					{
						value.StorageOutDirectorConfirm.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("StorageOutTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StorageOutNotice")]
	public partial class StorageOutNotice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageOutNoticeID;
		
		private string _StorageOutNoticeCode;
		
		private string _ProjectStage;
		
		private int _ProjectID;
		
		private int _Proprietor;
		
		private int _Constructor;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntitySet<StorageOutAssetAudit> _StorageOutAssetAudit;
		
		private EntitySet<StorageOutDetails> _StorageOutDetails;
		
		private EntitySet<StorageOutDirectorConfirm> _StorageOutDirectorConfirm;
		
		private EntitySet<StorageOutProduceAudit> _StorageOutProduceAudit;
		
		private EntitySet<StorageOutRealDetails> _StorageOutRealDetails;
		
		private EntityRef<BusinessUnitInfo> _BusinessUnitInfo;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<BusinessUnitInfo> _BusinessUnitInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageOutNoticeIDChanging(int value);
    partial void OnStorageOutNoticeIDChanged();
    partial void OnStorageOutNoticeCodeChanging(string value);
    partial void OnStorageOutNoticeCodeChanged();
    partial void OnProjectStageChanging(string value);
    partial void OnProjectStageChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProprietorChanging(int value);
    partial void OnProprietorChanged();
    partial void OnConstructorChanging(int value);
    partial void OnConstructorChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageOutNotice()
		{
			this._StorageOutAssetAudit = new EntitySet<StorageOutAssetAudit>(new Action<StorageOutAssetAudit>(this.attach_StorageOutAssetAudit), new Action<StorageOutAssetAudit>(this.detach_StorageOutAssetAudit));
			this._StorageOutDetails = new EntitySet<StorageOutDetails>(new Action<StorageOutDetails>(this.attach_StorageOutDetails), new Action<StorageOutDetails>(this.detach_StorageOutDetails));
			this._StorageOutDirectorConfirm = new EntitySet<StorageOutDirectorConfirm>(new Action<StorageOutDirectorConfirm>(this.attach_StorageOutDirectorConfirm), new Action<StorageOutDirectorConfirm>(this.detach_StorageOutDirectorConfirm));
			this._StorageOutProduceAudit = new EntitySet<StorageOutProduceAudit>(new Action<StorageOutProduceAudit>(this.attach_StorageOutProduceAudit), new Action<StorageOutProduceAudit>(this.detach_StorageOutProduceAudit));
			this._StorageOutRealDetails = new EntitySet<StorageOutRealDetails>(new Action<StorageOutRealDetails>(this.attach_StorageOutRealDetails), new Action<StorageOutRealDetails>(this.detach_StorageOutRealDetails));
			this._BusinessUnitInfo = default(EntityRef<BusinessUnitInfo>);
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._BusinessUnitInfo1 = default(EntityRef<BusinessUnitInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StorageOutNoticeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					this.OnStorageOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeID = value;
					this.SendPropertyChanged("StorageOutNoticeID");
					this.OnStorageOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageOutNoticeCode
		{
			get
			{
				return this._StorageOutNoticeCode;
			}
			set
			{
				if ((this._StorageOutNoticeCode != value))
				{
					this.OnStorageOutNoticeCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeCode = value;
					this.SendPropertyChanged("StorageOutNoticeCode");
					this.OnStorageOutNoticeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectStage", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ProjectStage
		{
			get
			{
				return this._ProjectStage;
			}
			set
			{
				if ((this._ProjectStage != value))
				{
					this.OnProjectStageChanging(value);
					this.SendPropertyChanging();
					this._ProjectStage = value;
					this.SendPropertyChanged("ProjectStage");
					this.OnProjectStageChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Proprietor", DbType="Int NOT NULL")]
		public int Proprietor
		{
			get
			{
				return this._Proprietor;
			}
			set
			{
				if ((this._Proprietor != value))
				{
					if (this._BusinessUnitInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProprietorChanging(value);
					this.SendPropertyChanging();
					this._Proprietor = value;
					this.SendPropertyChanged("Proprietor");
					this.OnProprietorChanged();
				}
			}
		}
		
		[Column(Storage="_Constructor", DbType="Int NOT NULL")]
		public int Constructor
		{
			get
			{
				return this._Constructor;
			}
			set
			{
				if ((this._Constructor != value))
				{
					if (this._BusinessUnitInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConstructorChanging(value);
					this.SendPropertyChanging();
					this._Constructor = value;
					this.SendPropertyChanged("Constructor");
					this.OnConstructorChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutAssetAudit", Storage="_StorageOutAssetAudit", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID")]
		public EntitySet<StorageOutAssetAudit> StorageOutAssetAudit
		{
			get
			{
				return this._StorageOutAssetAudit;
			}
			set
			{
				this._StorageOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutDetails", Storage="_StorageOutDetails", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID")]
		public EntitySet<StorageOutDetails> StorageOutDetails
		{
			get
			{
				return this._StorageOutDetails;
			}
			set
			{
				this._StorageOutDetails.Assign(value);
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutDirectorConfirm", Storage="_StorageOutDirectorConfirm", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID")]
		public EntitySet<StorageOutDirectorConfirm> StorageOutDirectorConfirm
		{
			get
			{
				return this._StorageOutDirectorConfirm;
			}
			set
			{
				this._StorageOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutProduceAudit", Storage="_StorageOutProduceAudit", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID")]
		public EntitySet<StorageOutProduceAudit> StorageOutProduceAudit
		{
			get
			{
				return this._StorageOutProduceAudit;
			}
			set
			{
				this._StorageOutProduceAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutRealDetails", Storage="_StorageOutRealDetails", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID")]
		public EntitySet<StorageOutRealDetails> StorageOutRealDetails
		{
			get
			{
				return this._StorageOutRealDetails;
			}
			set
			{
				this._StorageOutRealDetails.Assign(value);
			}
		}
		
		[Association(Name="BusinessUnitInfo_StorageOutNotice", Storage="_BusinessUnitInfo", ThisKey="Constructor", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BusinessUnitInfo BusinessUnitInfo
		{
			get
			{
				return this._BusinessUnitInfo.Entity;
			}
			set
			{
				BusinessUnitInfo previousValue = this._BusinessUnitInfo.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnitInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnitInfo.Entity = null;
						previousValue.StorageOutNotice.Remove(this);
					}
					this._BusinessUnitInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutNotice.Add(this);
						this._Constructor = value.BusinessUnitID;
					}
					else
					{
						this._Constructor = default(int);
					}
					this.SendPropertyChanged("BusinessUnitInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageOutNotice", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutNotice.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutNotice.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_StorageOutNotice", Storage="_ProjectInfo", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.StorageOutNotice.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutNotice.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="BusinessUnitInfo_StorageOutNotice1", Storage="_BusinessUnitInfo1", ThisKey="Proprietor", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BusinessUnitInfo BusinessUnitInfo1
		{
			get
			{
				return this._BusinessUnitInfo1.Entity;
			}
			set
			{
				BusinessUnitInfo previousValue = this._BusinessUnitInfo1.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnitInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnitInfo1.Entity = null;
						previousValue.StorageOutNotice1.Remove(this);
					}
					this._BusinessUnitInfo1.Entity = value;
					if ((value != null))
					{
						value.StorageOutNotice1.Add(this);
						this._Proprietor = value.BusinessUnitID;
					}
					else
					{
						this._Proprietor = default(int);
					}
					this.SendPropertyChanged("BusinessUnitInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = this;
		}
		
		private void detach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = null;
		}
		
		private void attach_StorageOutDetails(StorageOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = this;
		}
		
		private void detach_StorageOutDetails(StorageOutDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = null;
		}
		
		private void attach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = this;
		}
		
		private void detach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = null;
		}
		
		private void attach_StorageOutProduceAudit(StorageOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = this;
		}
		
		private void detach_StorageOutProduceAudit(StorageOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = null;
		}
		
		private void attach_StorageOutRealDetails(StorageOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = this;
		}
		
		private void detach_StorageOutRealDetails(StorageOutRealDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutNotice = null;
		}
	}
	
	[Table(Name="dbo.StorageOutProduceAudit")]
	public partial class StorageOutProduceAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageOutProduceAuditID;
		
		private int _StorageOutNoticeID;
		
		private string _AuditStatus;
		
		private string _AuditOpinion;
		
		private System.DateTime _AuditTime;
		
		private int _ProduceChief;
		
		private int _TaskID;
		
		private EntitySet<StorageOutAssetAudit> _StorageOutAssetAudit;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageOutNotice> _StorageOutNotice;
		
		private EntityRef<StorageOutTask> _StorageOutTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageOutProduceAuditIDChanging(int value);
    partial void OnStorageOutProduceAuditIDChanged();
    partial void OnStorageOutNoticeIDChanging(int value);
    partial void OnStorageOutNoticeIDChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditTimeChanging(System.DateTime value);
    partial void OnAuditTimeChanged();
    partial void OnProduceChiefChanging(int value);
    partial void OnProduceChiefChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public StorageOutProduceAudit()
		{
			this._StorageOutAssetAudit = new EntitySet<StorageOutAssetAudit>(new Action<StorageOutAssetAudit>(this.attach_StorageOutAssetAudit), new Action<StorageOutAssetAudit>(this.detach_StorageOutAssetAudit));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageOutNotice = default(EntityRef<StorageOutNotice>);
			this._StorageOutTask = default(EntityRef<StorageOutTask>);
			OnCreated();
		}
		
		[Column(Storage="_StorageOutProduceAuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageOutProduceAuditID
		{
			get
			{
				return this._StorageOutProduceAuditID;
			}
			set
			{
				if ((this._StorageOutProduceAuditID != value))
				{
					this.OnStorageOutProduceAuditIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutProduceAuditID = value;
					this.SendPropertyChanged("StorageOutProduceAuditID");
					this.OnStorageOutProduceAuditIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					if (this._StorageOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeID = value;
					this.SendPropertyChanged("StorageOutNoticeID");
					this.OnStorageOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTime", DbType="DateTime NOT NULL")]
		public System.DateTime AuditTime
		{
			get
			{
				return this._AuditTime;
			}
			set
			{
				if ((this._AuditTime != value))
				{
					this.OnAuditTimeChanging(value);
					this.SendPropertyChanging();
					this._AuditTime = value;
					this.SendPropertyChanged("AuditTime");
					this.OnAuditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ProduceChief", DbType="Int NOT NULL")]
		public int ProduceChief
		{
			get
			{
				return this._ProduceChief;
			}
			set
			{
				if ((this._ProduceChief != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduceChiefChanging(value);
					this.SendPropertyChanging();
					this._ProduceChief = value;
					this.SendPropertyChanged("ProduceChief");
					this.OnProduceChiefChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._StorageOutTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Association(Name="StorageOutProduceAudit_StorageOutAssetAudit", Storage="_StorageOutAssetAudit", ThisKey="StorageOutProduceAuditID", OtherKey="StorageOutProduceAuditID")]
		public EntitySet<StorageOutAssetAudit> StorageOutAssetAudit
		{
			get
			{
				return this._StorageOutAssetAudit;
			}
			set
			{
				this._StorageOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutProduceAudit", Storage="_EmpInfo", ThisKey="ProduceChief", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutProduceAudit.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutProduceAudit.Add(this);
						this._ProduceChief = value.EmpID;
					}
					else
					{
						this._ProduceChief = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutProduceAudit", Storage="_StorageOutNotice", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID", IsForeignKey=true)]
		public StorageOutNotice StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice.Entity;
			}
			set
			{
				StorageOutNotice previousValue = this._StorageOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutNotice.Entity = null;
						previousValue.StorageOutProduceAudit.Remove(this);
					}
					this._StorageOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageOutProduceAudit.Add(this);
						this._StorageOutNoticeID = value.StorageOutNoticeID;
					}
					else
					{
						this._StorageOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageOutNotice");
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageOutProduceAudit", Storage="_StorageOutTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public StorageOutTask StorageOutTask
		{
			get
			{
				return this._StorageOutTask.Entity;
			}
			set
			{
				StorageOutTask previousValue = this._StorageOutTask.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutTask.Entity = null;
						previousValue.StorageOutProduceAudit.Remove(this);
					}
					this._StorageOutTask.Entity = value;
					if ((value != null))
					{
						value.StorageOutProduceAudit.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("StorageOutTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutProduceAudit = this;
		}
		
		private void detach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutProduceAudit = null;
		}
	}
	
	[Table(Name="dbo.StorageOutRealDetails")]
	public partial class StorageOutRealDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageOutRealDetailsID;
		
		private int _StorageOutNoticeID;
		
		private int _StorageOutDetailsID;
		
		private int _StocksID;
		
		private decimal _RealGentaojian;
		
		private decimal _RealMetre;
		
		private decimal _RealTon;
		
		private decimal _RealAmount;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private string _MaterialStatus;
		
		private EntitySet<SrinWriteOffDetails> _SrinWriteOffDetails;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<StorageOutNotice> _StorageOutNotice;
		
		private EntityRef<StorageOutDetails> _StorageOutDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageOutRealDetailsIDChanging(int value);
    partial void OnStorageOutRealDetailsIDChanged();
    partial void OnStorageOutNoticeIDChanging(int value);
    partial void OnStorageOutNoticeIDChanged();
    partial void OnStorageOutDetailsIDChanging(int value);
    partial void OnStorageOutDetailsIDChanged();
    partial void OnStocksIDChanging(int value);
    partial void OnStocksIDChanged();
    partial void OnRealGentaojianChanging(decimal value);
    partial void OnRealGentaojianChanged();
    partial void OnRealMetreChanging(decimal value);
    partial void OnRealMetreChanged();
    partial void OnRealTonChanging(decimal value);
    partial void OnRealTonChanged();
    partial void OnRealAmountChanging(decimal value);
    partial void OnRealAmountChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnMaterialStatusChanging(string value);
    partial void OnMaterialStatusChanged();
    #endregion
		
		public StorageOutRealDetails()
		{
			this._SrinWriteOffDetails = new EntitySet<SrinWriteOffDetails>(new Action<SrinWriteOffDetails>(this.attach_SrinWriteOffDetails), new Action<SrinWriteOffDetails>(this.detach_SrinWriteOffDetails));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._StorageOutNotice = default(EntityRef<StorageOutNotice>);
			this._StorageOutDetails = default(EntityRef<StorageOutDetails>);
			OnCreated();
		}
		
		[Column(Storage="_StorageOutRealDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageOutRealDetailsID
		{
			get
			{
				return this._StorageOutRealDetailsID;
			}
			set
			{
				if ((this._StorageOutRealDetailsID != value))
				{
					this.OnStorageOutRealDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutRealDetailsID = value;
					this.SendPropertyChanged("StorageOutRealDetailsID");
					this.OnStorageOutRealDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					if (this._StorageOutNotice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutNoticeID = value;
					this.SendPropertyChanged("StorageOutNoticeID");
					this.OnStorageOutNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageOutDetailsID", DbType="Int NOT NULL")]
		public int StorageOutDetailsID
		{
			get
			{
				return this._StorageOutDetailsID;
			}
			set
			{
				if ((this._StorageOutDetailsID != value))
				{
					if (this._StorageOutDetails.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageOutDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._StorageOutDetailsID = value;
					this.SendPropertyChanged("StorageOutDetailsID");
					this.OnStorageOutDetailsIDChanged();
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this.OnStocksIDChanging(value);
					this.SendPropertyChanging();
					this._StocksID = value;
					this.SendPropertyChanged("StocksID");
					this.OnStocksIDChanged();
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this.OnRealGentaojianChanging(value);
					this.SendPropertyChanging();
					this._RealGentaojian = value;
					this.SendPropertyChanged("RealGentaojian");
					this.OnRealGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this.OnRealMetreChanging(value);
					this.SendPropertyChanging();
					this._RealMetre = value;
					this.SendPropertyChanged("RealMetre");
					this.OnRealMetreChanged();
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this.OnRealTonChanging(value);
					this.SendPropertyChanging();
					this._RealTon = value;
					this.SendPropertyChanged("RealTon");
					this.OnRealTonChanged();
				}
			}
		}
		
		[Column(Storage="_RealAmount", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealAmount
		{
			get
			{
				return this._RealAmount;
			}
			set
			{
				if ((this._RealAmount != value))
				{
					this.OnRealAmountChanging(value);
					this.SendPropertyChanging();
					this._RealAmount = value;
					this.SendPropertyChanged("RealAmount");
					this.OnRealAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MaterialStatus
		{
			get
			{
				return this._MaterialStatus;
			}
			set
			{
				if ((this._MaterialStatus != value))
				{
					this.OnMaterialStatusChanging(value);
					this.SendPropertyChanging();
					this._MaterialStatus = value;
					this.SendPropertyChanged("MaterialStatus");
					this.OnMaterialStatusChanged();
				}
			}
		}
		
		[Association(Name="StorageOutRealDetails_SrinWriteOffDetails", Storage="_SrinWriteOffDetails", ThisKey="StorageOutRealDetailsID", OtherKey="StorageOutRealDetailsID")]
		public EntitySet<SrinWriteOffDetails> SrinWriteOffDetails
		{
			get
			{
				return this._SrinWriteOffDetails;
			}
			set
			{
				this._SrinWriteOffDetails.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutRealDetails", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutRealDetails.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutRealDetails.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="StorageOutNotice_StorageOutRealDetails", Storage="_StorageOutNotice", ThisKey="StorageOutNoticeID", OtherKey="StorageOutNoticeID", IsForeignKey=true)]
		public StorageOutNotice StorageOutNotice
		{
			get
			{
				return this._StorageOutNotice.Entity;
			}
			set
			{
				StorageOutNotice previousValue = this._StorageOutNotice.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutNotice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutNotice.Entity = null;
						previousValue.StorageOutRealDetails.Remove(this);
					}
					this._StorageOutNotice.Entity = value;
					if ((value != null))
					{
						value.StorageOutRealDetails.Add(this);
						this._StorageOutNoticeID = value.StorageOutNoticeID;
					}
					else
					{
						this._StorageOutNoticeID = default(int);
					}
					this.SendPropertyChanged("StorageOutNotice");
				}
			}
		}
		
		[Association(Name="StorageOutDetails_StorageOutRealDetails", Storage="_StorageOutDetails", ThisKey="StorageOutDetailsID", OtherKey="StorageOutDetailsID", IsForeignKey=true)]
		public StorageOutDetails StorageOutDetails
		{
			get
			{
				return this._StorageOutDetails.Entity;
			}
			set
			{
				StorageOutDetails previousValue = this._StorageOutDetails.Entity;
				if (((previousValue != value) 
							|| (this._StorageOutDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageOutDetails.Entity = null;
						previousValue.StorageOutRealDetails.Remove(this);
					}
					this._StorageOutDetails.Entity = value;
					if ((value != null))
					{
						value.StorageOutRealDetails.Add(this);
						this._StorageOutDetailsID = value.StorageOutDetailsID;
					}
					else
					{
						this._StorageOutDetailsID = default(int);
					}
					this.SendPropertyChanged("StorageOutDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutRealDetails = this;
		}
		
		private void detach_SrinWriteOffDetails(SrinWriteOffDetails entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutRealDetails = null;
		}
	}
	
	[Table(Name="dbo.StorageOutTask")]
	public partial class StorageOutTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _Process;
		
		private int _TaskCreaterID;
		
		private int _TaskTargetID;
		
		private int _NoticeID;
		
		private string _TaskTitle;
		
		private string _Remark;
		
		private string _TaskState;
		
		private string _TaskDispose;
		
		private string _TaskType;
		
		private System.DateTime _CreateTime;
		
		private int _PreviousTaskID;
		
		private EntitySet<StorageCommitOutAssetAudit> _StorageCommitOutAssetAudit;
		
		private EntitySet<StorageCommitOutDirectorConfirm> _StorageCommitOutDirectorConfirm;
		
		private EntitySet<StorageCommitOutProduceAudit> _StorageCommitOutProduceAudit;
		
		private EntitySet<StorageOutAssetAudit> _StorageOutAssetAudit;
		
		private EntitySet<StorageOutDirectorConfirm> _StorageOutDirectorConfirm;
		
		private EntitySet<StorageOutProduceAudit> _StorageOutProduceAudit;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnProcessChanging(string value);
    partial void OnProcessChanged();
    partial void OnTaskCreaterIDChanging(int value);
    partial void OnTaskCreaterIDChanged();
    partial void OnTaskTargetIDChanging(int value);
    partial void OnTaskTargetIDChanged();
    partial void OnNoticeIDChanging(int value);
    partial void OnNoticeIDChanged();
    partial void OnTaskTitleChanging(string value);
    partial void OnTaskTitleChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTaskStateChanging(string value);
    partial void OnTaskStateChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnTaskTypeChanging(string value);
    partial void OnTaskTypeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnPreviousTaskIDChanging(int value);
    partial void OnPreviousTaskIDChanged();
    #endregion
		
		public StorageOutTask()
		{
			this._StorageCommitOutAssetAudit = new EntitySet<StorageCommitOutAssetAudit>(new Action<StorageCommitOutAssetAudit>(this.attach_StorageCommitOutAssetAudit), new Action<StorageCommitOutAssetAudit>(this.detach_StorageCommitOutAssetAudit));
			this._StorageCommitOutDirectorConfirm = new EntitySet<StorageCommitOutDirectorConfirm>(new Action<StorageCommitOutDirectorConfirm>(this.attach_StorageCommitOutDirectorConfirm), new Action<StorageCommitOutDirectorConfirm>(this.detach_StorageCommitOutDirectorConfirm));
			this._StorageCommitOutProduceAudit = new EntitySet<StorageCommitOutProduceAudit>(new Action<StorageCommitOutProduceAudit>(this.attach_StorageCommitOutProduceAudit), new Action<StorageCommitOutProduceAudit>(this.detach_StorageCommitOutProduceAudit));
			this._StorageOutAssetAudit = new EntitySet<StorageOutAssetAudit>(new Action<StorageOutAssetAudit>(this.attach_StorageOutAssetAudit), new Action<StorageOutAssetAudit>(this.detach_StorageOutAssetAudit));
			this._StorageOutDirectorConfirm = new EntitySet<StorageOutDirectorConfirm>(new Action<StorageOutDirectorConfirm>(this.attach_StorageOutDirectorConfirm), new Action<StorageOutDirectorConfirm>(this.detach_StorageOutDirectorConfirm));
			this._StorageOutProduceAudit = new EntitySet<StorageOutProduceAudit>(new Action<StorageOutProduceAudit>(this.attach_StorageOutProduceAudit), new Action<StorageOutProduceAudit>(this.detach_StorageOutProduceAudit));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Process", DbType="NVarChar(50)")]
		public string Process
		{
			get
			{
				return this._Process;
			}
			set
			{
				if ((this._Process != value))
				{
					this.OnProcessChanging(value);
					this.SendPropertyChanging();
					this._Process = value;
					this.SendPropertyChanged("Process");
					this.OnProcessChanged();
				}
			}
		}
		
		[Column(Storage="_TaskCreaterID", DbType="Int NOT NULL")]
		public int TaskCreaterID
		{
			get
			{
				return this._TaskCreaterID;
			}
			set
			{
				if ((this._TaskCreaterID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskCreaterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskCreaterID = value;
					this.SendPropertyChanged("TaskCreaterID");
					this.OnTaskCreaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTargetID", DbType="Int NOT NULL")]
		public int TaskTargetID
		{
			get
			{
				return this._TaskTargetID;
			}
			set
			{
				if ((this._TaskTargetID != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTargetID = value;
					this.SendPropertyChanged("TaskTargetID");
					this.OnTaskTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_NoticeID", DbType="Int NOT NULL")]
		public int NoticeID
		{
			get
			{
				return this._NoticeID;
			}
			set
			{
				if ((this._NoticeID != value))
				{
					this.OnNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeID = value;
					this.SendPropertyChanged("NoticeID");
					this.OnNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskTitle
		{
			get
			{
				return this._TaskTitle;
			}
			set
			{
				if ((this._TaskTitle != value))
				{
					this.OnTaskTitleChanging(value);
					this.SendPropertyChanging();
					this._TaskTitle = value;
					this.SendPropertyChanged("TaskTitle");
					this.OnTaskTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TaskState", DbType="NVarChar(50)")]
		public string TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="NVarChar(50)")]
		public string TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_PreviousTaskID", DbType="Int NOT NULL")]
		public int PreviousTaskID
		{
			get
			{
				return this._PreviousTaskID;
			}
			set
			{
				if ((this._PreviousTaskID != value))
				{
					this.OnPreviousTaskIDChanging(value);
					this.SendPropertyChanging();
					this._PreviousTaskID = value;
					this.SendPropertyChanged("PreviousTaskID");
					this.OnPreviousTaskIDChanged();
				}
			}
		}
		
		[Association(Name="StorageOutTask_StorageCommitOutAssetAudit", Storage="_StorageCommitOutAssetAudit", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<StorageCommitOutAssetAudit> StorageCommitOutAssetAudit
		{
			get
			{
				return this._StorageCommitOutAssetAudit;
			}
			set
			{
				this._StorageCommitOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageOutTask_StorageCommitOutDirectorConfirm", Storage="_StorageCommitOutDirectorConfirm", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<StorageCommitOutDirectorConfirm> StorageCommitOutDirectorConfirm
		{
			get
			{
				return this._StorageCommitOutDirectorConfirm;
			}
			set
			{
				this._StorageCommitOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="StorageOutTask_StorageCommitOutProduceAudit", Storage="_StorageCommitOutProduceAudit", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<StorageCommitOutProduceAudit> StorageCommitOutProduceAudit
		{
			get
			{
				return this._StorageCommitOutProduceAudit;
			}
			set
			{
				this._StorageCommitOutProduceAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageOutTask_StorageOutAssetAudit", Storage="_StorageOutAssetAudit", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<StorageOutAssetAudit> StorageOutAssetAudit
		{
			get
			{
				return this._StorageOutAssetAudit;
			}
			set
			{
				this._StorageOutAssetAudit.Assign(value);
			}
		}
		
		[Association(Name="StorageOutTask_StorageOutDirectorConfirm", Storage="_StorageOutDirectorConfirm", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<StorageOutDirectorConfirm> StorageOutDirectorConfirm
		{
			get
			{
				return this._StorageOutDirectorConfirm;
			}
			set
			{
				this._StorageOutDirectorConfirm.Assign(value);
			}
		}
		
		[Association(Name="StorageOutTask_StorageOutProduceAudit", Storage="_StorageOutProduceAudit", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<StorageOutProduceAudit> StorageOutProduceAudit
		{
			get
			{
				return this._StorageOutProduceAudit;
			}
			set
			{
				this._StorageOutProduceAudit.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask", Storage="_EmpInfo", ThisKey="TaskCreaterID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutTask.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutTask.Add(this);
						this._TaskCreaterID = value.EmpID;
					}
					else
					{
						this._TaskCreaterID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask1", Storage="_EmpInfo1", ThisKey="TaskTargetID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.StorageOutTask1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.StorageOutTask1.Add(this);
						this._TaskTargetID = value.EmpID;
					}
					else
					{
						this._TaskTargetID = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = this;
		}
		
		private void detach_StorageCommitOutAssetAudit(StorageCommitOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = null;
		}
		
		private void attach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = this;
		}
		
		private void detach_StorageCommitOutDirectorConfirm(StorageCommitOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = null;
		}
		
		private void attach_StorageCommitOutProduceAudit(StorageCommitOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = this;
		}
		
		private void detach_StorageCommitOutProduceAudit(StorageCommitOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = null;
		}
		
		private void attach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = this;
		}
		
		private void detach_StorageOutAssetAudit(StorageOutAssetAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = null;
		}
		
		private void attach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = this;
		}
		
		private void detach_StorageOutDirectorConfirm(StorageOutDirectorConfirm entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = null;
		}
		
		private void attach_StorageOutProduceAudit(StorageOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = this;
		}
		
		private void detach_StorageOutProduceAudit(StorageOutProduceAudit entity)
		{
			this.SendPropertyChanging();
			entity.StorageOutTask = null;
		}
	}
	
	[Table(Name="dbo.StorageProduce")]
	public partial class StorageProduce : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorageInProduceID;
		
		private int _StorageInID;
		
		private int _MaterialID;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private int _ExpectedProject;
		
		private System.DateTime _ExpectedTime;
		
		private string _BatchIndex;
		
		private System.DateTime _CreateTime;
		
		private int _Creator;
		
		private string _Remark;
		
		private EntitySet<StorageInMaterials> _StorageInMaterials;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<StorageInMain> _StorageInMain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorageInProduceIDChanging(int value);
    partial void OnStorageInProduceIDChanged();
    partial void OnStorageInIDChanging(int value);
    partial void OnStorageInIDChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnExpectedProjectChanging(int value);
    partial void OnExpectedProjectChanged();
    partial void OnExpectedTimeChanging(System.DateTime value);
    partial void OnExpectedTimeChanged();
    partial void OnBatchIndexChanging(string value);
    partial void OnBatchIndexChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StorageProduce()
		{
			this._StorageInMaterials = new EntitySet<StorageInMaterials>(new Action<StorageInMaterials>(this.attach_StorageInMaterials), new Action<StorageInMaterials>(this.detach_StorageInMaterials));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._StorageInMain = default(EntityRef<StorageInMain>);
			OnCreated();
		}
		
		[Column(Storage="_StorageInProduceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorageInProduceID
		{
			get
			{
				return this._StorageInProduceID;
			}
			set
			{
				if ((this._StorageInProduceID != value))
				{
					this.OnStorageInProduceIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInProduceID = value;
					this.SendPropertyChanged("StorageInProduceID");
					this.OnStorageInProduceIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInID", DbType="Int NOT NULL")]
		public int StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					if (this._StorageInMain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedProject", DbType="Int NOT NULL")]
		public int ExpectedProject
		{
			get
			{
				return this._ExpectedProject;
			}
			set
			{
				if ((this._ExpectedProject != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpectedProjectChanging(value);
					this.SendPropertyChanging();
					this._ExpectedProject = value;
					this.SendPropertyChanged("ExpectedProject");
					this.OnExpectedProjectChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedTime", DbType="DateTime NOT NULL")]
		public System.DateTime ExpectedTime
		{
			get
			{
				return this._ExpectedTime;
			}
			set
			{
				if ((this._ExpectedTime != value))
				{
					this.OnExpectedTimeChanging(value);
					this.SendPropertyChanging();
					this._ExpectedTime = value;
					this.SendPropertyChanged("ExpectedTime");
					this.OnExpectedTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this.OnBatchIndexChanging(value);
					this.SendPropertyChanging();
					this._BatchIndex = value;
					this.SendPropertyChanged("BatchIndex");
					this.OnBatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="StorageProduce_StorageInMaterials", Storage="_StorageInMaterials", ThisKey="StorageInProduceID", OtherKey="ProduceID")]
		public EntitySet<StorageInMaterials> StorageInMaterials
		{
			get
			{
				return this._StorageInMaterials;
			}
			set
			{
				this._StorageInMaterials.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageProduce", Storage="_EmpInfo", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageProduce.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageProduce.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="ProjectInfo_StorageProduce", Storage="_ProjectInfo", ThisKey="ExpectedProject", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.StorageProduce.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.StorageProduce.Add(this);
						this._ExpectedProject = value.ProjectID;
					}
					else
					{
						this._ExpectedProject = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="MaterialInfo_StorageProduce", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.StorageProduce.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.StorageProduce.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="StorageInMain_StorageProduce", Storage="_StorageInMain", ThisKey="StorageInID", OtherKey="StorageInID", IsForeignKey=true)]
		public StorageInMain StorageInMain
		{
			get
			{
				return this._StorageInMain.Entity;
			}
			set
			{
				StorageInMain previousValue = this._StorageInMain.Entity;
				if (((previousValue != value) 
							|| (this._StorageInMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInMain.Entity = null;
						previousValue.StorageProduce.Remove(this);
					}
					this._StorageInMain.Entity = value;
					if ((value != null))
					{
						value.StorageProduce.Add(this);
						this._StorageInID = value.StorageInID;
					}
					else
					{
						this._StorageInID = default(int);
					}
					this.SendPropertyChanged("StorageInMain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.StorageProduce = this;
		}
		
		private void detach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.StorageProduce = null;
		}
	}
	
	[Table(Name="dbo.SupplierInfo")]
	public partial class SupplierInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierID;
		
		private string _SupplierName;
		
		private string _SupplierCode;
		
		private int _SupplierTypeID;
		
		private string _SupplierAddress1;
		
		private string _SupplierAddress2;
		
		private string _SupplierPhone;
		
		private string _InCharge;
		
		private string _Remark;
		
		private EntitySet<CommitInAudited> _CommitInAudited;
		
		private EntitySet<CommitInDetailed> _CommitInDetailed;
		
		private EntitySet<CommitInMaterials> _CommitInMaterials;
		
		private EntitySet<CommitInQualified> _CommitInQualified;
		
		private EntitySet<StockOnline> _StockOnline;
		
		private EntitySet<StorageInMaterials> _StorageInMaterials;
		
		private EntitySet<TableOfStocks> _TableOfStocks;
		
		private EntityRef<SupplierType> _SupplierType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnSupplierCodeChanging(string value);
    partial void OnSupplierCodeChanged();
    partial void OnSupplierTypeIDChanging(int value);
    partial void OnSupplierTypeIDChanged();
    partial void OnSupplierAddress1Changing(string value);
    partial void OnSupplierAddress1Changed();
    partial void OnSupplierAddress2Changing(string value);
    partial void OnSupplierAddress2Changed();
    partial void OnSupplierPhoneChanging(string value);
    partial void OnSupplierPhoneChanged();
    partial void OnInChargeChanging(string value);
    partial void OnInChargeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public SupplierInfo()
		{
			this._CommitInAudited = new EntitySet<CommitInAudited>(new Action<CommitInAudited>(this.attach_CommitInAudited), new Action<CommitInAudited>(this.detach_CommitInAudited));
			this._CommitInDetailed = new EntitySet<CommitInDetailed>(new Action<CommitInDetailed>(this.attach_CommitInDetailed), new Action<CommitInDetailed>(this.detach_CommitInDetailed));
			this._CommitInMaterials = new EntitySet<CommitInMaterials>(new Action<CommitInMaterials>(this.attach_CommitInMaterials), new Action<CommitInMaterials>(this.detach_CommitInMaterials));
			this._CommitInQualified = new EntitySet<CommitInQualified>(new Action<CommitInQualified>(this.attach_CommitInQualified), new Action<CommitInQualified>(this.detach_CommitInQualified));
			this._StockOnline = new EntitySet<StockOnline>(new Action<StockOnline>(this.attach_StockOnline), new Action<StockOnline>(this.detach_StockOnline));
			this._StorageInMaterials = new EntitySet<StorageInMaterials>(new Action<StorageInMaterials>(this.attach_StorageInMaterials), new Action<StorageInMaterials>(this.detach_StorageInMaterials));
			this._TableOfStocks = new EntitySet<TableOfStocks>(new Action<TableOfStocks>(this.attach_TableOfStocks), new Action<TableOfStocks>(this.detach_TableOfStocks));
			this._SupplierType = default(EntityRef<SupplierType>);
			OnCreated();
		}
		
		[Column(Storage="_SupplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this.OnSupplierNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierName = value;
					this.SendPropertyChanged("SupplierName");
					this.OnSupplierNameChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierCode
		{
			get
			{
				return this._SupplierCode;
			}
			set
			{
				if ((this._SupplierCode != value))
				{
					this.OnSupplierCodeChanging(value);
					this.SendPropertyChanging();
					this._SupplierCode = value;
					this.SendPropertyChanged("SupplierCode");
					this.OnSupplierCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierTypeID", DbType="Int NOT NULL")]
		public int SupplierTypeID
		{
			get
			{
				return this._SupplierTypeID;
			}
			set
			{
				if ((this._SupplierTypeID != value))
				{
					if (this._SupplierType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeID = value;
					this.SendPropertyChanged("SupplierTypeID");
					this.OnSupplierTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierAddress1", DbType="NVarChar(200)")]
		public string SupplierAddress1
		{
			get
			{
				return this._SupplierAddress1;
			}
			set
			{
				if ((this._SupplierAddress1 != value))
				{
					this.OnSupplierAddress1Changing(value);
					this.SendPropertyChanging();
					this._SupplierAddress1 = value;
					this.SendPropertyChanged("SupplierAddress1");
					this.OnSupplierAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_SupplierAddress2", DbType="NVarChar(200)")]
		public string SupplierAddress2
		{
			get
			{
				return this._SupplierAddress2;
			}
			set
			{
				if ((this._SupplierAddress2 != value))
				{
					this.OnSupplierAddress2Changing(value);
					this.SendPropertyChanging();
					this._SupplierAddress2 = value;
					this.SendPropertyChanged("SupplierAddress2");
					this.OnSupplierAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_SupplierPhone", DbType="NVarChar(50)")]
		public string SupplierPhone
		{
			get
			{
				return this._SupplierPhone;
			}
			set
			{
				if ((this._SupplierPhone != value))
				{
					this.OnSupplierPhoneChanging(value);
					this.SendPropertyChanging();
					this._SupplierPhone = value;
					this.SendPropertyChanged("SupplierPhone");
					this.OnSupplierPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_InCharge", DbType="NVarChar(50)")]
		public string InCharge
		{
			get
			{
				return this._InCharge;
			}
			set
			{
				if ((this._InCharge != value))
				{
					this.OnInChargeChanging(value);
					this.SendPropertyChanging();
					this._InCharge = value;
					this.SendPropertyChanged("InCharge");
					this.OnInChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="SupplierInfo_CommitInAudited", Storage="_CommitInAudited", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<CommitInAudited> CommitInAudited
		{
			get
			{
				return this._CommitInAudited;
			}
			set
			{
				this._CommitInAudited.Assign(value);
			}
		}
		
		[Association(Name="SupplierInfo_CommitInDetailed", Storage="_CommitInDetailed", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<CommitInDetailed> CommitInDetailed
		{
			get
			{
				return this._CommitInDetailed;
			}
			set
			{
				this._CommitInDetailed.Assign(value);
			}
		}
		
		[Association(Name="SupplierInfo_CommitInMaterials", Storage="_CommitInMaterials", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<CommitInMaterials> CommitInMaterials
		{
			get
			{
				return this._CommitInMaterials;
			}
			set
			{
				this._CommitInMaterials.Assign(value);
			}
		}
		
		[Association(Name="SupplierInfo_CommitInQualified", Storage="_CommitInQualified", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<CommitInQualified> CommitInQualified
		{
			get
			{
				return this._CommitInQualified;
			}
			set
			{
				this._CommitInQualified.Assign(value);
			}
		}
		
		[Association(Name="SupplierInfo_StockOnline", Storage="_StockOnline", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<StockOnline> StockOnline
		{
			get
			{
				return this._StockOnline;
			}
			set
			{
				this._StockOnline.Assign(value);
			}
		}
		
		[Association(Name="SupplierInfo_StorageInMaterials", Storage="_StorageInMaterials", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<StorageInMaterials> StorageInMaterials
		{
			get
			{
				return this._StorageInMaterials;
			}
			set
			{
				this._StorageInMaterials.Assign(value);
			}
		}
		
		[Association(Name="SupplierInfo_TableOfStocks", Storage="_TableOfStocks", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<TableOfStocks> TableOfStocks
		{
			get
			{
				return this._TableOfStocks;
			}
			set
			{
				this._TableOfStocks.Assign(value);
			}
		}
		
		[Association(Name="SupplierType_SupplierInfo", Storage="_SupplierType", ThisKey="SupplierTypeID", OtherKey="SupplierTypeID", IsForeignKey=true)]
		public SupplierType SupplierType
		{
			get
			{
				return this._SupplierType.Entity;
			}
			set
			{
				SupplierType previousValue = this._SupplierType.Entity;
				if (((previousValue != value) 
							|| (this._SupplierType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierType.Entity = null;
						previousValue.SupplierInfo.Remove(this);
					}
					this._SupplierType.Entity = value;
					if ((value != null))
					{
						value.SupplierInfo.Add(this);
						this._SupplierTypeID = value.SupplierTypeID;
					}
					else
					{
						this._SupplierTypeID = default(int);
					}
					this.SendPropertyChanged("SupplierType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_CommitInAudited(CommitInAudited entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
		
		private void attach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_CommitInDetailed(CommitInDetailed entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
		
		private void attach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_CommitInMaterials(CommitInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
		
		private void attach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_CommitInQualified(CommitInQualified entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
		
		private void attach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_StockOnline(StockOnline entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
		
		private void attach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_StorageInMaterials(StorageInMaterials entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
		
		private void attach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = this;
		}
		
		private void detach_TableOfStocks(TableOfStocks entity)
		{
			this.SendPropertyChanging();
			entity.SupplierInfo = null;
		}
	}
	
	[Table(Name="dbo.SupplierType")]
	public partial class SupplierType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierTypeID;
		
		private string _SupplierTypeName;
		
		private string _SupplierTypeCode;
		
		private string _Remark;
		
		private EntitySet<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierTypeIDChanging(int value);
    partial void OnSupplierTypeIDChanged();
    partial void OnSupplierTypeNameChanging(string value);
    partial void OnSupplierTypeNameChanged();
    partial void OnSupplierTypeCodeChanging(string value);
    partial void OnSupplierTypeCodeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public SupplierType()
		{
			this._SupplierInfo = new EntitySet<SupplierInfo>(new Action<SupplierInfo>(this.attach_SupplierInfo), new Action<SupplierInfo>(this.detach_SupplierInfo));
			OnCreated();
		}
		
		[Column(Storage="_SupplierTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierTypeID
		{
			get
			{
				return this._SupplierTypeID;
			}
			set
			{
				if ((this._SupplierTypeID != value))
				{
					this.OnSupplierTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeID = value;
					this.SendPropertyChanged("SupplierTypeID");
					this.OnSupplierTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierTypeName
		{
			get
			{
				return this._SupplierTypeName;
			}
			set
			{
				if ((this._SupplierTypeName != value))
				{
					this.OnSupplierTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeName = value;
					this.SendPropertyChanged("SupplierTypeName");
					this.OnSupplierTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierTypeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierTypeCode
		{
			get
			{
				return this._SupplierTypeCode;
			}
			set
			{
				if ((this._SupplierTypeCode != value))
				{
					this.OnSupplierTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._SupplierTypeCode = value;
					this.SendPropertyChanged("SupplierTypeCode");
					this.OnSupplierTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="SupplierType_SupplierInfo", Storage="_SupplierInfo", ThisKey="SupplierTypeID", OtherKey="SupplierTypeID")]
		public EntitySet<SupplierInfo> SupplierInfo
		{
			get
			{
				return this._SupplierInfo;
			}
			set
			{
				this._SupplierInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupplierInfo(SupplierInfo entity)
		{
			this.SendPropertyChanging();
			entity.SupplierType = this;
		}
		
		private void detach_SupplierInfo(SupplierInfo entity)
		{
			this.SendPropertyChanging();
			entity.SupplierType = null;
		}
	}
	
	[Table(Name="dbo.TableOfStocks")]
	public partial class TableOfStocks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StocksID;
		
		private System.Nullable<int> _StorageInID;
		
		private string _StorageInType;
		
		private int _MaterialID;
		
		private string _MaterialCode;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private int _ExpectedProject;
		
		private string _Remark;
		
		private string _BatchIndex;
		
		private int _ManufacturerID;
		
		private System.Nullable<int> _SupplierID;
		
		private int _StorageID;
		
		private int _PileID;
		
		private System.Nullable<int> _MaterialsManager;
		
		private System.Nullable<int> _AssetsManager;
		
		private System.DateTime _StorageTime;
		
		private int _Creator;
		
		private System.DateTime _CreateTime;
		
		private string _ReceivingTypeName;
		
		private string _StorageInCode;
		
		private string _BillCode;
		
		private EntitySet<FlowDetailsOffline> _FlowDetailsOffline;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
		private EntityRef<ProjectInfo> _ProjectInfo;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<EmpInfo> _EmpInfo2;
		
		private EntityRef<MaterialInfo> _MaterialInfo;
		
		private EntityRef<PileInfo> _PileInfo;
		
		private EntityRef<StorageInfo> _StorageInfo;
		
		private EntityRef<SupplierInfo> _SupplierInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStocksIDChanging(int value);
    partial void OnStocksIDChanged();
    partial void OnStorageInIDChanging(System.Nullable<int> value);
    partial void OnStorageInIDChanged();
    partial void OnStorageInTypeChanging(string value);
    partial void OnStorageInTypeChanged();
    partial void OnMaterialIDChanging(int value);
    partial void OnMaterialIDChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnQuantityGentaojianChanging(System.Nullable<decimal> value);
    partial void OnQuantityGentaojianChanged();
    partial void OnQuantityMetreChanging(System.Nullable<decimal> value);
    partial void OnQuantityMetreChanged();
    partial void OnQuantityTonChanging(System.Nullable<decimal> value);
    partial void OnQuantityTonChanged();
    partial void OnCurUnitChanging(string value);
    partial void OnCurUnitChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnExpectedProjectChanging(int value);
    partial void OnExpectedProjectChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnBatchIndexChanging(string value);
    partial void OnBatchIndexChanged();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    partial void OnStorageIDChanging(int value);
    partial void OnStorageIDChanged();
    partial void OnPileIDChanging(int value);
    partial void OnPileIDChanged();
    partial void OnMaterialsManagerChanging(System.Nullable<int> value);
    partial void OnMaterialsManagerChanged();
    partial void OnAssetsManagerChanging(System.Nullable<int> value);
    partial void OnAssetsManagerChanged();
    partial void OnStorageTimeChanging(System.DateTime value);
    partial void OnStorageTimeChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnReceivingTypeNameChanging(string value);
    partial void OnReceivingTypeNameChanged();
    partial void OnStorageInCodeChanging(string value);
    partial void OnStorageInCodeChanged();
    partial void OnBillCodeChanging(string value);
    partial void OnBillCodeChanged();
    #endregion
		
		public TableOfStocks()
		{
			this._FlowDetailsOffline = new EntitySet<FlowDetailsOffline>(new Action<FlowDetailsOffline>(this.attach_FlowDetailsOffline), new Action<FlowDetailsOffline>(this.detach_FlowDetailsOffline));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			this._ProjectInfo = default(EntityRef<ProjectInfo>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._EmpInfo2 = default(EntityRef<EmpInfo>);
			this._MaterialInfo = default(EntityRef<MaterialInfo>);
			this._PileInfo = default(EntityRef<PileInfo>);
			this._StorageInfo = default(EntityRef<StorageInfo>);
			this._SupplierInfo = default(EntityRef<SupplierInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StocksID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this.OnStocksIDChanging(value);
					this.SendPropertyChanging();
					this._StocksID = value;
					this.SendPropertyChanged("StocksID");
					this.OnStocksIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInID", DbType="Int")]
		public System.Nullable<int> StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInType", DbType="NVarChar(50)")]
		public string StorageInType
		{
			get
			{
				return this._StorageInType;
			}
			set
			{
				if ((this._StorageInType != value))
				{
					this.OnStorageInTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageInType = value;
					this.SendPropertyChanged("StorageInType");
					this.OnStorageInTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					if (this._MaterialInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this.OnQuantityGentaojianChanging(value);
					this.SendPropertyChanging();
					this._QuantityGentaojian = value;
					this.SendPropertyChanged("QuantityGentaojian");
					this.OnQuantityGentaojianChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this.OnQuantityMetreChanging(value);
					this.SendPropertyChanging();
					this._QuantityMetre = value;
					this.SendPropertyChanged("QuantityMetre");
					this.OnQuantityMetreChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this.OnQuantityTonChanging(value);
					this.SendPropertyChanging();
					this._QuantityTon = value;
					this.SendPropertyChanged("QuantityTon");
					this.OnQuantityTonChanged();
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this.OnCurUnitChanging(value);
					this.SendPropertyChanging();
					this._CurUnit = value;
					this.SendPropertyChanged("CurUnit");
					this.OnCurUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ExpectedProject", DbType="Int NOT NULL")]
		public int ExpectedProject
		{
			get
			{
				return this._ExpectedProject;
			}
			set
			{
				if ((this._ExpectedProject != value))
				{
					if (this._ProjectInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpectedProjectChanging(value);
					this.SendPropertyChanging();
					this._ExpectedProject = value;
					this.SendPropertyChanged("ExpectedProject");
					this.OnExpectedProjectChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this.OnBatchIndexChanging(value);
					this.SendPropertyChanging();
					this._BatchIndex = value;
					this.SendPropertyChanged("BatchIndex");
					this.OnBatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._SupplierInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					if (this._StorageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStorageIDChanging(value);
					this.SendPropertyChanging();
					this._StorageID = value;
					this.SendPropertyChanged("StorageID");
					this.OnStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					if (this._PileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPileIDChanging(value);
					this.SendPropertyChanging();
					this._PileID = value;
					this.SendPropertyChanged("PileID");
					this.OnPileIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialsManager", DbType="Int")]
		public System.Nullable<int> MaterialsManager
		{
			get
			{
				return this._MaterialsManager;
			}
			set
			{
				if ((this._MaterialsManager != value))
				{
					if (this._EmpInfo2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialsManagerChanging(value);
					this.SendPropertyChanging();
					this._MaterialsManager = value;
					this.SendPropertyChanged("MaterialsManager");
					this.OnMaterialsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_AssetsManager", DbType="Int")]
		public System.Nullable<int> AssetsManager
		{
			get
			{
				return this._AssetsManager;
			}
			set
			{
				if ((this._AssetsManager != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetsManagerChanging(value);
					this.SendPropertyChanging();
					this._AssetsManager = value;
					this.SendPropertyChanged("AssetsManager");
					this.OnAssetsManagerChanged();
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this.OnStorageTimeChanging(value);
					this.SendPropertyChanging();
					this._StorageTime = value;
					this.SendPropertyChanged("StorageTime");
					this.OnStorageTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeName", DbType="NVarChar(50)")]
		public string ReceivingTypeName
		{
			get
			{
				return this._ReceivingTypeName;
			}
			set
			{
				if ((this._ReceivingTypeName != value))
				{
					this.OnReceivingTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTypeName = value;
					this.SendPropertyChanged("ReceivingTypeName");
					this.OnReceivingTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50)")]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this.OnStorageInCodeChanging(value);
					this.SendPropertyChanging();
					this._StorageInCode = value;
					this.SendPropertyChanged("StorageInCode");
					this.OnStorageInCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50)")]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this.OnBillCodeChanging(value);
					this.SendPropertyChanging();
					this._BillCode = value;
					this.SendPropertyChanged("BillCode");
					this.OnBillCodeChanged();
				}
			}
		}
		
		[Association(Name="TableOfStocks_FlowDetailsOffline", Storage="_FlowDetailsOffline", ThisKey="StocksID", OtherKey="TableOfStocksID")]
		public EntitySet<FlowDetailsOffline> FlowDetailsOffline
		{
			get
			{
				return this._FlowDetailsOffline;
			}
			set
			{
				this._FlowDetailsOffline.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TableOfStocks", Storage="_EmpInfo", ThisKey="AssetsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._AssetsManager = value.EmpID;
					}
					else
					{
						this._AssetsManager = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_TableOfStocks1", Storage="_EmpInfo1", ThisKey="Creator", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.TableOfStocks1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks1.Add(this);
						this._Creator = value.EmpID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		[Association(Name="ProjectInfo_TableOfStocks", Storage="_ProjectInfo", ThisKey="ExpectedProject", OtherKey="ProjectID", IsForeignKey=true)]
		public ProjectInfo ProjectInfo
		{
			get
			{
				return this._ProjectInfo.Entity;
			}
			set
			{
				ProjectInfo previousValue = this._ProjectInfo.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._ProjectInfo.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._ExpectedProject = value.ProjectID;
					}
					else
					{
						this._ExpectedProject = default(int);
					}
					this.SendPropertyChanged("ProjectInfo");
				}
			}
		}
		
		[Association(Name="Manufacturer_TableOfStocks", Storage="_Manufacturer", ThisKey="ManufacturerID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._ManufacturerID = value.ManufacturerID;
					}
					else
					{
						this._ManufacturerID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[Association(Name="EmpInfo_TableOfStocks2", Storage="_EmpInfo2", ThisKey="MaterialsManager", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo2
		{
			get
			{
				return this._EmpInfo2.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo2.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo2.Entity = null;
						previousValue.TableOfStocks2.Remove(this);
					}
					this._EmpInfo2.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks2.Add(this);
						this._MaterialsManager = value.EmpID;
					}
					else
					{
						this._MaterialsManager = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo2");
				}
			}
		}
		
		[Association(Name="MaterialInfo_TableOfStocks", Storage="_MaterialInfo", ThisKey="MaterialID", OtherKey="MaterialID", IsForeignKey=true)]
		public MaterialInfo MaterialInfo
		{
			get
			{
				return this._MaterialInfo.Entity;
			}
			set
			{
				MaterialInfo previousValue = this._MaterialInfo.Entity;
				if (((previousValue != value) 
							|| (this._MaterialInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialInfo.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._MaterialInfo.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._MaterialID = value.MaterialID;
					}
					else
					{
						this._MaterialID = default(int);
					}
					this.SendPropertyChanged("MaterialInfo");
				}
			}
		}
		
		[Association(Name="PileInfo_TableOfStocks", Storage="_PileInfo", ThisKey="PileID", OtherKey="PileID", IsForeignKey=true)]
		public PileInfo PileInfo
		{
			get
			{
				return this._PileInfo.Entity;
			}
			set
			{
				PileInfo previousValue = this._PileInfo.Entity;
				if (((previousValue != value) 
							|| (this._PileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PileInfo.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._PileInfo.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._PileID = value.PileID;
					}
					else
					{
						this._PileID = default(int);
					}
					this.SendPropertyChanged("PileInfo");
				}
			}
		}
		
		[Association(Name="StorageInfo_TableOfStocks", Storage="_StorageInfo", ThisKey="StorageID", OtherKey="StorageID", IsForeignKey=true)]
		public StorageInfo StorageInfo
		{
			get
			{
				return this._StorageInfo.Entity;
			}
			set
			{
				StorageInfo previousValue = this._StorageInfo.Entity;
				if (((previousValue != value) 
							|| (this._StorageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StorageInfo.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._StorageInfo.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._StorageID = value.StorageID;
					}
					else
					{
						this._StorageID = default(int);
					}
					this.SendPropertyChanged("StorageInfo");
				}
			}
		}
		
		[Association(Name="SupplierInfo_TableOfStocks", Storage="_SupplierInfo", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public SupplierInfo SupplierInfo
		{
			get
			{
				return this._SupplierInfo.Entity;
			}
			set
			{
				SupplierInfo previousValue = this._SupplierInfo.Entity;
				if (((previousValue != value) 
							|| (this._SupplierInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierInfo.Entity = null;
						previousValue.TableOfStocks.Remove(this);
					}
					this._SupplierInfo.Entity = value;
					if ((value != null))
					{
						value.TableOfStocks.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SupplierInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowDetailsOffline(FlowDetailsOffline entity)
		{
			this.SendPropertyChanging();
			entity.TableOfStocks = this;
		}
		
		private void detach_FlowDetailsOffline(FlowDetailsOffline entity)
		{
			this.SendPropertyChanging();
			entity.TableOfStocks = null;
		}
	}
	
	[Table(Name="dbo.TaskProxy")]
	public partial class TaskProxy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskProxyID;
		
		private int _ProxyPrincipal;
		
		private int _ProxyFiduciary;
		
		private int _ProxyTaskType;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private System.DateTime _CreateTime;
		
		private string _TaskDispose;
		
		private string _Remark;
		
		private EntitySet<ProxyDirector> _ProxyDirector;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
		private EntityRef<TaskProxyType> _TaskProxyType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskProxyIDChanging(int value);
    partial void OnTaskProxyIDChanged();
    partial void OnProxyPrincipalChanging(int value);
    partial void OnProxyPrincipalChanged();
    partial void OnProxyFiduciaryChanging(int value);
    partial void OnProxyFiduciaryChanged();
    partial void OnProxyTaskTypeChanging(int value);
    partial void OnProxyTaskTypeChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public TaskProxy()
		{
			this._ProxyDirector = new EntitySet<ProxyDirector>(new Action<ProxyDirector>(this.attach_ProxyDirector), new Action<ProxyDirector>(this.detach_ProxyDirector));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			this._TaskProxyType = default(EntityRef<TaskProxyType>);
			OnCreated();
		}
		
		[Column(Storage="_TaskProxyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskProxyID
		{
			get
			{
				return this._TaskProxyID;
			}
			set
			{
				if ((this._TaskProxyID != value))
				{
					this.OnTaskProxyIDChanging(value);
					this.SendPropertyChanging();
					this._TaskProxyID = value;
					this.SendPropertyChanged("TaskProxyID");
					this.OnTaskProxyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProxyPrincipal", DbType="Int NOT NULL")]
		public int ProxyPrincipal
		{
			get
			{
				return this._ProxyPrincipal;
			}
			set
			{
				if ((this._ProxyPrincipal != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProxyPrincipalChanging(value);
					this.SendPropertyChanging();
					this._ProxyPrincipal = value;
					this.SendPropertyChanged("ProxyPrincipal");
					this.OnProxyPrincipalChanged();
				}
			}
		}
		
		[Column(Storage="_ProxyFiduciary", DbType="Int NOT NULL")]
		public int ProxyFiduciary
		{
			get
			{
				return this._ProxyFiduciary;
			}
			set
			{
				if ((this._ProxyFiduciary != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProxyFiduciaryChanging(value);
					this.SendPropertyChanging();
					this._ProxyFiduciary = value;
					this.SendPropertyChanged("ProxyFiduciary");
					this.OnProxyFiduciaryChanged();
				}
			}
		}
		
		[Column(Storage="_ProxyTaskType", DbType="Int NOT NULL")]
		public int ProxyTaskType
		{
			get
			{
				return this._ProxyTaskType;
			}
			set
			{
				if ((this._ProxyTaskType != value))
				{
					if (this._TaskProxyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProxyTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._ProxyTaskType = value;
					this.SendPropertyChanged("ProxyTaskType");
					this.OnProxyTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="TaskProxy_ProxyDirector", Storage="_ProxyDirector", ThisKey="TaskProxyID", OtherKey="TaskProxyID")]
		public EntitySet<ProxyDirector> ProxyDirector
		{
			get
			{
				return this._ProxyDirector;
			}
			set
			{
				this._ProxyDirector.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskProxy", Storage="_EmpInfo", ThisKey="ProxyPrincipal", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.TaskProxy.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.TaskProxy.Add(this);
						this._ProxyPrincipal = value.EmpID;
					}
					else
					{
						this._ProxyPrincipal = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_TaskProxy1", Storage="_EmpInfo1", ThisKey="ProxyFiduciary", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.TaskProxy1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.TaskProxy1.Add(this);
						this._ProxyFiduciary = value.EmpID;
					}
					else
					{
						this._ProxyFiduciary = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		[Association(Name="TaskProxyType_TaskProxy", Storage="_TaskProxyType", ThisKey="ProxyTaskType", OtherKey="TaskProxyTypeID", IsForeignKey=true)]
		public TaskProxyType TaskProxyType
		{
			get
			{
				return this._TaskProxyType.Entity;
			}
			set
			{
				TaskProxyType previousValue = this._TaskProxyType.Entity;
				if (((previousValue != value) 
							|| (this._TaskProxyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskProxyType.Entity = null;
						previousValue.TaskProxy.Remove(this);
					}
					this._TaskProxyType.Entity = value;
					if ((value != null))
					{
						value.TaskProxy.Add(this);
						this._ProxyTaskType = value.TaskProxyTypeID;
					}
					else
					{
						this._ProxyTaskType = default(int);
					}
					this.SendPropertyChanged("TaskProxyType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProxyDirector(ProxyDirector entity)
		{
			this.SendPropertyChanging();
			entity.TaskProxy = this;
		}
		
		private void detach_ProxyDirector(ProxyDirector entity)
		{
			this.SendPropertyChanging();
			entity.TaskProxy = null;
		}
	}
	
	[Table(Name="dbo.TaskProxyType")]
	public partial class TaskProxyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskProxyTypeID;
		
		private string _TaskProxyTypeName;
		
		private EntitySet<TaskProxy> _TaskProxy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskProxyTypeIDChanging(int value);
    partial void OnTaskProxyTypeIDChanged();
    partial void OnTaskProxyTypeNameChanging(string value);
    partial void OnTaskProxyTypeNameChanged();
    #endregion
		
		public TaskProxyType()
		{
			this._TaskProxy = new EntitySet<TaskProxy>(new Action<TaskProxy>(this.attach_TaskProxy), new Action<TaskProxy>(this.detach_TaskProxy));
			OnCreated();
		}
		
		[Column(Storage="_TaskProxyTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskProxyTypeID
		{
			get
			{
				return this._TaskProxyTypeID;
			}
			set
			{
				if ((this._TaskProxyTypeID != value))
				{
					this.OnTaskProxyTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TaskProxyTypeID = value;
					this.SendPropertyChanged("TaskProxyTypeID");
					this.OnTaskProxyTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskProxyTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskProxyTypeName
		{
			get
			{
				return this._TaskProxyTypeName;
			}
			set
			{
				if ((this._TaskProxyTypeName != value))
				{
					this.OnTaskProxyTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TaskProxyTypeName = value;
					this.SendPropertyChanged("TaskProxyTypeName");
					this.OnTaskProxyTypeNameChanged();
				}
			}
		}
		
		[Association(Name="TaskProxyType_TaskProxy", Storage="_TaskProxy", ThisKey="TaskProxyTypeID", OtherKey="ProxyTaskType")]
		public EntitySet<TaskProxy> TaskProxy
		{
			get
			{
				return this._TaskProxy;
			}
			set
			{
				this._TaskProxy.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskProxy(TaskProxy entity)
		{
			this.SendPropertyChanging();
			entity.TaskProxyType = this;
		}
		
		private void detach_TaskProxy(TaskProxy entity)
		{
			this.SendPropertyChanging();
			entity.TaskProxyType = null;
		}
	}
	
	[Table(Name="dbo.TaskStorageIn")]
	public partial class TaskStorageIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskStorageID;
		
		private int _TaskCreaterID;
		
		private int _TaskTargetID;
		
		private string _StorageInType;
		
		private int _StorageInID;
		
		private string _QCBatch;
		
		private string _TaskTitle;
		
		private string _Remark;
		
		private string _InspectState;
		
		private string _TaskState;
		
		private string _TaskDispose;
		
		private string _TaskType;
		
		private System.Nullable<int> _PreviousTaskID;
		
		private System.DateTime _CreateTime;
		
		private EntitySet<SrinAccountReceiptConfirm> _SrinAccountReceiptConfirm;
		
		private EntitySet<SrinAChiefQReceiptConfirm> _SrinAChiefQReceiptConfirm;
		
		private EntitySet<SrinAssetReceiptConfirm> _SrinAssetReceiptConfirm;
		
		private EntitySet<SrinInspectorVerifyTransfer> _SrinInspectorVerifyTransfer;
		
		private EntitySet<SrinMaterialRepairAudit> _SrinMaterialRepairAudit;
		
		private EntitySet<SrinProduceVerifyTransfer> _SrinProduceVerifyTransfer;
		
		private EntitySet<SrinQualifiedReceipt> _SrinQualifiedReceipt;
		
		private EntitySet<SrinReceipt> _SrinReceipt;
		
		private EntitySet<SrinRepairPlan> _SrinRepairPlan;
		
		private EntitySet<SrinRepairReport> _SrinRepairReport;
		
		private EntitySet<SrinStocktaking> _SrinStocktaking;
		
		private EntitySet<SrinStocktakingConfirm> _SrinStocktakingConfirm;
		
		private EntitySet<SrinVerifyTransfer> _SrinVerifyTransfer;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskStorageIDChanging(int value);
    partial void OnTaskStorageIDChanged();
    partial void OnTaskCreaterIDChanging(int value);
    partial void OnTaskCreaterIDChanged();
    partial void OnTaskTargetIDChanging(int value);
    partial void OnTaskTargetIDChanged();
    partial void OnStorageInTypeChanging(string value);
    partial void OnStorageInTypeChanged();
    partial void OnStorageInIDChanging(int value);
    partial void OnStorageInIDChanged();
    partial void OnQCBatchChanging(string value);
    partial void OnQCBatchChanged();
    partial void OnTaskTitleChanging(string value);
    partial void OnTaskTitleChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnInspectStateChanging(string value);
    partial void OnInspectStateChanged();
    partial void OnTaskStateChanging(string value);
    partial void OnTaskStateChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnTaskTypeChanging(string value);
    partial void OnTaskTypeChanged();
    partial void OnPreviousTaskIDChanging(System.Nullable<int> value);
    partial void OnPreviousTaskIDChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public TaskStorageIn()
		{
			this._SrinAccountReceiptConfirm = new EntitySet<SrinAccountReceiptConfirm>(new Action<SrinAccountReceiptConfirm>(this.attach_SrinAccountReceiptConfirm), new Action<SrinAccountReceiptConfirm>(this.detach_SrinAccountReceiptConfirm));
			this._SrinAChiefQReceiptConfirm = new EntitySet<SrinAChiefQReceiptConfirm>(new Action<SrinAChiefQReceiptConfirm>(this.attach_SrinAChiefQReceiptConfirm), new Action<SrinAChiefQReceiptConfirm>(this.detach_SrinAChiefQReceiptConfirm));
			this._SrinAssetReceiptConfirm = new EntitySet<SrinAssetReceiptConfirm>(new Action<SrinAssetReceiptConfirm>(this.attach_SrinAssetReceiptConfirm), new Action<SrinAssetReceiptConfirm>(this.detach_SrinAssetReceiptConfirm));
			this._SrinInspectorVerifyTransfer = new EntitySet<SrinInspectorVerifyTransfer>(new Action<SrinInspectorVerifyTransfer>(this.attach_SrinInspectorVerifyTransfer), new Action<SrinInspectorVerifyTransfer>(this.detach_SrinInspectorVerifyTransfer));
			this._SrinMaterialRepairAudit = new EntitySet<SrinMaterialRepairAudit>(new Action<SrinMaterialRepairAudit>(this.attach_SrinMaterialRepairAudit), new Action<SrinMaterialRepairAudit>(this.detach_SrinMaterialRepairAudit));
			this._SrinProduceVerifyTransfer = new EntitySet<SrinProduceVerifyTransfer>(new Action<SrinProduceVerifyTransfer>(this.attach_SrinProduceVerifyTransfer), new Action<SrinProduceVerifyTransfer>(this.detach_SrinProduceVerifyTransfer));
			this._SrinQualifiedReceipt = new EntitySet<SrinQualifiedReceipt>(new Action<SrinQualifiedReceipt>(this.attach_SrinQualifiedReceipt), new Action<SrinQualifiedReceipt>(this.detach_SrinQualifiedReceipt));
			this._SrinReceipt = new EntitySet<SrinReceipt>(new Action<SrinReceipt>(this.attach_SrinReceipt), new Action<SrinReceipt>(this.detach_SrinReceipt));
			this._SrinRepairPlan = new EntitySet<SrinRepairPlan>(new Action<SrinRepairPlan>(this.attach_SrinRepairPlan), new Action<SrinRepairPlan>(this.detach_SrinRepairPlan));
			this._SrinRepairReport = new EntitySet<SrinRepairReport>(new Action<SrinRepairReport>(this.attach_SrinRepairReport), new Action<SrinRepairReport>(this.detach_SrinRepairReport));
			this._SrinStocktaking = new EntitySet<SrinStocktaking>(new Action<SrinStocktaking>(this.attach_SrinStocktaking), new Action<SrinStocktaking>(this.detach_SrinStocktaking));
			this._SrinStocktakingConfirm = new EntitySet<SrinStocktakingConfirm>(new Action<SrinStocktakingConfirm>(this.attach_SrinStocktakingConfirm), new Action<SrinStocktakingConfirm>(this.detach_SrinStocktakingConfirm));
			this._SrinVerifyTransfer = new EntitySet<SrinVerifyTransfer>(new Action<SrinVerifyTransfer>(this.attach_SrinVerifyTransfer), new Action<SrinVerifyTransfer>(this.detach_SrinVerifyTransfer));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_TaskStorageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskStorageID
		{
			get
			{
				return this._TaskStorageID;
			}
			set
			{
				if ((this._TaskStorageID != value))
				{
					this.OnTaskStorageIDChanging(value);
					this.SendPropertyChanging();
					this._TaskStorageID = value;
					this.SendPropertyChanged("TaskStorageID");
					this.OnTaskStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskCreaterID", DbType="Int NOT NULL")]
		public int TaskCreaterID
		{
			get
			{
				return this._TaskCreaterID;
			}
			set
			{
				if ((this._TaskCreaterID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskCreaterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskCreaterID = value;
					this.SendPropertyChanged("TaskCreaterID");
					this.OnTaskCreaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTargetID", DbType="Int NOT NULL")]
		public int TaskTargetID
		{
			get
			{
				return this._TaskTargetID;
			}
			set
			{
				if ((this._TaskTargetID != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTargetID = value;
					this.SendPropertyChanged("TaskTargetID");
					this.OnTaskTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInType", DbType="NVarChar(50)")]
		public string StorageInType
		{
			get
			{
				return this._StorageInType;
			}
			set
			{
				if ((this._StorageInType != value))
				{
					this.OnStorageInTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageInType = value;
					this.SendPropertyChanged("StorageInType");
					this.OnStorageInTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInID", DbType="Int NOT NULL")]
		public int StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_QCBatch", DbType="NVarChar(50)")]
		public string QCBatch
		{
			get
			{
				return this._QCBatch;
			}
			set
			{
				if ((this._QCBatch != value))
				{
					this.OnQCBatchChanging(value);
					this.SendPropertyChanging();
					this._QCBatch = value;
					this.SendPropertyChanged("QCBatch");
					this.OnQCBatchChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskTitle
		{
			get
			{
				return this._TaskTitle;
			}
			set
			{
				if ((this._TaskTitle != value))
				{
					this.OnTaskTitleChanging(value);
					this.SendPropertyChanging();
					this._TaskTitle = value;
					this.SendPropertyChanged("TaskTitle");
					this.OnTaskTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_InspectState", DbType="NVarChar(50)")]
		public string InspectState
		{
			get
			{
				return this._InspectState;
			}
			set
			{
				if ((this._InspectState != value))
				{
					this.OnInspectStateChanging(value);
					this.SendPropertyChanging();
					this._InspectState = value;
					this.SendPropertyChanged("InspectState");
					this.OnInspectStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskState", DbType="NVarChar(50)")]
		public string TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="NVarChar(50)")]
		public string TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PreviousTaskID", DbType="Int")]
		public System.Nullable<int> PreviousTaskID
		{
			get
			{
				return this._PreviousTaskID;
			}
			set
			{
				if ((this._PreviousTaskID != value))
				{
					this.OnPreviousTaskIDChanging(value);
					this.SendPropertyChanging();
					this._PreviousTaskID = value;
					this.SendPropertyChanged("PreviousTaskID");
					this.OnPreviousTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="TaskStorageIn_SrinAccountReceiptConfirm", Storage="_SrinAccountReceiptConfirm", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinAccountReceiptConfirm> SrinAccountReceiptConfirm
		{
			get
			{
				return this._SrinAccountReceiptConfirm;
			}
			set
			{
				this._SrinAccountReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinAChiefQReceiptConfirm", Storage="_SrinAChiefQReceiptConfirm", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinAChiefQReceiptConfirm> SrinAChiefQReceiptConfirm
		{
			get
			{
				return this._SrinAChiefQReceiptConfirm;
			}
			set
			{
				this._SrinAChiefQReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinAssetReceiptConfirm", Storage="_SrinAssetReceiptConfirm", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinAssetReceiptConfirm> SrinAssetReceiptConfirm
		{
			get
			{
				return this._SrinAssetReceiptConfirm;
			}
			set
			{
				this._SrinAssetReceiptConfirm.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinInspectorVerifyTransfer", Storage="_SrinInspectorVerifyTransfer", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinInspectorVerifyTransfer> SrinInspectorVerifyTransfer
		{
			get
			{
				return this._SrinInspectorVerifyTransfer;
			}
			set
			{
				this._SrinInspectorVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinMaterialRepairAudit", Storage="_SrinMaterialRepairAudit", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinMaterialRepairAudit> SrinMaterialRepairAudit
		{
			get
			{
				return this._SrinMaterialRepairAudit;
			}
			set
			{
				this._SrinMaterialRepairAudit.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinProduceVerifyTransfer", Storage="_SrinProduceVerifyTransfer", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinProduceVerifyTransfer> SrinProduceVerifyTransfer
		{
			get
			{
				return this._SrinProduceVerifyTransfer;
			}
			set
			{
				this._SrinProduceVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinQualifiedReceipt", Storage="_SrinQualifiedReceipt", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinQualifiedReceipt> SrinQualifiedReceipt
		{
			get
			{
				return this._SrinQualifiedReceipt;
			}
			set
			{
				this._SrinQualifiedReceipt.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinReceipt", Storage="_SrinReceipt", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinReceipt> SrinReceipt
		{
			get
			{
				return this._SrinReceipt;
			}
			set
			{
				this._SrinReceipt.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinRepairPlan", Storage="_SrinRepairPlan", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinRepairPlan> SrinRepairPlan
		{
			get
			{
				return this._SrinRepairPlan;
			}
			set
			{
				this._SrinRepairPlan.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinRepairReport", Storage="_SrinRepairReport", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinRepairReport> SrinRepairReport
		{
			get
			{
				return this._SrinRepairReport;
			}
			set
			{
				this._SrinRepairReport.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinStocktaking", Storage="_SrinStocktaking", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinStocktaking> SrinStocktaking
		{
			get
			{
				return this._SrinStocktaking;
			}
			set
			{
				this._SrinStocktaking.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinStocktakingConfirm", Storage="_SrinStocktakingConfirm", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinStocktakingConfirm> SrinStocktakingConfirm
		{
			get
			{
				return this._SrinStocktakingConfirm;
			}
			set
			{
				this._SrinStocktakingConfirm.Assign(value);
			}
		}
		
		[Association(Name="TaskStorageIn_SrinVerifyTransfer", Storage="_SrinVerifyTransfer", ThisKey="TaskStorageID", OtherKey="TaskID")]
		public EntitySet<SrinVerifyTransfer> SrinVerifyTransfer
		{
			get
			{
				return this._SrinVerifyTransfer;
			}
			set
			{
				this._SrinVerifyTransfer.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn", Storage="_EmpInfo", ThisKey="TaskCreaterID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.TaskStorageIn.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.TaskStorageIn.Add(this);
						this._TaskCreaterID = value.EmpID;
					}
					else
					{
						this._TaskCreaterID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn1", Storage="_EmpInfo1", ThisKey="TaskTargetID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.TaskStorageIn1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.TaskStorageIn1.Add(this);
						this._TaskTargetID = value.EmpID;
					}
					else
					{
						this._TaskTargetID = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SrinAccountReceiptConfirm(SrinAccountReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinAccountReceiptConfirm(SrinAccountReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinAChiefQReceiptConfirm(SrinAChiefQReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinAssetReceiptConfirm(SrinAssetReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinAssetReceiptConfirm(SrinAssetReceiptConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinInspectorVerifyTransfer(SrinInspectorVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinMaterialRepairAudit(SrinMaterialRepairAudit entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinMaterialRepairAudit(SrinMaterialRepairAudit entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinProduceVerifyTransfer(SrinProduceVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinProduceVerifyTransfer(SrinProduceVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinQualifiedReceipt(SrinQualifiedReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinQualifiedReceipt(SrinQualifiedReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinReceipt(SrinReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinReceipt(SrinReceipt entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinRepairPlan(SrinRepairPlan entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinRepairPlan(SrinRepairPlan entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinRepairReport(SrinRepairReport entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinRepairReport(SrinRepairReport entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinStocktaking(SrinStocktaking entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinStocktaking(SrinStocktaking entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinStocktakingConfirm(SrinStocktakingConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinStocktakingConfirm(SrinStocktakingConfirm entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
		
		private void attach_SrinVerifyTransfer(SrinVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = this;
		}
		
		private void detach_SrinVerifyTransfer(SrinVerifyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.TaskStorageIn = null;
		}
	}
	
	[Table(Name="dbo.WriteOffStocks")]
	public partial class WriteOffStocks
	{
		
		private int _StorageOutDetailsID;
		
		private int _StorageOutRealDetailsID;
		
		private int _StorageOutNoticeID;
		
		private int _StocksID;
		
		private System.Nullable<decimal> _RealGentaojian;
		
		private System.Nullable<decimal> _RealMetre;
		
		private System.Nullable<decimal> _RealTon;
		
		private System.Nullable<decimal> _RealAmount;
		
		private int _ProjectID;
		
		private decimal _UnitPrice;
		
		private string _CurUnit;
		
		private System.DateTime _CreateTime;
		
		private string _StorageOutNoticeCode;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _ManufacturerName;
		
		public WriteOffStocks()
		{
		}
		
		[Column(Storage="_StorageOutDetailsID", DbType="Int NOT NULL")]
		public int StorageOutDetailsID
		{
			get
			{
				return this._StorageOutDetailsID;
			}
			set
			{
				if ((this._StorageOutDetailsID != value))
				{
					this._StorageOutDetailsID = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutRealDetailsID", DbType="Int NOT NULL")]
		public int StorageOutRealDetailsID
		{
			get
			{
				return this._StorageOutRealDetailsID;
			}
			set
			{
				if ((this._StorageOutRealDetailsID != value))
				{
					this._StorageOutRealDetailsID = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					this._StorageOutNoticeID = value;
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this._StocksID = value;
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this._RealGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this._RealMetre = value;
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this._RealTon = value;
				}
			}
		}
		
		[Column(Storage="_RealAmount", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealAmount
		{
			get
			{
				return this._RealAmount;
			}
			set
			{
				if ((this._RealAmount != value))
				{
					this._RealAmount = value;
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this._CreateTime = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageOutNoticeCode
		{
			get
			{
				return this._StorageOutNoticeCode;
			}
			set
			{
				if ((this._StorageOutNoticeCode != value))
				{
					this._StorageOutNoticeCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.NormalIn")]
	public partial class NormalIn
	{
		
		private string _StorageInCode;
		
		private string _MaterialName;
		
		private string _FinanceCode;
		
		private System.DateTime _StorageTime;
		
		private string _SupplierName;
		
		private string _ManufacturerName;
		
		private string _BillCode;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _TestGentaojian;
		
		private System.Nullable<decimal> _TestMetre;
		
		private System.Nullable<decimal> _TestTon;
		
		private string _Approve;
		
		private string _ReceivingTypeName;
		
		private int _ReceivingTypeID;
		
		private string _SpecificationModel;
		
		public NormalIn()
		{
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this._StorageInCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this._StorageTime = value;
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this._SupplierName = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this._BillCode = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[Column(Storage="_TestGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestGentaojian
		{
			get
			{
				return this._TestGentaojian;
			}
			set
			{
				if ((this._TestGentaojian != value))
				{
					this._TestGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_TestMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestMetre
		{
			get
			{
				return this._TestMetre;
			}
			set
			{
				if ((this._TestMetre != value))
				{
					this._TestMetre = value;
				}
			}
		}
		
		[Column(Storage="_TestTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestTon
		{
			get
			{
				return this._TestTon;
			}
			set
			{
				if ((this._TestTon != value))
				{
					this._TestTon = value;
				}
			}
		}
		
		[Column(Storage="_Approve", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this._Approve = value;
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReceivingTypeName
		{
			get
			{
				return this._ReceivingTypeName;
			}
			set
			{
				if ((this._ReceivingTypeName != value))
				{
					this._ReceivingTypeName = value;
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeID", DbType="Int NOT NULL")]
		public int ReceivingTypeID
		{
			get
			{
				return this._ReceivingTypeID;
			}
			set
			{
				if ((this._ReceivingTypeID != value))
				{
					this._ReceivingTypeID = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.NormalOut")]
	public partial class NormalOut
	{
		
		private string _MaterialName;
		
		private string _FinanceCode;
		
		private string _SpecificationModel;
		
		private string _MaterialStatus;
		
		private string _StorageOutNoticeCode;
		
		private decimal _RealGentaojian;
		
		private decimal _RealMetre;
		
		private decimal _RealTon;
		
		private decimal _RealAmount;
		
		private string _ProjectName;
		
		private string _ProjectProperty;
		
		private string _ProjectStage;
		
		private string _Remark;
		
		private string _BusinessUnitName;
		
		private System.DateTime _ConfirmTime;
		
		private string _own;
		
		private int _StocksID;
		
		private string _ManufacturerName;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private string _MaterialCode;
		
		public NormalOut()
		{
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_MaterialStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MaterialStatus
		{
			get
			{
				return this._MaterialStatus;
			}
			set
			{
				if ((this._MaterialStatus != value))
				{
					this._MaterialStatus = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageOutNoticeCode
		{
			get
			{
				return this._StorageOutNoticeCode;
			}
			set
			{
				if ((this._StorageOutNoticeCode != value))
				{
					this._StorageOutNoticeCode = value;
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this._RealGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this._RealMetre = value;
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this._RealTon = value;
				}
			}
		}
		
		[Column(Storage="_RealAmount", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealAmount
		{
			get
			{
				return this._RealAmount;
			}
			set
			{
				if ((this._RealAmount != value))
				{
					this._RealAmount = value;
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[Column(Storage="_ProjectProperty", DbType="NVarChar(50)")]
		public string ProjectProperty
		{
			get
			{
				return this._ProjectProperty;
			}
			set
			{
				if ((this._ProjectProperty != value))
				{
					this._ProjectProperty = value;
				}
			}
		}
		
		[Column(Storage="_ProjectStage", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ProjectStage
		{
			get
			{
				return this._ProjectStage;
			}
			set
			{
				if ((this._ProjectStage != value))
				{
					this._ProjectStage = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this._ConfirmTime = value;
				}
			}
		}
		
		[Column(Storage="_own", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string own
		{
			get
			{
				return this._own;
			}
			set
			{
				if ((this._own != value))
				{
					this._own = value;
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this._StocksID = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this._MaterialCode = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ReportStocks")]
	public partial class ReportStocks
	{
		
		private string _BatchIndex;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _FinanceCode;
		
		private string _BillCode;
		
		private string _SupplierName;
		
		private string _PileCode;
		
		private string _StorageInCode;
		
		private string _MaterialCode;
		
		private string _PileName;
		
		private string _StorageName;
		
		private int _StocksID;
		
		private decimal _UnitPrice;
		
		private System.DateTime _StorageTime;
		
		private string _Remark;
		
		private string _Status;
		
		private int _MaterialID;
		
		private int _StorageID;
		
		private int _PileID;
		
		private System.Nullable<decimal> _StocksGenTaojian;
		
		private System.Nullable<decimal> _StocksMetre;
		
		private System.Nullable<decimal> _StocksTon;
		
		private string _CurUnit;
		
		private string _ManufacturerName;
		
		private int _ManufacturerID;
		
		public ReportStocks()
		{
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this._BatchIndex = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50)")]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this._BillCode = value;
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(50)")]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this._SupplierName = value;
				}
			}
		}
		
		[Column(Storage="_PileCode", DbType="NVarChar(50)")]
		public string PileCode
		{
			get
			{
				return this._PileCode;
			}
			set
			{
				if ((this._PileCode != value))
				{
					this._PileCode = value;
				}
			}
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50)")]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this._StorageInCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this._MaterialCode = value;
				}
			}
		}
		
		[Column(Storage="_PileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PileName
		{
			get
			{
				return this._PileName;
			}
			set
			{
				if ((this._PileName != value))
				{
					this._PileName = value;
				}
			}
		}
		
		[Column(Storage="_StorageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageName
		{
			get
			{
				return this._StorageName;
			}
			set
			{
				if ((this._StorageName != value))
				{
					this._StorageName = value;
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this._StocksID = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this._StorageTime = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this._MaterialID = value;
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					this._StorageID = value;
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					this._PileID = value;
				}
			}
		}
		
		[Column(Storage="_StocksGenTaojian", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksGenTaojian
		{
			get
			{
				return this._StocksGenTaojian;
			}
			set
			{
				if ((this._StocksGenTaojian != value))
				{
					this._StocksGenTaojian = value;
				}
			}
		}
		
		[Column(Storage="_StocksMetre", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksMetre
		{
			get
			{
				return this._StocksMetre;
			}
			set
			{
				if ((this._StocksMetre != value))
				{
					this._StocksMetre = value;
				}
			}
		}
		
		[Column(Storage="_StocksTon", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksTon
		{
			get
			{
				return this._StocksTon;
			}
			set
			{
				if ((this._StocksTon != value))
				{
					this._StocksTon = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this._ManufacturerID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.SrinView")]
	public partial class SrinView
	{
		
		private string _RetrieveCode;
		
		private string _ProjectName;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _FinanceCode;
		
		private string _MaterialCode;
		
		private System.DateTime _CreateTime;
		
		private string _CurUnit;
		
		private string _SupplierName;
		
		private decimal _UnitPrice;
		
		private System.Nullable<decimal> _总数根;
		
		private System.Nullable<decimal> _总数米;
		
		private System.Nullable<decimal> _总数吨;
		
		private decimal _Gentaojian;
		
		private decimal _Metre;
		
		private decimal _Ton;
		
		private decimal _Amount;
		
		public SrinView()
		{
		}
		
		[Column(Storage="_RetrieveCode", DbType="NVarChar(50)")]
		public string RetrieveCode
		{
			get
			{
				return this._RetrieveCode;
			}
			set
			{
				if ((this._RetrieveCode != value))
				{
					this._RetrieveCode = value;
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this._MaterialCode = value;
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this._CreateTime = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this._SupplierName = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_总数根", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 总数根
		{
			get
			{
				return this._总数根;
			}
			set
			{
				if ((this._总数根 != value))
				{
					this._总数根 = value;
				}
			}
		}
		
		[Column(Storage="_总数米", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 总数米
		{
			get
			{
				return this._总数米;
			}
			set
			{
				if ((this._总数米 != value))
				{
					this._总数米 = value;
				}
			}
		}
		
		[Column(Storage="_总数吨", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 总数吨
		{
			get
			{
				return this._总数吨;
			}
			set
			{
				if ((this._总数吨 != value))
				{
					this._总数吨 = value;
				}
			}
		}
		
		[Column(Storage="_Gentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal Gentaojian
		{
			get
			{
				return this._Gentaojian;
			}
			set
			{
				if ((this._Gentaojian != value))
				{
					this._Gentaojian = value;
				}
			}
		}
		
		[Column(Storage="_Metre", DbType="Decimal(18,2) NOT NULL")]
		public decimal Metre
		{
			get
			{
				return this._Metre;
			}
			set
			{
				if ((this._Metre != value))
				{
					this._Metre = value;
				}
			}
		}
		
		[Column(Storage="_Ton", DbType="Decimal(18,2) NOT NULL")]
		public decimal Ton
		{
			get
			{
				return this._Ton;
			}
			set
			{
				if ((this._Ton != value))
				{
					this._Ton = value;
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.StocksOnline_")]
	public partial class StocksOnline_
	{
		
		private string _BatchIndex;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _FinanceCode;
		
		private string _OnlineCode;
		
		private string _PileName;
		
		private string _StorageName;
		
		private int _StockOnlineID;
		
		private System.Nullable<decimal> _OnlineUnitPrice;
		
		private System.DateTime _StorageTime;
		
		private string _Remark;
		
		private string _Status;
		
		private int _MaterialID;
		
		private int _StorageID;
		
		private int _PileID;
		
		private System.Nullable<decimal> _StocksGenTaojian;
		
		private System.Nullable<decimal> _StocksMetre;
		
		private System.Nullable<decimal> _StocksTon;
		
		private string _CurUnit;
		
		private string _ManufacturerName;
		
		private int _ManufacturerID;
		
		public StocksOnline_()
		{
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this._BatchIndex = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_OnlineCode", DbType="NVarChar(50)")]
		public string OnlineCode
		{
			get
			{
				return this._OnlineCode;
			}
			set
			{
				if ((this._OnlineCode != value))
				{
					this._OnlineCode = value;
				}
			}
		}
		
		[Column(Storage="_PileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PileName
		{
			get
			{
				return this._PileName;
			}
			set
			{
				if ((this._PileName != value))
				{
					this._PileName = value;
				}
			}
		}
		
		[Column(Storage="_StorageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageName
		{
			get
			{
				return this._StorageName;
			}
			set
			{
				if ((this._StorageName != value))
				{
					this._StorageName = value;
				}
			}
		}
		
		[Column(Storage="_StockOnlineID", DbType="Int NOT NULL")]
		public int StockOnlineID
		{
			get
			{
				return this._StockOnlineID;
			}
			set
			{
				if ((this._StockOnlineID != value))
				{
					this._StockOnlineID = value;
				}
			}
		}
		
		[Column(Storage="_OnlineUnitPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> OnlineUnitPrice
		{
			get
			{
				return this._OnlineUnitPrice;
			}
			set
			{
				if ((this._OnlineUnitPrice != value))
				{
					this._OnlineUnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this._StorageTime = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this._MaterialID = value;
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					this._StorageID = value;
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					this._PileID = value;
				}
			}
		}
		
		[Column(Storage="_StocksGenTaojian", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksGenTaojian
		{
			get
			{
				return this._StocksGenTaojian;
			}
			set
			{
				if ((this._StocksGenTaojian != value))
				{
					this._StocksGenTaojian = value;
				}
			}
		}
		
		[Column(Storage="_StocksMetre", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksMetre
		{
			get
			{
				return this._StocksMetre;
			}
			set
			{
				if ((this._StocksMetre != value))
				{
					this._StocksMetre = value;
				}
			}
		}
		
		[Column(Storage="_StocksTon", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksTon
		{
			get
			{
				return this._StocksTon;
			}
			set
			{
				if ((this._StocksTon != value))
				{
					this._StocksTon = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this._ManufacturerID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.StorageStocks")]
	public partial class StorageStocks
	{
		
		private string _BatchIndex;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _FinanceCode;
		
		private string _MaterialCode;
		
		private string _PileName;
		
		private string _StorageName;
		
		private int _StocksID;
		
		private decimal _UnitPrice;
		
		private System.DateTime _StorageTime;
		
		private string _Remark;
		
		private string _Status;
		
		private int _MaterialID;
		
		private int _StorageID;
		
		private int _PileID;
		
		private System.Nullable<decimal> _StocksGenTaojian;
		
		private System.Nullable<decimal> _StocksMetre;
		
		private System.Nullable<decimal> _StocksTon;
		
		private string _CurUnit;
		
		private string _ManufacturerName;
		
		private int _ManufacturerID;
		
		public StorageStocks()
		{
		}
		
		[Column(Storage="_BatchIndex", DbType="NVarChar(50)")]
		public string BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					this._BatchIndex = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this._MaterialCode = value;
				}
			}
		}
		
		[Column(Storage="_PileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PileName
		{
			get
			{
				return this._PileName;
			}
			set
			{
				if ((this._PileName != value))
				{
					this._PileName = value;
				}
			}
		}
		
		[Column(Storage="_StorageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageName
		{
			get
			{
				return this._StorageName;
			}
			set
			{
				if ((this._StorageName != value))
				{
					this._StorageName = value;
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this._StocksID = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this._StorageTime = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this._MaterialID = value;
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					this._StorageID = value;
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					this._PileID = value;
				}
			}
		}
		
		[Column(Storage="_StocksGenTaojian", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksGenTaojian
		{
			get
			{
				return this._StocksGenTaojian;
			}
			set
			{
				if ((this._StocksGenTaojian != value))
				{
					this._StocksGenTaojian = value;
				}
			}
		}
		
		[Column(Storage="_StocksMetre", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksMetre
		{
			get
			{
				return this._StocksMetre;
			}
			set
			{
				if ((this._StocksMetre != value))
				{
					this._StocksMetre = value;
				}
			}
		}
		
		[Column(Storage="_StocksTon", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> StocksTon
		{
			get
			{
				return this._StocksTon;
			}
			set
			{
				if ((this._StocksTon != value))
				{
					this._StocksTon = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this._ManufacturerID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.tmp")]
	public partial class tmp
	{
		
		private int _Expr1;
		
		private int _Expr2;
		
		private System.DateTime _Expr3;
		
		private int _Expr4;
		
		private decimal _Expr5;
		
		private decimal _Expr6;
		
		private decimal _Expr7;
		
		private decimal _Expr8;
		
		private decimal _Expr9;
		
		private string _ProjectName;
		
		private int _StorageID;
		
		private int _PileID;
		
		private string _StorageName;
		
		private string _PileName;
		
		private string _FinanceCode;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		public tmp()
		{
		}
		
		[Column(Storage="_Expr1", DbType="Int NOT NULL")]
		public int Expr1
		{
			get
			{
				return this._Expr1;
			}
			set
			{
				if ((this._Expr1 != value))
				{
					this._Expr1 = value;
				}
			}
		}
		
		[Column(Storage="_Expr2", DbType="Int NOT NULL")]
		public int Expr2
		{
			get
			{
				return this._Expr2;
			}
			set
			{
				if ((this._Expr2 != value))
				{
					this._Expr2 = value;
				}
			}
		}
		
		[Column(Storage="_Expr3", DbType="DateTime NOT NULL")]
		public System.DateTime Expr3
		{
			get
			{
				return this._Expr3;
			}
			set
			{
				if ((this._Expr3 != value))
				{
					this._Expr3 = value;
				}
			}
		}
		
		[Column(Storage="_Expr4", DbType="Int NOT NULL")]
		public int Expr4
		{
			get
			{
				return this._Expr4;
			}
			set
			{
				if ((this._Expr4 != value))
				{
					this._Expr4 = value;
				}
			}
		}
		
		[Column(Storage="_Expr5", DbType="Decimal(18,2) NOT NULL")]
		public decimal Expr5
		{
			get
			{
				return this._Expr5;
			}
			set
			{
				if ((this._Expr5 != value))
				{
					this._Expr5 = value;
				}
			}
		}
		
		[Column(Storage="_Expr6", DbType="Decimal(18,2) NOT NULL")]
		public decimal Expr6
		{
			get
			{
				return this._Expr6;
			}
			set
			{
				if ((this._Expr6 != value))
				{
					this._Expr6 = value;
				}
			}
		}
		
		[Column(Storage="_Expr7", DbType="Decimal(18,2) NOT NULL")]
		public decimal Expr7
		{
			get
			{
				return this._Expr7;
			}
			set
			{
				if ((this._Expr7 != value))
				{
					this._Expr7 = value;
				}
			}
		}
		
		[Column(Storage="_Expr8", DbType="Decimal(18,2) NOT NULL")]
		public decimal Expr8
		{
			get
			{
				return this._Expr8;
			}
			set
			{
				if ((this._Expr8 != value))
				{
					this._Expr8 = value;
				}
			}
		}
		
		[Column(Storage="_Expr9", DbType="Decimal(18,2) NOT NULL")]
		public decimal Expr9
		{
			get
			{
				return this._Expr9;
			}
			set
			{
				if ((this._Expr9 != value))
				{
					this._Expr9 = value;
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[Column(Storage="_StorageID", DbType="Int NOT NULL")]
		public int StorageID
		{
			get
			{
				return this._StorageID;
			}
			set
			{
				if ((this._StorageID != value))
				{
					this._StorageID = value;
				}
			}
		}
		
		[Column(Storage="_PileID", DbType="Int NOT NULL")]
		public int PileID
		{
			get
			{
				return this._PileID;
			}
			set
			{
				if ((this._PileID != value))
				{
					this._PileID = value;
				}
			}
		}
		
		[Column(Storage="_StorageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageName
		{
			get
			{
				return this._StorageName;
			}
			set
			{
				if ((this._StorageName != value))
				{
					this._StorageName = value;
				}
			}
		}
		
		[Column(Storage="_PileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PileName
		{
			get
			{
				return this._PileName;
			}
			set
			{
				if ((this._PileName != value))
				{
					this._PileName = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ViewCommitIn")]
	public partial class ViewCommitIn
	{
		
		private string _StorageInCode;
		
		private string _MaterialName;
		
		private string _FinanceCode;
		
		private System.DateTime _StorageTime;
		
		private string _SupplierName;
		
		private string _ManufacturerName;
		
		private string _BillCode;
		
		private string _CurUnit;
		
		private decimal _UnitPrice;
		
		private decimal _Amount;
		
		private System.Nullable<decimal> _TestGentaojian;
		
		private System.Nullable<decimal> _TestMetre;
		
		private System.Nullable<decimal> _TestTon;
		
		private string _Approve;
		
		private string _ReceivingTypeName;
		
		private int _ReceivingTypeID;
		
		private string _SpecificationModel;
		
		public ViewCommitIn()
		{
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this._StorageInCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this._StorageTime = value;
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this._SupplierName = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_BillCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BillCode
		{
			get
			{
				return this._BillCode;
			}
			set
			{
				if ((this._BillCode != value))
				{
					this._BillCode = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[Column(Storage="_TestGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestGentaojian
		{
			get
			{
				return this._TestGentaojian;
			}
			set
			{
				if ((this._TestGentaojian != value))
				{
					this._TestGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_TestMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestMetre
		{
			get
			{
				return this._TestMetre;
			}
			set
			{
				if ((this._TestMetre != value))
				{
					this._TestMetre = value;
				}
			}
		}
		
		[Column(Storage="_TestTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TestTon
		{
			get
			{
				return this._TestTon;
			}
			set
			{
				if ((this._TestTon != value))
				{
					this._TestTon = value;
				}
			}
		}
		
		[Column(Storage="_Approve", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this._Approve = value;
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReceivingTypeName
		{
			get
			{
				return this._ReceivingTypeName;
			}
			set
			{
				if ((this._ReceivingTypeName != value))
				{
					this._ReceivingTypeName = value;
				}
			}
		}
		
		[Column(Storage="_ReceivingTypeID", DbType="Int NOT NULL")]
		public int ReceivingTypeID
		{
			get
			{
				return this._ReceivingTypeID;
			}
			set
			{
				if ((this._ReceivingTypeID != value))
				{
					this._ReceivingTypeID = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ViewCommitOut")]
	public partial class ViewCommitOut
	{
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _FinanceCode;
		
		private string _MaterialStatus;
		
		private string _StorageCommitOutNoticeCode;
		
		private System.DateTime _ConfirmTime;
		
		private string _MaterialCode;
		
		private string _ManufacturerName;
		
		private string _CurUnit;
		
		private decimal _RealGentaojian;
		
		private decimal _RealMetre;
		
		private decimal _RealTon;
		
		private decimal _RealAmount;
		
		private decimal _UnitPrice;
		
		private string _Remark;
		
		public ViewCommitOut()
		{
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MaterialStatus
		{
			get
			{
				return this._MaterialStatus;
			}
			set
			{
				if ((this._MaterialStatus != value))
				{
					this._MaterialStatus = value;
				}
			}
		}
		
		[Column(Storage="_StorageCommitOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageCommitOutNoticeCode
		{
			get
			{
				return this._StorageCommitOutNoticeCode;
			}
			set
			{
				if ((this._StorageCommitOutNoticeCode != value))
				{
					this._StorageCommitOutNoticeCode = value;
				}
			}
		}
		
		[Column(Storage="_ConfirmTime", DbType="DateTime NOT NULL")]
		public System.DateTime ConfirmTime
		{
			get
			{
				return this._ConfirmTime;
			}
			set
			{
				if ((this._ConfirmTime != value))
				{
					this._ConfirmTime = value;
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this._MaterialCode = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this._RealGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this._RealMetre = value;
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this._RealTon = value;
				}
			}
		}
		
		[Column(Storage="_RealAmount", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealAmount
		{
			get
			{
				return this._RealAmount;
			}
			set
			{
				if ((this._RealAmount != value))
				{
					this._RealAmount = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.WaitForTest")]
	public partial class WaitForTest
	{
		
		private string _StorageInCode;
		
		private string _MaterialName;
		
		private string _FinanceCode;
		
		private string _SpecificationModel;
		
		private System.DateTime _StorageTime;
		
		private string _SupplierName;
		
		private string _ManufacturerName;
		
		private System.Nullable<decimal> _QuantityGentaojian;
		
		private System.Nullable<decimal> _QuantityMetre;
		
		private System.Nullable<decimal> _QuantityTon;
		
		private int _StorageInMaterialsID;
		
		private string _Remark;
		
		private int _MaterialsLeaderID;
		
		private string _Auditing;
		
		public WaitForTest()
		{
		}
		
		[Column(Storage="_StorageInCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageInCode
		{
			get
			{
				return this._StorageInCode;
			}
			set
			{
				if ((this._StorageInCode != value))
				{
					this._StorageInCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_StorageTime", DbType="DateTime NOT NULL")]
		public System.DateTime StorageTime
		{
			get
			{
				return this._StorageTime;
			}
			set
			{
				if ((this._StorageTime != value))
				{
					this._StorageTime = value;
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this._SupplierName = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_QuantityGentaojian", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityGentaojian
		{
			get
			{
				return this._QuantityGentaojian;
			}
			set
			{
				if ((this._QuantityGentaojian != value))
				{
					this._QuantityGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_QuantityMetre", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityMetre
		{
			get
			{
				return this._QuantityMetre;
			}
			set
			{
				if ((this._QuantityMetre != value))
				{
					this._QuantityMetre = value;
				}
			}
		}
		
		[Column(Storage="_QuantityTon", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> QuantityTon
		{
			get
			{
				return this._QuantityTon;
			}
			set
			{
				if ((this._QuantityTon != value))
				{
					this._QuantityTon = value;
				}
			}
		}
		
		[Column(Storage="_StorageInMaterialsID", DbType="Int NOT NULL")]
		public int StorageInMaterialsID
		{
			get
			{
				return this._StorageInMaterialsID;
			}
			set
			{
				if ((this._StorageInMaterialsID != value))
				{
					this._StorageInMaterialsID = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
		
		[Column(Storage="_MaterialsLeaderID", DbType="Int NOT NULL")]
		public int MaterialsLeaderID
		{
			get
			{
				return this._MaterialsLeaderID;
			}
			set
			{
				if ((this._MaterialsLeaderID != value))
				{
					this._MaterialsLeaderID = value;
				}
			}
		}
		
		[Column(Storage="_Auditing", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Auditing
		{
			get
			{
				return this._Auditing;
			}
			set
			{
				if ((this._Auditing != value))
				{
					this._Auditing = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.WriteOffDetails")]
	public partial class WriteOffDetails
	{
		
		private int _StorageOutDetailsID;
		
		private int _StorageOutRealDetailsID;
		
		private int _StorageOutNoticeID;
		
		private int _StocksID;
		
		private System.Nullable<decimal> _RealGentaojian;
		
		private System.Nullable<decimal> _RealMetre;
		
		private System.Nullable<decimal> _RealTon;
		
		private System.Nullable<decimal> _RealAmount;
		
		private int _ProjectID;
		
		private decimal _UnitPrice;
		
		private string _CurUnit;
		
		private System.DateTime _CreateTime;
		
		private string _StorageOutNoticeCode;
		
		private string _MaterialName;
		
		private string _SpecificationModel;
		
		private string _ManufacturerName;
		
		private int _MaterialID;
		
		private string _FinanceCode;
		
		private string _Status;
		
		private string _MaterialCode;
		
		public WriteOffDetails()
		{
		}
		
		[Column(Storage="_StorageOutDetailsID", DbType="Int NOT NULL")]
		public int StorageOutDetailsID
		{
			get
			{
				return this._StorageOutDetailsID;
			}
			set
			{
				if ((this._StorageOutDetailsID != value))
				{
					this._StorageOutDetailsID = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutRealDetailsID", DbType="Int NOT NULL")]
		public int StorageOutRealDetailsID
		{
			get
			{
				return this._StorageOutRealDetailsID;
			}
			set
			{
				if ((this._StorageOutRealDetailsID != value))
				{
					this._StorageOutRealDetailsID = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeID", DbType="Int NOT NULL")]
		public int StorageOutNoticeID
		{
			get
			{
				return this._StorageOutNoticeID;
			}
			set
			{
				if ((this._StorageOutNoticeID != value))
				{
					this._StorageOutNoticeID = value;
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this._StocksID = value;
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this._RealGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this._RealMetre = value;
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this._RealTon = value;
				}
			}
		}
		
		[Column(Storage="_RealAmount", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> RealAmount
		{
			get
			{
				return this._RealAmount;
			}
			set
			{
				if ((this._RealAmount != value))
				{
					this._RealAmount = value;
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this._CreateTime = value;
				}
			}
		}
		
		[Column(Storage="_StorageOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageOutNoticeCode
		{
			get
			{
				return this._StorageOutNoticeCode;
			}
			set
			{
				if ((this._StorageOutNoticeCode != value))
				{
					this._StorageOutNoticeCode = value;
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[Column(Storage="_SpecificationModel", DbType="NVarChar(200)")]
		public string SpecificationModel
		{
			get
			{
				return this._SpecificationModel;
			}
			set
			{
				if ((this._SpecificationModel != value))
				{
					this._SpecificationModel = value;
				}
			}
		}
		
		[Column(Storage="_ManufacturerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this._ManufacturerName = value;
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int NOT NULL")]
		public int MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this._MaterialID = value;
				}
			}
		}
		
		[Column(Storage="_FinanceCode", DbType="NVarChar(50)")]
		public string FinanceCode
		{
			get
			{
				return this._FinanceCode;
			}
			set
			{
				if ((this._FinanceCode != value))
				{
					this._FinanceCode = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="NVarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this._MaterialCode = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.FlowDetails")]
	public partial class FlowDetails
	{
		
		private string _StorageCommitOutNoticeCode;
		
		private string _ProjectName;
		
		private string _CurUnit;
		
		private decimal _RealGentaojian;
		
		private decimal _RealMetre;
		
		private decimal _RealTon;
		
		private string _type;
		
		private int _StocksID;
		
		private int _ProjectID;
		
		public FlowDetails()
		{
		}
		
		[Column(Storage="_StorageCommitOutNoticeCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StorageCommitOutNoticeCode
		{
			get
			{
				return this._StorageCommitOutNoticeCode;
			}
			set
			{
				if ((this._StorageCommitOutNoticeCode != value))
				{
					this._StorageCommitOutNoticeCode = value;
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[Column(Storage="_CurUnit", DbType="NVarChar(50)")]
		public string CurUnit
		{
			get
			{
				return this._CurUnit;
			}
			set
			{
				if ((this._CurUnit != value))
				{
					this._CurUnit = value;
				}
			}
		}
		
		[Column(Storage="_RealGentaojian", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealGentaojian
		{
			get
			{
				return this._RealGentaojian;
			}
			set
			{
				if ((this._RealGentaojian != value))
				{
					this._RealGentaojian = value;
				}
			}
		}
		
		[Column(Storage="_RealMetre", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealMetre
		{
			get
			{
				return this._RealMetre;
			}
			set
			{
				if ((this._RealMetre != value))
				{
					this._RealMetre = value;
				}
			}
		}
		
		[Column(Storage="_RealTon", DbType="Decimal(18,2) NOT NULL")]
		public decimal RealTon
		{
			get
			{
				return this._RealTon;
			}
			set
			{
				if ((this._RealTon != value))
				{
					this._RealTon = value;
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this._type = value;
				}
			}
		}
		
		[Column(Storage="_StocksID", DbType="Int NOT NULL")]
		public int StocksID
		{
			get
			{
				return this._StocksID;
			}
			set
			{
				if ((this._StocksID != value))
				{
					this._StocksID = value;
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
