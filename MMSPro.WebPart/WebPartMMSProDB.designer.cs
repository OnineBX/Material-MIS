#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MMSPro.WebPart
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MMSPro")]
	public partial class WebPartMMSProDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmpInfo(EmpInfo instance);
    partial void UpdateEmpInfo(EmpInfo instance);
    partial void DeleteEmpInfo(EmpInfo instance);
    partial void InsertTaskStorageIn(TaskStorageIn instance);
    partial void UpdateTaskStorageIn(TaskStorageIn instance);
    partial void DeleteTaskStorageIn(TaskStorageIn instance);
    partial void InsertStockTransferTask(StockTransferTask instance);
    partial void UpdateStockTransferTask(StockTransferTask instance);
    partial void DeleteStockTransferTask(StockTransferTask instance);
    partial void InsertMessageReceiver(MessageReceiver instance);
    partial void UpdateMessageReceiver(MessageReceiver instance);
    partial void DeleteMessageReceiver(MessageReceiver instance);
    partial void InsertMessageInfo(MessageInfo instance);
    partial void UpdateMessageInfo(MessageInfo instance);
    partial void DeleteMessageInfo(MessageInfo instance);
    partial void InsertStorageOutTask(StorageOutTask instance);
    partial void UpdateStorageOutTask(StorageOutTask instance);
    partial void DeleteStorageOutTask(StorageOutTask instance);
    #endregion
		
		public WebPartMMSProDBDataContext() : 
				base(global::MMSPro.WebPart.Properties.Settings.Default.MMSProConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public WebPartMMSProDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebPartMMSProDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebPartMMSProDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebPartMMSProDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EmpInfo> EmpInfo
		{
			get
			{
				return this.GetTable<EmpInfo>();
			}
		}
		
		public System.Data.Linq.Table<TaskStorageIn> TaskStorageIn
		{
			get
			{
				return this.GetTable<TaskStorageIn>();
			}
		}
		
		public System.Data.Linq.Table<StockTransferTask> StockTransferTask
		{
			get
			{
				return this.GetTable<StockTransferTask>();
			}
		}
		
		public System.Data.Linq.Table<MessageReceiver> MessageReceiver
		{
			get
			{
				return this.GetTable<MessageReceiver>();
			}
		}
		
		public System.Data.Linq.Table<MessageInfo> MessageInfo
		{
			get
			{
				return this.GetTable<MessageInfo>();
			}
		}
		
		public System.Data.Linq.Table<StorageOutTask> StorageOutTask
		{
			get
			{
				return this.GetTable<StorageOutTask>();
			}
		}
	}
	
	[Table(Name="dbo.EmpInfo")]
	public partial class EmpInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpID;
		
		private string _Account;
		
		private int _DepID;
		
		private string _EmpName;
		
		private string _Contact;
		
		private string _Remark;
		
		private EntitySet<TaskStorageIn> _TaskStorageIn;
		
		private EntitySet<TaskStorageIn> _TaskStorageIn1;
		
		private EntitySet<StockTransferTask> _StockTransferTask;
		
		private EntitySet<StockTransferTask> _StockTransferTask1;
		
		private EntitySet<MessageReceiver> _MessageReceiver;
		
		private EntitySet<MessageInfo> _MessageInfo;
		
		private EntitySet<StorageOutTask> _StorageOutTask;
		
		private EntitySet<StorageOutTask> _StorageOutTask1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIDChanging(int value);
    partial void OnEmpIDChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public EmpInfo()
		{
			this._TaskStorageIn = new EntitySet<TaskStorageIn>(new Action<TaskStorageIn>(this.attach_TaskStorageIn), new Action<TaskStorageIn>(this.detach_TaskStorageIn));
			this._TaskStorageIn1 = new EntitySet<TaskStorageIn>(new Action<TaskStorageIn>(this.attach_TaskStorageIn1), new Action<TaskStorageIn>(this.detach_TaskStorageIn1));
			this._StockTransferTask = new EntitySet<StockTransferTask>(new Action<StockTransferTask>(this.attach_StockTransferTask), new Action<StockTransferTask>(this.detach_StockTransferTask));
			this._StockTransferTask1 = new EntitySet<StockTransferTask>(new Action<StockTransferTask>(this.attach_StockTransferTask1), new Action<StockTransferTask>(this.detach_StockTransferTask1));
			this._MessageReceiver = new EntitySet<MessageReceiver>(new Action<MessageReceiver>(this.attach_MessageReceiver), new Action<MessageReceiver>(this.detach_MessageReceiver));
			this._MessageInfo = new EntitySet<MessageInfo>(new Action<MessageInfo>(this.attach_MessageInfo), new Action<MessageInfo>(this.detach_MessageInfo));
			this._StorageOutTask = new EntitySet<StorageOutTask>(new Action<StorageOutTask>(this.attach_StorageOutTask), new Action<StorageOutTask>(this.detach_StorageOutTask));
			this._StorageOutTask1 = new EntitySet<StorageOutTask>(new Action<StorageOutTask>(this.attach_StorageOutTask1), new Action<StorageOutTask>(this.detach_StorageOutTask1));
			OnCreated();
		}
		
		[Column(Storage="_EmpID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[Column(Storage="_Account", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_DepID", DbType="Int NOT NULL")]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmpName", DbType="NVarChar(50)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[Column(Storage="_Contact", DbType="NVarChar(50)")]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn", Storage="_TaskStorageIn", ThisKey="EmpID", OtherKey="TaskCreaterID")]
		public EntitySet<TaskStorageIn> TaskStorageIn
		{
			get
			{
				return this._TaskStorageIn;
			}
			set
			{
				this._TaskStorageIn.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn1", Storage="_TaskStorageIn1", ThisKey="EmpID", OtherKey="TaskTargetID")]
		public EntitySet<TaskStorageIn> TaskStorageIn1
		{
			get
			{
				return this._TaskStorageIn1;
			}
			set
			{
				this._TaskStorageIn1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask", Storage="_StockTransferTask", ThisKey="EmpID", OtherKey="TaskCreaterID")]
		public EntitySet<StockTransferTask> StockTransferTask
		{
			get
			{
				return this._StockTransferTask;
			}
			set
			{
				this._StockTransferTask.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask1", Storage="_StockTransferTask1", ThisKey="EmpID", OtherKey="TaskTargetID")]
		public EntitySet<StockTransferTask> StockTransferTask1
		{
			get
			{
				return this._StockTransferTask1;
			}
			set
			{
				this._StockTransferTask1.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_MessageReceiver", Storage="_MessageReceiver", ThisKey="EmpID", OtherKey="ReceiverID")]
		public EntitySet<MessageReceiver> MessageReceiver
		{
			get
			{
				return this._MessageReceiver;
			}
			set
			{
				this._MessageReceiver.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_MessageInfo", Storage="_MessageInfo", ThisKey="EmpID", OtherKey="Creater")]
		public EntitySet<MessageInfo> MessageInfo
		{
			get
			{
				return this._MessageInfo;
			}
			set
			{
				this._MessageInfo.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask", Storage="_StorageOutTask", ThisKey="EmpID", OtherKey="TaskCreaterID")]
		public EntitySet<StorageOutTask> StorageOutTask
		{
			get
			{
				return this._StorageOutTask;
			}
			set
			{
				this._StorageOutTask.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask1", Storage="_StorageOutTask1", ThisKey="EmpID", OtherKey="TaskTargetID")]
		public EntitySet<StorageOutTask> StorageOutTask1
		{
			get
			{
				return this._StorageOutTask1;
			}
			set
			{
				this._StorageOutTask1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskStorageIn(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_TaskStorageIn(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_TaskStorageIn1(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_TaskStorageIn1(TaskStorageIn entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_StockTransferTask(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StockTransferTask(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StockTransferTask1(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_StockTransferTask1(StockTransferTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
		
		private void attach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_MessageInfo(MessageInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_MessageInfo(MessageInfo entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutTask(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = this;
		}
		
		private void detach_StorageOutTask(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo = null;
		}
		
		private void attach_StorageOutTask1(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = this;
		}
		
		private void detach_StorageOutTask1(StorageOutTask entity)
		{
			this.SendPropertyChanging();
			entity.EmpInfo1 = null;
		}
	}
	
	[Table(Name="dbo.TaskStorageIn")]
	public partial class TaskStorageIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskStorageID;
		
		private int _TaskCreaterID;
		
		private int _TaskTargetID;
		
		private string _StorageInType;
		
		private int _StorageInID;
		
		private string _QCBatch;
		
		private string _TaskTitle;
		
		private string _Remark;
		
		private string _InspectState;
		
		private string _TaskState;
		
		private string _TaskDispose;
		
		private string _TaskType;
		
		private System.DateTime _CreateTime;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskStorageIDChanging(int value);
    partial void OnTaskStorageIDChanged();
    partial void OnTaskCreaterIDChanging(int value);
    partial void OnTaskCreaterIDChanged();
    partial void OnTaskTargetIDChanging(int value);
    partial void OnTaskTargetIDChanged();
    partial void OnStorageInTypeChanging(string value);
    partial void OnStorageInTypeChanged();
    partial void OnStorageInIDChanging(int value);
    partial void OnStorageInIDChanged();
    partial void OnQCBatchChanging(string value);
    partial void OnQCBatchChanged();
    partial void OnTaskTitleChanging(string value);
    partial void OnTaskTitleChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnInspectStateChanging(string value);
    partial void OnInspectStateChanged();
    partial void OnTaskStateChanging(string value);
    partial void OnTaskStateChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnTaskTypeChanging(string value);
    partial void OnTaskTypeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public TaskStorageIn()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_TaskStorageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskStorageID
		{
			get
			{
				return this._TaskStorageID;
			}
			set
			{
				if ((this._TaskStorageID != value))
				{
					this.OnTaskStorageIDChanging(value);
					this.SendPropertyChanging();
					this._TaskStorageID = value;
					this.SendPropertyChanged("TaskStorageID");
					this.OnTaskStorageIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskCreaterID", DbType="Int NOT NULL")]
		public int TaskCreaterID
		{
			get
			{
				return this._TaskCreaterID;
			}
			set
			{
				if ((this._TaskCreaterID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskCreaterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskCreaterID = value;
					this.SendPropertyChanged("TaskCreaterID");
					this.OnTaskCreaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTargetID", DbType="Int NOT NULL")]
		public int TaskTargetID
		{
			get
			{
				return this._TaskTargetID;
			}
			set
			{
				if ((this._TaskTargetID != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTargetID = value;
					this.SendPropertyChanged("TaskTargetID");
					this.OnTaskTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInType", DbType="NVarChar(50)")]
		public string StorageInType
		{
			get
			{
				return this._StorageInType;
			}
			set
			{
				if ((this._StorageInType != value))
				{
					this.OnStorageInTypeChanging(value);
					this.SendPropertyChanging();
					this._StorageInType = value;
					this.SendPropertyChanged("StorageInType");
					this.OnStorageInTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StorageInID", DbType="Int NOT NULL")]
		public int StorageInID
		{
			get
			{
				return this._StorageInID;
			}
			set
			{
				if ((this._StorageInID != value))
				{
					this.OnStorageInIDChanging(value);
					this.SendPropertyChanging();
					this._StorageInID = value;
					this.SendPropertyChanged("StorageInID");
					this.OnStorageInIDChanged();
				}
			}
		}
		
		[Column(Storage="_QCBatch", DbType="NVarChar(50)")]
		public string QCBatch
		{
			get
			{
				return this._QCBatch;
			}
			set
			{
				if ((this._QCBatch != value))
				{
					this.OnQCBatchChanging(value);
					this.SendPropertyChanging();
					this._QCBatch = value;
					this.SendPropertyChanged("QCBatch");
					this.OnQCBatchChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskTitle
		{
			get
			{
				return this._TaskTitle;
			}
			set
			{
				if ((this._TaskTitle != value))
				{
					this.OnTaskTitleChanging(value);
					this.SendPropertyChanging();
					this._TaskTitle = value;
					this.SendPropertyChanged("TaskTitle");
					this.OnTaskTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_InspectState", DbType="NVarChar(50)")]
		public string InspectState
		{
			get
			{
				return this._InspectState;
			}
			set
			{
				if ((this._InspectState != value))
				{
					this.OnInspectStateChanging(value);
					this.SendPropertyChanging();
					this._InspectState = value;
					this.SendPropertyChanged("InspectState");
					this.OnInspectStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskState", DbType="NVarChar(50)")]
		public string TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="NVarChar(50)")]
		public string TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn", Storage="_EmpInfo", ThisKey="TaskCreaterID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.TaskStorageIn.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.TaskStorageIn.Add(this);
						this._TaskCreaterID = value.EmpID;
					}
					else
					{
						this._TaskCreaterID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_TaskStorageIn1", Storage="_EmpInfo1", ThisKey="TaskTargetID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.TaskStorageIn1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.TaskStorageIn1.Add(this);
						this._TaskTargetID = value.EmpID;
					}
					else
					{
						this._TaskTargetID = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StockTransferTask")]
	public partial class StockTransferTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockTransferTaskID;
		
		private int _StockTransferID;
		
		private System.Nullable<int> _TaskCreaterID;
		
		private System.Nullable<int> _TaskTargetID;
		
		private string _TaskInType;
		
		private string _TaskTitle;
		
		private System.Nullable<System.DateTime> _AcceptTime;
		
		private string _AuditOpinion;
		
		private string _AuditStatus;
		
		private string _TaskState;
		
		private string _TaskDispose;
		
		private string _TaskType;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockTransferTaskIDChanging(int value);
    partial void OnStockTransferTaskIDChanged();
    partial void OnStockTransferIDChanging(int value);
    partial void OnStockTransferIDChanged();
    partial void OnTaskCreaterIDChanging(System.Nullable<int> value);
    partial void OnTaskCreaterIDChanged();
    partial void OnTaskTargetIDChanging(System.Nullable<int> value);
    partial void OnTaskTargetIDChanged();
    partial void OnTaskInTypeChanging(string value);
    partial void OnTaskInTypeChanged();
    partial void OnTaskTitleChanging(string value);
    partial void OnTaskTitleChanged();
    partial void OnAcceptTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptTimeChanged();
    partial void OnAuditOpinionChanging(string value);
    partial void OnAuditOpinionChanged();
    partial void OnAuditStatusChanging(string value);
    partial void OnAuditStatusChanged();
    partial void OnTaskStateChanging(string value);
    partial void OnTaskStateChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnTaskTypeChanging(string value);
    partial void OnTaskTypeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public StockTransferTask()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_StockTransferTaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockTransferTaskID
		{
			get
			{
				return this._StockTransferTaskID;
			}
			set
			{
				if ((this._StockTransferTaskID != value))
				{
					this.OnStockTransferTaskIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferTaskID = value;
					this.SendPropertyChanged("StockTransferTaskID");
					this.OnStockTransferTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_StockTransferID", DbType="Int NOT NULL")]
		public int StockTransferID
		{
			get
			{
				return this._StockTransferID;
			}
			set
			{
				if ((this._StockTransferID != value))
				{
					this.OnStockTransferIDChanging(value);
					this.SendPropertyChanging();
					this._StockTransferID = value;
					this.SendPropertyChanged("StockTransferID");
					this.OnStockTransferIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskCreaterID", DbType="Int")]
		public System.Nullable<int> TaskCreaterID
		{
			get
			{
				return this._TaskCreaterID;
			}
			set
			{
				if ((this._TaskCreaterID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskCreaterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskCreaterID = value;
					this.SendPropertyChanged("TaskCreaterID");
					this.OnTaskCreaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTargetID", DbType="Int")]
		public System.Nullable<int> TaskTargetID
		{
			get
			{
				return this._TaskTargetID;
			}
			set
			{
				if ((this._TaskTargetID != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTargetID = value;
					this.SendPropertyChanged("TaskTargetID");
					this.OnTaskTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskInType", DbType="NVarChar(50)")]
		public string TaskInType
		{
			get
			{
				return this._TaskInType;
			}
			set
			{
				if ((this._TaskInType != value))
				{
					this.OnTaskInTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskInType = value;
					this.SendPropertyChanged("TaskInType");
					this.OnTaskInTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskTitle
		{
			get
			{
				return this._TaskTitle;
			}
			set
			{
				if ((this._TaskTitle != value))
				{
					this.OnTaskTitleChanging(value);
					this.SendPropertyChanging();
					this._TaskTitle = value;
					this.SendPropertyChanged("TaskTitle");
					this.OnTaskTitleChanged();
				}
			}
		}
		
		[Column(Storage="_AcceptTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptTime
		{
			get
			{
				return this._AcceptTime;
			}
			set
			{
				if ((this._AcceptTime != value))
				{
					this.OnAcceptTimeChanging(value);
					this.SendPropertyChanging();
					this._AcceptTime = value;
					this.SendPropertyChanged("AcceptTime");
					this.OnAcceptTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOpinion", DbType="NVarChar(200)")]
		public string AuditOpinion
		{
			get
			{
				return this._AuditOpinion;
			}
			set
			{
				if ((this._AuditOpinion != value))
				{
					this.OnAuditOpinionChanging(value);
					this.SendPropertyChanging();
					this._AuditOpinion = value;
					this.SendPropertyChanged("AuditOpinion");
					this.OnAuditOpinionChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStatus", DbType="NVarChar(50)")]
		public string AuditStatus
		{
			get
			{
				return this._AuditStatus;
			}
			set
			{
				if ((this._AuditStatus != value))
				{
					this.OnAuditStatusChanging(value);
					this.SendPropertyChanging();
					this._AuditStatus = value;
					this.SendPropertyChanged("AuditStatus");
					this.OnAuditStatusChanged();
				}
			}
		}
		
		[Column(Storage="_TaskState", DbType="NVarChar(50)")]
		public string TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="NVarChar(50)")]
		public string TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask", Storage="_EmpInfo", ThisKey="TaskCreaterID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StockTransferTask.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StockTransferTask.Add(this);
						this._TaskCreaterID = value.EmpID;
					}
					else
					{
						this._TaskCreaterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StockTransferTask1", Storage="_EmpInfo1", ThisKey="TaskTargetID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.StockTransferTask1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.StockTransferTask1.Add(this);
						this._TaskTargetID = value.EmpID;
					}
					else
					{
						this._TaskTargetID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageReceiver")]
	public partial class MessageReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageReceiverID;
		
		private int _MessageInfoID;
		
		private int _ReceiverID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<MessageInfo> _MessageInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageReceiverIDChanging(int value);
    partial void OnMessageReceiverIDChanged();
    partial void OnMessageInfoIDChanging(int value);
    partial void OnMessageInfoIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    #endregion
		
		public MessageReceiver()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._MessageInfo = default(EntityRef<MessageInfo>);
			OnCreated();
		}
		
		[Column(Storage="_MessageReceiverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageReceiverID
		{
			get
			{
				return this._MessageReceiverID;
			}
			set
			{
				if ((this._MessageReceiverID != value))
				{
					this.OnMessageReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._MessageReceiverID = value;
					this.SendPropertyChanged("MessageReceiverID");
					this.OnMessageReceiverIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageInfoID", DbType="Int NOT NULL")]
		public int MessageInfoID
		{
			get
			{
				return this._MessageInfoID;
			}
			set
			{
				if ((this._MessageInfoID != value))
				{
					if (this._MessageInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageInfoIDChanging(value);
					this.SendPropertyChanging();
					this._MessageInfoID = value;
					this.SendPropertyChanged("MessageInfoID");
					this.OnMessageInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_MessageReceiver", Storage="_EmpInfo", ThisKey="ReceiverID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.MessageReceiver.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.MessageReceiver.Add(this);
						this._ReceiverID = value.EmpID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="MessageInfo_MessageReceiver", Storage="_MessageInfo", ThisKey="MessageInfoID", OtherKey="MessageInfoID", IsForeignKey=true)]
		public MessageInfo MessageInfo
		{
			get
			{
				return this._MessageInfo.Entity;
			}
			set
			{
				MessageInfo previousValue = this._MessageInfo.Entity;
				if (((previousValue != value) 
							|| (this._MessageInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageInfo.Entity = null;
						previousValue.MessageReceiver.Remove(this);
					}
					this._MessageInfo.Entity = value;
					if ((value != null))
					{
						value.MessageReceiver.Add(this);
						this._MessageInfoID = value.MessageInfoID;
					}
					else
					{
						this._MessageInfoID = default(int);
					}
					this.SendPropertyChanged("MessageInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageInfo")]
	public partial class MessageInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageInfoID;
		
		private int _Creater;
		
		private string _MessageTitle;
		
		private string _MessageContent;
		
		private string _MessageSource;
		
		private string _MessageStatus;
		
		private string _MessageType;
		
		private System.Nullable<System.DateTime> _CreateTime;
		
		private EntitySet<MessageReceiver> _MessageReceiver;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageInfoIDChanging(int value);
    partial void OnMessageInfoIDChanged();
    partial void OnCreaterChanging(int value);
    partial void OnCreaterChanged();
    partial void OnMessageTitleChanging(string value);
    partial void OnMessageTitleChanged();
    partial void OnMessageContentChanging(string value);
    partial void OnMessageContentChanged();
    partial void OnMessageSourceChanging(string value);
    partial void OnMessageSourceChanged();
    partial void OnMessageStatusChanging(string value);
    partial void OnMessageStatusChanged();
    partial void OnMessageTypeChanging(string value);
    partial void OnMessageTypeChanged();
    partial void OnCreateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public MessageInfo()
		{
			this._MessageReceiver = new EntitySet<MessageReceiver>(new Action<MessageReceiver>(this.attach_MessageReceiver), new Action<MessageReceiver>(this.detach_MessageReceiver));
			this._EmpInfo = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_MessageInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageInfoID
		{
			get
			{
				return this._MessageInfoID;
			}
			set
			{
				if ((this._MessageInfoID != value))
				{
					this.OnMessageInfoIDChanging(value);
					this.SendPropertyChanging();
					this._MessageInfoID = value;
					this.SendPropertyChanged("MessageInfoID");
					this.OnMessageInfoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Creater", DbType="Int NOT NULL")]
		public int Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTitle", DbType="NVarChar(50)")]
		public string MessageTitle
		{
			get
			{
				return this._MessageTitle;
			}
			set
			{
				if ((this._MessageTitle != value))
				{
					this.OnMessageTitleChanging(value);
					this.SendPropertyChanging();
					this._MessageTitle = value;
					this.SendPropertyChanged("MessageTitle");
					this.OnMessageTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MessageContent", DbType="NVarChar(MAX)")]
		public string MessageContent
		{
			get
			{
				return this._MessageContent;
			}
			set
			{
				if ((this._MessageContent != value))
				{
					this.OnMessageContentChanging(value);
					this.SendPropertyChanging();
					this._MessageContent = value;
					this.SendPropertyChanged("MessageContent");
					this.OnMessageContentChanged();
				}
			}
		}
		
		[Column(Storage="_MessageSource", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MessageSource
		{
			get
			{
				return this._MessageSource;
			}
			set
			{
				if ((this._MessageSource != value))
				{
					this.OnMessageSourceChanging(value);
					this.SendPropertyChanging();
					this._MessageSource = value;
					this.SendPropertyChanged("MessageSource");
					this.OnMessageSourceChanged();
				}
			}
		}
		
		[Column(Storage="_MessageStatus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MessageStatus
		{
			get
			{
				return this._MessageStatus;
			}
			set
			{
				if ((this._MessageStatus != value))
				{
					this.OnMessageStatusChanging(value);
					this.SendPropertyChanging();
					this._MessageStatus = value;
					this.SendPropertyChanged("MessageStatus");
					this.OnMessageStatusChanged();
				}
			}
		}
		
		[Column(Storage="_MessageType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MessageType
		{
			get
			{
				return this._MessageType;
			}
			set
			{
				if ((this._MessageType != value))
				{
					this.OnMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._MessageType = value;
					this.SendPropertyChanged("MessageType");
					this.OnMessageTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Association(Name="MessageInfo_MessageReceiver", Storage="_MessageReceiver", ThisKey="MessageInfoID", OtherKey="MessageInfoID")]
		public EntitySet<MessageReceiver> MessageReceiver
		{
			get
			{
				return this._MessageReceiver;
			}
			set
			{
				this._MessageReceiver.Assign(value);
			}
		}
		
		[Association(Name="EmpInfo_MessageInfo", Storage="_EmpInfo", ThisKey="Creater", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.MessageInfo.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.MessageInfo.Add(this);
						this._Creater = value.EmpID;
					}
					else
					{
						this._Creater = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.MessageInfo = this;
		}
		
		private void detach_MessageReceiver(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.MessageInfo = null;
		}
	}
	
	[Table(Name="dbo.StorageOutTask")]
	public partial class StorageOutTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _Process;
		
		private int _TaskCreaterID;
		
		private int _TaskTargetID;
		
		private int _NoticeID;
		
		private string _TaskTitle;
		
		private string _Remark;
		
		private string _TaskState;
		
		private string _TaskDispose;
		
		private string _TaskType;
		
		private System.DateTime _CreateTime;
		
		private int _PreviousTaskID;
		
		private EntityRef<EmpInfo> _EmpInfo;
		
		private EntityRef<EmpInfo> _EmpInfo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnProcessChanging(string value);
    partial void OnProcessChanged();
    partial void OnTaskCreaterIDChanging(int value);
    partial void OnTaskCreaterIDChanged();
    partial void OnTaskTargetIDChanging(int value);
    partial void OnTaskTargetIDChanged();
    partial void OnNoticeIDChanging(int value);
    partial void OnNoticeIDChanged();
    partial void OnTaskTitleChanging(string value);
    partial void OnTaskTitleChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTaskStateChanging(string value);
    partial void OnTaskStateChanged();
    partial void OnTaskDisposeChanging(string value);
    partial void OnTaskDisposeChanged();
    partial void OnTaskTypeChanging(string value);
    partial void OnTaskTypeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnPreviousTaskIDChanging(int value);
    partial void OnPreviousTaskIDChanged();
    #endregion
		
		public StorageOutTask()
		{
			this._EmpInfo = default(EntityRef<EmpInfo>);
			this._EmpInfo1 = default(EntityRef<EmpInfo>);
			OnCreated();
		}
		
		[Column(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Process", DbType="NVarChar(50)")]
		public string Process
		{
			get
			{
				return this._Process;
			}
			set
			{
				if ((this._Process != value))
				{
					this.OnProcessChanging(value);
					this.SendPropertyChanging();
					this._Process = value;
					this.SendPropertyChanged("Process");
					this.OnProcessChanged();
				}
			}
		}
		
		[Column(Storage="_TaskCreaterID", DbType="Int NOT NULL")]
		public int TaskCreaterID
		{
			get
			{
				return this._TaskCreaterID;
			}
			set
			{
				if ((this._TaskCreaterID != value))
				{
					if (this._EmpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskCreaterIDChanging(value);
					this.SendPropertyChanging();
					this._TaskCreaterID = value;
					this.SendPropertyChanged("TaskCreaterID");
					this.OnTaskCreaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTargetID", DbType="Int NOT NULL")]
		public int TaskTargetID
		{
			get
			{
				return this._TaskTargetID;
			}
			set
			{
				if ((this._TaskTargetID != value))
				{
					if (this._EmpInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTargetID = value;
					this.SendPropertyChanged("TaskTargetID");
					this.OnTaskTargetIDChanged();
				}
			}
		}
		
		[Column(Storage="_NoticeID", DbType="Int NOT NULL")]
		public int NoticeID
		{
			get
			{
				return this._NoticeID;
			}
			set
			{
				if ((this._NoticeID != value))
				{
					this.OnNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeID = value;
					this.SendPropertyChanged("NoticeID");
					this.OnNoticeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskTitle
		{
			get
			{
				return this._TaskTitle;
			}
			set
			{
				if ((this._TaskTitle != value))
				{
					this.OnTaskTitleChanging(value);
					this.SendPropertyChanging();
					this._TaskTitle = value;
					this.SendPropertyChanged("TaskTitle");
					this.OnTaskTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TaskState", DbType="NVarChar(50)")]
		public string TaskState
		{
			get
			{
				return this._TaskState;
			}
			set
			{
				if ((this._TaskState != value))
				{
					this.OnTaskStateChanging(value);
					this.SendPropertyChanging();
					this._TaskState = value;
					this.SendPropertyChanged("TaskState");
					this.OnTaskStateChanged();
				}
			}
		}
		
		[Column(Storage="_TaskDispose", DbType="NVarChar(50)")]
		public string TaskDispose
		{
			get
			{
				return this._TaskDispose;
			}
			set
			{
				if ((this._TaskDispose != value))
				{
					this.OnTaskDisposeChanging(value);
					this.SendPropertyChanging();
					this._TaskDispose = value;
					this.SendPropertyChanged("TaskDispose");
					this.OnTaskDisposeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="NVarChar(50)")]
		public string TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_PreviousTaskID", DbType="Int NOT NULL")]
		public int PreviousTaskID
		{
			get
			{
				return this._PreviousTaskID;
			}
			set
			{
				if ((this._PreviousTaskID != value))
				{
					this.OnPreviousTaskIDChanging(value);
					this.SendPropertyChanging();
					this._PreviousTaskID = value;
					this.SendPropertyChanged("PreviousTaskID");
					this.OnPreviousTaskIDChanged();
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask", Storage="_EmpInfo", ThisKey="TaskCreaterID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo
		{
			get
			{
				return this._EmpInfo.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo.Entity = null;
						previousValue.StorageOutTask.Remove(this);
					}
					this._EmpInfo.Entity = value;
					if ((value != null))
					{
						value.StorageOutTask.Add(this);
						this._TaskCreaterID = value.EmpID;
					}
					else
					{
						this._TaskCreaterID = default(int);
					}
					this.SendPropertyChanged("EmpInfo");
				}
			}
		}
		
		[Association(Name="EmpInfo_StorageOutTask1", Storage="_EmpInfo1", ThisKey="TaskTargetID", OtherKey="EmpID", IsForeignKey=true)]
		public EmpInfo EmpInfo1
		{
			get
			{
				return this._EmpInfo1.Entity;
			}
			set
			{
				EmpInfo previousValue = this._EmpInfo1.Entity;
				if (((previousValue != value) 
							|| (this._EmpInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpInfo1.Entity = null;
						previousValue.StorageOutTask1.Remove(this);
					}
					this._EmpInfo1.Entity = value;
					if ((value != null))
					{
						value.StorageOutTask1.Add(this);
						this._TaskTargetID = value.EmpID;
					}
					else
					{
						this._TaskTargetID = default(int);
					}
					this.SendPropertyChanged("EmpInfo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
